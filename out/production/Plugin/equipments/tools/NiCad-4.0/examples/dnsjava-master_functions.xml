<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/lookup.java" startline="9" endline="31">
public static void printAnswer (String name, Lookup lookup) {
    System.out.print (name + ":");
    int result = lookup.getResult ();
    if (result != Lookup.SUCCESSFUL) System.out.print (" " + lookup.getErrorString ());

    System.out.println ();
    Name [] aliases = lookup.getAliases ();
    if (aliases.length > 0) {
        System.out.print ("# aliases: ");
        for (int i = 0;
        i < aliases.length; i ++) {
            System.out.print (aliases [i]);
            if (i < aliases.length - 1) System.out.print (" ");

        }
        System.out.println ();
    }
    if (lookup.getResult () == Lookup.SUCCESSFUL) {
        Record [] answers = lookup.getAnswers ();
        for (int i = 0;
        i < answers.length; i ++) System.out.println (answers [i]);

    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/lookup.java" startline="33" endline="48">
public static void main (String [] args) throws Exception {
    int type = Type.A;
    int start = 0;
    if (args.length > 2 && args [0].equals ("-t")) {
        type = Type.value (args [1]);
        if (type < 0) throw new IllegalArgumentException ("invalid type");

        start = 2;
    }
    for (int i = start;
    i < args.length; i ++) {
        Lookup l = new Lookup (args [i], type);
        l.run ();
        printAnswer (args [i], l);
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/update.java" startline="20" endline="25">
void print (Object o) {
    System.out.println (o);
    if (log != null) log.println (o);

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/update.java" startline="27" endline="32">
public Message newMessage () {
    Message msg = new Message ();
    msg.getHeader ().setOpcode (Opcode.UPDATE);
    return msg;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/update.java" startline="34" endline="242">
public update (InputStream in) throws IOException {
    List inputs = new LinkedList ();
    List istreams = new LinkedList ();
    query = newMessage ();
    InputStreamReader isr = new InputStreamReader (in);
    BufferedReader br = new BufferedReader (isr);
    inputs.add (br);
    istreams.add (in);
    while (true) {
        try {
            String line = null;
            do {
                InputStream is;
                is = (InputStream) istreams.get (0);
                br = (BufferedReader) inputs.get (0);
                if (is == System.in) System.out.print ("> ");

                line = br.readLine ();
                if (line == null) {
                    br.close ();
                    inputs.remove (0);
                    istreams.remove (0);
                    if (inputs.isEmpty ()) return;

                }
            } while (line == null);
            if (log != null) log.println ("> " + line);

            if (line.length () == 0 || line.charAt (0) == '#') continue;

            if (line.charAt (0) == '>') line = line.substring (1);

            Tokenizer st = new Tokenizer (line);
            Tokenizer.Token token = st.get ();
            if (token.isEOL ()) continue;

            String operation = token.value;
            if (operation.equals ("server")) {
                server = st.getString ();
                res = new SimpleResolver (server);
                token = st.get ();
                if (token.isString ()) {
                    String portstr = token.value;
                    res.setPort (Short.parseShort (portstr));
                }
            } else if (operation.equals ("key")) {
                String keyname = st.getString ();
                String keydata = st.getString ();
                if (res == null) res = new SimpleResolver (server);

                res.setTSIGKey (new TSIG (keyname, keydata));
            } else if (operation.equals ("edns")) {
                if (res == null) res = new SimpleResolver (server);

                res.setEDNS (st.getUInt16 ());
            } else if (operation.equals ("port")) {
                if (res == null) res = new SimpleResolver (server);

                res.setPort (st.getUInt16 ());
            } else if (operation.equals ("tcp")) {
                if (res == null) res = new SimpleResolver (server);

                res.setTCP (true);
            } else if (operation.equals ("class")) {
                String classStr = st.getString ();
                int newClass = DClass.value (classStr);
                if (newClass > 0) defaultClass = newClass;
                else print ("Invalid class " + classStr);

            } else if (operation.equals ("ttl")) defaultTTL = st.getTTL ();
            else if (operation.equals ("origin") || operation.equals ("zone")) {
                zone = st.getName (Name.root);
            } else if (operation.equals ("require")) doRequire (st);
            else if (operation.equals ("prohibit")) doProhibit (st);
            else if (operation.equals ("add")) doAdd (st);
            else if (operation.equals ("delete")) doDelete (st);
            else if (operation.equals ("glue")) doGlue (st);
            else if (operation.equals ("help") || operation.equals ("?")) {
                token = st.get ();
                if (token.isString ()) help (token.value);
                else help (null);

            } else if (operation.equals ("echo")) print (line.substring (4).trim ());
            else if (operation.equals ("send")) {
                sendUpdate ();
                query = newMessage ();
            } else if (operation.equals ("show")) {
                print (query);
            } else if (operation.equals ("clear")) query = newMessage ();
            else if (operation.equals ("query")) doQuery (st);
            else if (operation.equals ("quit") || operation.equals ("q")) {
                if (log != null) log.close ();

                Iterator it = inputs.iterator ();
                while (it.hasNext ()) {
                    BufferedReader tbr;
                    tbr = (BufferedReader) it.next ();
                    tbr.close ();
                }
                System.exit (0);
            } else if (operation.equals ("file")) doFile (st, inputs, istreams);
            else if (operation.equals ("log")) doLog (st);
            else if (operation.equals ("assert")) {
                if (doAssert (st) == false) return;

            } else if (operation.equals ("sleep")) {
                long interval = st.getUInt32 ();
                try {
                    Thread.sleep (interval);
                } catch (InterruptedException e) {
                }
            } else if (operation.equals ("date")) {
                Date now = new Date ();
                token = st.get ();
                if (token.isString () && token.value.equals ("-ms")) print (Long.toString (now.getTime ()));
                else print (now);

            } else print ("invalid keyword: " + operation);

        } catch (TextParseException tpe) {
            System.out.println (tpe.getMessage ());
        } catch (InterruptedIOException iioe) {
            System.out.println ("Operation timed out");
        } catch (SocketException se) {
            System.out.println ("Socket error");
        } catch (IOException ioe) {
            System.out.println (ioe);
        }
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/update.java" startline="244" endline="276">
void sendUpdate () throws IOException {
    if (query.getHeader ().getCount (Section.UPDATE) == 0) {
        print ("Empty update message.  Ignoring.");
        return;
    }
    if (query.getHeader ().getCount (Section.ZONE) == 0) {
        Name updzone;
        updzone = zone;
        int dclass = defaultClass;
        if (updzone == null) {
            Record [] recs = query.getSectionArray (Section.UPDATE);
            for (int i = 0;
            i < recs.length; i ++) {
                if (updzone == null) updzone = new Name (recs [i].getName (), 1);

                if (recs [i].getDClass () != DClass.NONE && recs [i].getDClass () != DClass.ANY) {
                    dclass = recs [i].getDClass ();
                    break;
                }
            }
        }
        Record soa = Record.newRecord (updzone, Type.SOA, dclass);
        query.addRecord (soa, Section.ZONE);
    }
    if (res == null) res = new SimpleResolver (server);

    response = res.send (query);
    print (response);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/update.java" startline="282" endline="314">
Record parseRR (Tokenizer st, int classValue, long TTLValue) throws IOException {
    Name name = st.getName (zone);
    long ttl;
    int type;
    Record record;
    String s = st.getString ();
    try {
        ttl = TTL.parseTTL (s);
        s = st.getString ();
    } catch (NumberFormatException e) {
        ttl = TTLValue;
    }
    if (DClass.value (s) >= 0) {
        classValue = DClass.value (s);
        s = st.getString ();
    }
    if ((type = Type.value (s)) < 0) throw new IOException ("Invalid type: " + s);

    record = Record.fromString (name, type, classValue, ttl, st, zone);
    if (record != null) return (record);
    else throw new IOException ("Parse error");

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/update.java" startline="316" endline="342">
void doRequire (Tokenizer st) throws IOException {
    Tokenizer.Token token;
    Name name;
    Record record;
    int type;
    name = st.getName (zone);
    token = st.get ();
    if (token.isString ()) {
        if ((type = Type.value (token.value)) < 0) throw new IOException ("Invalid type: " + token.value);

        token = st.get ();
        boolean iseol = token.isEOL ();
        st.unget ();
        if (! iseol) {
            record = Record.fromString (name, type, defaultClass, 0, st, zone);
        } else record = Record.newRecord (name, type, DClass.ANY, 0);

    } else record = Record.newRecord (name, Type.ANY, DClass.ANY, 0);

    query.addRecord (record, Section.PREREQ);
    print (record);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/update.java" startline="344" endline="361">
void doProhibit (Tokenizer st) throws IOException {
    Tokenizer.Token token;
    Name name;
    Record record;
    int type;
    name = st.getName (zone);
    token = st.get ();
    if (token.isString ()) {
        if ((type = Type.value (token.value)) < 0) throw new IOException ("Invalid type: " + token.value);

    } else type = Type.ANY;

    record = Record.newRecord (name, type, DClass.NONE, 0);
    query.addRecord (record, Section.PREREQ);
    print (record);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/update.java" startline="363" endline="368">
void doAdd (Tokenizer st) throws IOException {
    Record record = parseRR (st, defaultClass, defaultTTL);
    query.addRecord (record, Section.UPDATE);
    print (record);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/update.java" startline="370" endline="401">
void doDelete (Tokenizer st) throws IOException {
    Tokenizer.Token token;
    String s;
    Name name;
    Record record;
    int type;
    name = st.getName (zone);
    token = st.get ();
    if (token.isString ()) {
        s = token.value;
        if (DClass.value (s) >= 0) {
            s = st.getString ();
        }
        if ((type = Type.value (s)) < 0) throw new IOException ("Invalid type: " + s);

        token = st.get ();
        boolean iseol = token.isEOL ();
        st.unget ();
        if (! iseol) {
            record = Record.fromString (name, type, DClass.NONE, 0, st, zone);
        } else record = Record.newRecord (name, type, DClass.ANY, 0);

    } else record = Record.newRecord (name, Type.ANY, DClass.ANY, 0);

    query.addRecord (record, Section.UPDATE);
    print (record);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/update.java" startline="403" endline="408">
void doGlue (Tokenizer st) throws IOException {
    Record record = parseRR (st, defaultClass, defaultTTL);
    query.addRecord (record, Section.ADDITIONAL);
    print (record);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/update.java" startline="410" endline="439">
void doQuery (Tokenizer st) throws IOException {
    Record rec;
    Tokenizer.Token token;
    Name name = null;
    int type = Type.A;
    int dclass = defaultClass;
    name = st.getName (zone);
    token = st.get ();
    if (token.isString ()) {
        type = Type.value (token.value);
        if (type < 0) throw new IOException ("Invalid type");

        token = st.get ();
        if (token.isString ()) {
            dclass = DClass.value (token.value);
            if (dclass < 0) throw new IOException ("Invalid class");

        }
    }
    rec = Record.newRecord (name, type, dclass);
    Message newQuery = Message.newQuery (rec);
    if (res == null) res = new SimpleResolver (server);

    response = res.send (newQuery);
    print (response);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/update.java" startline="441" endline="456">
void doFile (Tokenizer st, List inputs, List istreams) throws IOException {
    String s = st.getString ();
    InputStream is;
    try {
        if (s.equals ("-")) is = System.in;
        else is = new FileInputStream (s);

        istreams.add (0, is);
        inputs.add (0, new BufferedReader (new InputStreamReader (is)));
    } catch (FileNotFoundException e) {
        print (s + " not found");
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/update.java" startline="458" endline="468">
void doLog (Tokenizer st) throws IOException {
    String s = st.getString ();
    try {
        FileOutputStream fos = new FileOutputStream (s);
        log = new PrintStream (fos);
    } catch (Exception e) {
        print ("Error opening " + s);
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/update.java" startline="470" endline="536">
boolean doAssert (Tokenizer st) throws IOException {
    String field = st.getString ();
    String expected = st.getString ();
    String value = null;
    boolean flag = true;
    int section;
    if (response == null) {
        print ("No response has been received");
        return true;
    }
    if (field.equalsIgnoreCase ("rcode")) {
        int rcode = response.getHeader ().getRcode ();
        if (rcode != Rcode.value (expected)) {
            value = Rcode.string (rcode);
            flag = false;
        }
    } else if (field.equalsIgnoreCase ("serial")) {
        Record [] answers = response.getSectionArray (Section.ANSWER);
        if (answers.length < 1 || ! (answers [0] instanceof SOARecord)) print ("Invalid response (no SOA)");
        else {
            SOARecord soa = (SOARecord) answers [0];
            long serial = soa.getSerial ();
            if (serial != Long.parseLong (expected)) {
                value = Long.toString (serial);
                flag = false;
            }
        }
    } else if (field.equalsIgnoreCase ("tsig")) {
        if (response.isSigned ()) {
            if (response.isVerified ()) value = "ok";
            else value = "failed";

        } else value = "unsigned";

        if (! value.equalsIgnoreCase (expected)) flag = false;

    } else if ((section = Section.value (field)) >= 0) {
        int count = response.getHeader ().getCount (section);
        if (count != Integer.parseInt (expected)) {
            value = new Integer (count).toString ();
            flag = false;
        }
    } else print ("Invalid assertion keyword: " + field);

    if (flag == false) {
        print ("Expected " + field + " " + expected + ", received " + value);
        while (true) {
            Tokenizer.Token token = st.get ();
            if (! token.isString ()) break;

            print (token.value);
        }
        st.unget ();
    }
    return flag;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/update.java" startline="538" endline="673">
static void help (String topic) {
    System.out.println ();
    if (topic == null) {
        System.out.println ("The following are supported commands:\n" + "add      assert   class    clear    date     delete\n" + "echo     edns     file     glue     help     key\n" + "log      port     prohibit query    quit     require\n" + "send     server   show     sleep    tcp      ttl\n" + "zone     #\n");
        return;
    }
    topic = topic.toLowerCase ();
    if (topic.equals ("add")) System.out.println ("add <name> [ttl] [class] <type> <data>\n\n" + "specify a record to be added\n");
    else if (topic.equals ("assert")) System.out.println ("assert <field> <value> [msg]\n\n" + "asserts that the value of the field in the last\n" + "response matches the value specified.  If not,\n" + "the message is printed (if present) and the\n" + "program exits.  The field may be any of <rcode>,\n" + "<serial>, <tsig>, <qu>, <an>, <au>, or <ad>.\n");
    else if (topic.equals ("class")) System.out.println ("class <class>\n\n" + "class of the zone to be updated (default: IN)\n");
    else if (topic.equals ("clear")) System.out.println ("clear\n\n" + "clears the current update packet\n");
    else if (topic.equals ("date")) System.out.println ("date [-ms]\n\n" + "prints the current date and time in human readable\n" + "format or as the number of milliseconds since the\n" + "epoch");
    else if (topic.equals ("delete")) System.out.println ("delete <name> [ttl] [class] <type> <data> \n" + "delete <name> <type> \n" + "delete <name>\n\n" + "specify a record or set to be deleted, or that\n" + "all records at a name should be deleted\n");
    else if (topic.equals ("echo")) System.out.println ("echo <text>\n\n" + "prints the text\n");
    else if (topic.equals ("edns")) System.out.println ("edns <level>\n\n" + "EDNS level specified when sending messages\n");
    else if (topic.equals ("file")) System.out.println ("file <file>\n\n" + "opens the specified file as the new input source\n" + "(- represents stdin)\n");
    else if (topic.equals ("glue")) System.out.println ("glue <name> [ttl] [class] <type> <data>\n\n" + "specify an additional record\n");
    else if (topic.equals ("help")) System.out.println ("help\n" + "help [topic]\n\n" + "prints a list of commands or help about a specific\n" + "command\n");
    else if (topic.equals ("key")) System.out.println ("key <name> <data>\n\n" + "TSIG key used to sign messages\n");
    else if (topic.equals ("log")) System.out.println ("log <file>\n\n" + "opens the specified file and uses it to log output\n");
    else if (topic.equals ("port")) System.out.println ("port <port>\n\n" + "UDP/TCP port messages are sent to (default: 53)\n");
    else if (topic.equals ("prohibit")) System.out.println ("prohibit <name> <type> \n" + "prohibit <name>\n\n" + "require that a set or name is not present\n");
    else if (topic.equals ("query")) System.out.println ("query <name> [type [class]] \n\n" + "issues a query\n");
    else if (topic.equals ("q") || topic.equals ("quit")) System.out.println ("quit\n\n" + "quits the program\n");
    else if (topic.equals ("require")) System.out.println ("require <name> [ttl] [class] <type> <data> \n" + "require <name> <type> \n" + "require <name>\n\n" + "require that a record, set, or name is present\n");
    else if (topic.equals ("send")) System.out.println ("send\n\n" + "sends and resets the current update packet\n");
    else if (topic.equals ("server")) System.out.println ("server <name> [port]\n\n" + "server that receives send updates/queries\n");
    else if (topic.equals ("show")) System.out.println ("show\n\n" + "shows the current update packet\n");
    else if (topic.equals ("sleep")) System.out.println ("sleep <milliseconds>\n\n" + "pause for interval before next command\n");
    else if (topic.equals ("tcp")) System.out.println ("tcp\n\n" + "TCP should be used to send all messages\n");
    else if (topic.equals ("ttl")) System.out.println ("ttl <ttl>\n\n" + "default ttl of added records (default: 0)\n");
    else if (topic.equals ("zone") || topic.equals ("origin")) System.out.println ("zone <zone>\n\n" + "zone to update (default: .\n");
    else if (topic.equals ("#")) System.out.println ("# <text>\n\n" + "a comment\n");
    else System.out.println ("Topic '" + topic + "' unrecognized\n");

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/update.java" startline="675" endline="691">
public static void main (String args []) throws IOException {
    InputStream in = null;
    if (args.length >= 1) {
        try {
            in = new FileInputStream (args [0]);
        } catch (FileNotFoundException e) {
            System.out.println (args [0] + " not found.");
            System.exit (1);
        }
    } else in = System.in;

    update u = new update (in);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/jnamed.java" startline="19" endline="22">
private static String addrport (InetAddress addr, int port) {
    return addr.getHostAddress () + "#" + port;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/jnamed.java" startline="24" endline="108">
public jnamed (String conffile) throws IOException, ZoneTransferException {
    FileInputStream fs;
    InputStreamReader isr;
    BufferedReader br;
    List ports = new ArrayList ();
    List addresses = new ArrayList ();
    try {
        fs = new FileInputStream (conffile);
        isr = new InputStreamReader (fs);
        br = new BufferedReader (isr);
    } catch (Exception e) {
        System.out.println ("Cannot open " + conffile);
        return;
    }
    try {
        caches = new HashMap ();
        znames = new HashMap ();
        TSIGs = new HashMap ();
        String line = null;
        while ((line = br.readLine ()) != null) {
            StringTokenizer st = new StringTokenizer (line);
            if (! st.hasMoreTokens ()) continue;

            String keyword = st.nextToken ();
            if (! st.hasMoreTokens ()) {
                System.out.println ("Invalid line: " + line);
                continue;
            }
            if (keyword.charAt (0) == '#') continue;

            if (keyword.equals ("primary")) addPrimaryZone (st.nextToken (), st.nextToken ());
            else if (keyword.equals ("secondary")) addSecondaryZone (st.nextToken (), st.nextToken ());
            else if (keyword.equals ("cache")) {
                Cache cache = new Cache (st.nextToken ());
                caches.put (new Integer (DClass.IN), cache);
            } else if (keyword.equals ("key")) {
                String s1 = st.nextToken ();
                String s2 = st.nextToken ();
                if (st.hasMoreTokens ()) addTSIG (s1, s2, st.nextToken ());
                else addTSIG ("hmac-md5", s1, s2);

            } else if (keyword.equals ("port")) {
                ports.add (Integer.valueOf (st.nextToken ()));
            } else if (keyword.equals ("address")) {
                String addr = st.nextToken ();
                addresses.add (Address.getByAddress (addr));
            } else {
                System.out.println ("unknown keyword: " + keyword);
            }

        }
        if (ports.size () == 0) ports.add (new Integer (53));

        if (addresses.size () == 0) addresses.add (Address.getByAddress ("0.0.0.0"));

        Iterator iaddr = addresses.iterator ();
        while (iaddr.hasNext ()) {
            InetAddress addr = (InetAddress) iaddr.next ();
            Iterator iport = ports.iterator ();
            while (iport.hasNext ()) {
                int port = ((Integer) iport.next ()).intValue ();
                addUDP (addr, port);
                addTCP (addr, port);
                System.out.println ("jnamed: listening on " + addrport (addr, port));
            }
        }
        System.out.println ("jnamed: running");
    } finally {
        fs.close ();
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/jnamed.java" startline="110" endline="117">
public void addPrimaryZone (String zname, String zonefile) throws IOException {
    Name origin = null;
    if (zname != null) origin = Name.fromString (zname, Name.root);

    Zone newzone = new Zone (origin, zonefile);
    znames.put (newzone.getOrigin (), newzone);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/jnamed.java" startline="119" endline="126">
public void addSecondaryZone (String zone, String remote) throws IOException, ZoneTransferException {
    Name zname = Name.fromString (zone, Name.root);
    Zone newzone = new Zone (zname, DClass.IN, remote);
    znames.put (zname, newzone);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/jnamed.java" startline="128" endline="132">
public void addTSIG (String algstr, String namestr, String key) throws IOException {
    Name name = Name.fromString (namestr, Name.root);
    TSIGs.put (name, new TSIG (algstr, namestr, key));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/jnamed.java" startline="134" endline="142">
public Cache getCache (int dclass) {
    Cache c = (Cache) caches.get (new Integer (dclass));
    if (c == null) {
        c = new Cache (dclass);
        caches.put (new Integer (dclass), c);
    }
    return c;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/jnamed.java" startline="144" endline="158">
public Zone findBestZone (Name name) {
    Zone foundzone = null;
    foundzone = (Zone) znames.get (name);
    if (foundzone != null) return foundzone;

    int labels = name.labels ();
    for (int i = 1;
    i < labels; i ++) {
        Name tname = new Name (name, i);
        foundzone = (Zone) znames.get (tname);
        if (foundzone != null) return foundzone;

    }
    return null;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/jnamed.java" startline="160" endline="177">
public RRset findExactMatch (Name name, int type, int dclass, boolean glue) {
    Zone zone = findBestZone (name);
    if (zone != null) return zone.findExactMatch (name, type);
    else {
        RRset [] rrsets;
        Cache cache = getCache (dclass);
        if (glue) rrsets = cache.findAnyRecords (name, type);
        else rrsets = cache.findRecords (name, type);

        if (rrsets == null) return null;
        else return rrsets [0];

    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/jnamed.java" startline="179" endline="202">
void addRRset (Name name, Message response, RRset rrset, int section, int flags) {
    for (int s = 1;
    s <= section; s ++) if (response.findRRset (name, rrset.getType (), s)) return;

    if ((flags & FLAG_SIGONLY) == 0) {
        Iterator it = rrset.rrs ();
        while (it.hasNext ()) {
            Record r = (Record) it.next ();
            if (r.getName ().isWild () && ! name.isWild ()) r = r.withName (name);

            response.addRecord (r, section);
        }
    }
    if ((flags & (FLAG_SIGONLY | FLAG_DNSSECOK)) != 0) {
        Iterator it = rrset.sigs ();
        while (it.hasNext ()) {
            Record r = (Record) it.next ();
            if (r.getName ().isWild () && ! name.isWild ()) r = r.withName (name);

            response.addRecord (r, section);
        }
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/jnamed.java" startline="204" endline="207">
private final void addSOA (Message response, Zone zone) {
    response.addRecord (zone.getSOA (), Section.AUTHORITY);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/jnamed.java" startline="209" endline="214">
private final void addNS (Message response, Zone zone, int flags) {
    RRset nsRecords = zone.getNS ();
    addRRset (nsRecords.getName (), response, nsRecords, Section.AUTHORITY, flags);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/jnamed.java" startline="216" endline="227">
private final void addCacheNS (Message response, Cache cache, Name name) {
    SetResponse sr = cache.lookupRecords (name, Type.NS, Credibility.HINT);
    if (! sr.isDelegation ()) return;

    RRset nsRecords = sr.getNS ();
    Iterator it = nsRecords.rrs ();
    while (it.hasNext ()) {
        Record r = (Record) it.next ();
        response.addRecord (r, Section.AUTHORITY);
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/jnamed.java" startline="229" endline="235">
private void addGlue (Message response, Name name, int flags) {
    RRset a = findExactMatch (name, Type.A, DClass.IN, true);
    if (a == null) return;

    addRRset (name, response, a, Section.ADDITIONAL, flags);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/jnamed.java" startline="237" endline="246">
private void addAdditional2 (Message response, int section, int flags) {
    Record [] records = response.getSectionArray (section);
    for (int i = 0;
    i < records.length; i ++) {
        Record r = records [i];
        Name glueName = r.getAdditionalName ();
        if (glueName != null) addGlue (response, glueName, flags);

    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/jnamed.java" startline="248" endline="252">
private final void addAdditional (Message response, int flags) {
    addAdditional2 (response, Section.ANSWER, flags);
    addAdditional2 (response, Section.AUTHORITY, flags);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/jnamed.java" startline="254" endline="342">
byte addAnswer (Message response, Name name, int type, int dclass, int iterations, int flags) {
    SetResponse sr;
    byte rcode = Rcode.NOERROR;
    if (iterations > 6) return Rcode.NOERROR;

    if (type == Type.SIG || type == Type.RRSIG) {
        type = Type.ANY;
        flags |= FLAG_SIGONLY;
    }
    Zone zone = findBestZone (name);
    if (zone != null) sr = zone.findRecords (name, type);
    else {
        Cache cache = getCache (dclass);
        sr = cache.lookupRecords (name, type, Credibility.NORMAL);
    }
    if (sr.isUnknown ()) {
        addCacheNS (response, getCache (dclass), name);
    }
    if (sr.isNXDOMAIN ()) {
        response.getHeader ().setRcode (Rcode.NXDOMAIN);
        if (zone != null) {
            addSOA (response, zone);
            if (iterations == 0) response.getHeader ().setFlag (Flags.AA);

        }
        rcode = Rcode.NXDOMAIN;
    } else if (sr.isNXRRSET ()) {
        if (zone != null) {
            addSOA (response, zone);
            if (iterations == 0) response.getHeader ().setFlag (Flags.AA);

        }
    } else if (sr.isDelegation ()) {
        RRset nsRecords = sr.getNS ();
        addRRset (nsRecords.getName (), response, nsRecords, Section.AUTHORITY, flags);
    } else if (sr.isCNAME ()) {
        CNAMERecord cname = sr.getCNAME ();
        RRset rrset = new RRset (cname);
        addRRset (name, response, rrset, Section.ANSWER, flags);
        if (zone != null && iterations == 0) response.getHeader ().setFlag (Flags.AA);

        rcode = addAnswer (response, cname.getTarget (), type, dclass, iterations + 1, flags);
    } else if (sr.isDNAME ()) {
        DNAMERecord dname = sr.getDNAME ();
        RRset rrset = new RRset (dname);
        addRRset (name, response, rrset, Section.ANSWER, flags);
        Name newname;
        try {
            newname = name.fromDNAME (dname);
        } catch (NameTooLongException e) {
            return Rcode.YXDOMAIN;
        }
        rrset = new RRset (new CNAMERecord (name, dclass, 0, newname));
        addRRset (name, response, rrset, Section.ANSWER, flags);
        if (zone != null && iterations == 0) response.getHeader ().setFlag (Flags.AA);

        rcode = addAnswer (response, newname, type, dclass, iterations + 1, flags);
    } else if (sr.isSuccessful ()) {
        RRset [] rrsets = sr.answers ();
        for (int i = 0;
        i < rrsets.length; i ++) addRRset (name, response, rrsets [i], Section.ANSWER, flags);

        if (zone != null) {
            addNS (response, zone, flags);
            if (iterations == 0) response.getHeader ().setFlag (Flags.AA);

        } else addCacheNS (response, getCache (dclass), name);

    }

    return rcode;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/jnamed.java" startline="344" endline="382">
byte [] doAXFR (Name name, Message query, TSIG tsig, TSIGRecord qtsig, Socket s) {
    Zone zone = (Zone) znames.get (name);
    boolean first = true;
    if (zone == null) return errorMessage (query, Rcode.REFUSED);

    Iterator it = zone.AXFR ();
    try {
        DataOutputStream dataOut;
        dataOut = new DataOutputStream (s.getOutputStream ());
        int id = query.getHeader ().getID ();
        while (it.hasNext ()) {
            RRset rrset = (RRset) it.next ();
            Message response = new Message (id);
            Header header = response.getHeader ();
            header.setFlag (Flags.QR);
            header.setFlag (Flags.AA);
            addRRset (rrset.getName (), response, rrset, Section.ANSWER, FLAG_DNSSECOK);
            if (tsig != null) {
                tsig.applyStream (response, qtsig, first);
                qtsig = response.getTSIG ();
            }
            first = false;
            byte [] out = response.toWire ();
            dataOut.writeShort (out.length);
            dataOut.write (out);
        }
    } catch (IOException ex) {
        System.out.println ("AXFR failed");
    }
    try {
        s.close ();
    } catch (IOException ex) {
    }
    return null;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/jnamed.java" startline="389" endline="460">
byte [] generateReply (Message query, byte [] in, int length, Socket s) throws IOException {
    Header header;
    boolean badversion;
    int maxLength;
    int flags = 0;
    header = query.getHeader ();
    if (header.getFlag (Flags.QR)) return null;

    if (header.getRcode () != Rcode.NOERROR) return errorMessage (query, Rcode.FORMERR);

    if (header.getOpcode () != Opcode.QUERY) return errorMessage (query, Rcode.NOTIMP);

    Record queryRecord = query.getQuestion ();
    TSIGRecord queryTSIG = query.getTSIG ();
    TSIG tsig = null;
    if (queryTSIG != null) {
        tsig = (TSIG) TSIGs.get (queryTSIG.getName ());
        if (tsig == null || tsig.verify (query, in, length, null) != Rcode.NOERROR) return formerrMessage (in);

    }
    OPTRecord queryOPT = query.getOPT ();
    if (queryOPT != null && queryOPT.getVersion () > 0) badversion = true;

    if (s != null) maxLength = 65535;
    else if (queryOPT != null) maxLength = Math.max (queryOPT.getPayloadSize (), 512);
    else maxLength = 512;

    if (queryOPT != null && (queryOPT.getFlags () & ExtendedFlags.DO) != 0) flags = FLAG_DNSSECOK;

    Message response = new Message (query.getHeader ().getID ());
    response.getHeader ().setFlag (Flags.QR);
    if (query.getHeader ().getFlag (Flags.RD)) response.getHeader ().setFlag (Flags.RD);

    response.addRecord (queryRecord, Section.QUESTION);
    Name name = queryRecord.getName ();
    int type = queryRecord.getType ();
    int dclass = queryRecord.getDClass ();
    if (type == Type.AXFR && s != null) return doAXFR (name, query, tsig, queryTSIG, s);

    if (! Type.isRR (type) && type != Type.ANY) return errorMessage (query, Rcode.NOTIMP);

    byte rcode = addAnswer (response, name, type, dclass, 0, flags);
    if (rcode != Rcode.NOERROR && rcode != Rcode.NXDOMAIN) return errorMessage (query, rcode);

    addAdditional (response, flags);
    if (queryOPT != null) {
        int optflags = (flags == FLAG_DNSSECOK) ? ExtendedFlags.DO : 0;
        OPTRecord opt = new OPTRecord ((short) 4096, rcode, (byte) 0, optflags);
        response.addRecord (opt, Section.ADDITIONAL);
    }
    response.setTSIG (tsig, Rcode.NOERROR, queryTSIG);
    return response.toWire (maxLength);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/jnamed.java" startline="462" endline="472">
byte [] buildErrorMessage (Header header, int rcode, Record question) {
    Message response = new Message ();
    response.setHeader (header);
    for (int i = 0;
    i < 4; i ++) response.removeAllRecords (i);

    if (rcode == Rcode.SERVFAIL) response.addRecord (question, Section.QUESTION);

    header.setRcode (rcode);
    return response.toWire ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/jnamed.java" startline="474" endline="484">
public byte [] formerrMessage (byte [] in) {
    Header header;
    try {
        header = new Header (in);
    } catch (IOException e) {
        return null;
    }
    return buildErrorMessage (header, Rcode.FORMERR, null);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/jnamed.java" startline="486" endline="490">
public byte [] errorMessage (Message query, int rcode) {
    return buildErrorMessage (query.getHeader (), rcode, query.getQuestion ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/jnamed.java" startline="492" endline="533">
public void TCPclient (Socket s) {
    try {
        int inLength;
        DataInputStream dataIn;
        DataOutputStream dataOut;
        byte [] in;
        InputStream is = s.getInputStream ();
        dataIn = new DataInputStream (is);
        inLength = dataIn.readUnsignedShort ();
        in = new byte [inLength];
        dataIn.readFully (in);
        Message query;
        byte [] response = null;
        try {
            query = new Message (in);
            response = generateReply (query, in, in.length, s);
            if (response == null) return;

        } catch (IOException e) {
            response = formerrMessage (in);
        }
        dataOut = new DataOutputStream (s.getOutputStream ());
        dataOut.writeShort (response.length);
        dataOut.write (response);
    } catch (IOException e) {
        System.out.println ("TCPclient(" + addrport (s.getLocalAddress (), s.getLocalPort ()) + "): " + e);
    } finally {
        try {
            s.close ();
        } catch (IOException e) {
        }
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/jnamed.java" startline="535" endline="551">
public void serveTCP (InetAddress addr, int port) {
    try {
        ServerSocket sock = new ServerSocket (port, 128, addr);
        while (true) {
            final Socket s = sock.accept ();
            Thread t;
            t = new Thread (new Runnable () {
                public void run () {
                    TCPclient (s);
                }}

            );
            t.start ();
        }
    } catch (IOException e) {
        System.out.println ("serveTCP(" + addrport (addr, port) + "): " + e);
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/jnamed.java" startline="543" endline="543">
public void run () {
    TCPclient (s);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/jnamed.java" startline="553" endline="600">
public void serveUDP (InetAddress addr, int port) {
    try {
        DatagramSocket sock = new DatagramSocket (port, addr);
        final short udpLength = 512;
        byte [] in = new byte [udpLength];
        DatagramPacket indp = new DatagramPacket (in, in.length);
        DatagramPacket outdp = null;
        while (true) {
            indp.setLength (in.length);
            try {
                sock.receive (indp);
            } catch (InterruptedIOException e) {
                continue;
            }
            Message query;
            byte [] response = null;
            try {
                query = new Message (in);
                response = generateReply (query, in, indp.getLength (), null);
                if (response == null) continue;

            } catch (IOException e) {
                response = formerrMessage (in);
            }
            if (outdp == null) outdp = new DatagramPacket (response, response.length, indp.getAddress (), indp.getPort ());
            else {
                outdp.setData (response);
                outdp.setLength (response.length);
                outdp.setAddress (indp.getAddress ());
                outdp.setPort (indp.getPort ());
            }
            sock.send (outdp);
        }
    } catch (IOException e) {
        System.out.println ("serveUDP(" + addrport (addr, port) + "): " + e);
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/jnamed.java" startline="602" endline="608">
public void addTCP (final InetAddress addr, final int port) {
    Thread t;
    t = new Thread (new Runnable () {
        public void run () {
            serveTCP (addr, port);
        }}

    );
    t.start ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/jnamed.java" startline="606" endline="606">
public void run () {
    serveTCP (addr, port);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/jnamed.java" startline="610" endline="616">
public void addUDP (final InetAddress addr, final int port) {
    Thread t;
    t = new Thread (new Runnable () {
        public void run () {
            serveUDP (addr, port);
        }}

    );
    t.start ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/jnamed.java" startline="614" endline="614">
public void run () {
    serveUDP (addr, port);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/jnamed.java" startline="618" endline="638">
public static void main (String [] args) {
    if (args.length > 1) {
        System.out.println ("usage: jnamed [conf]");
        System.exit (0);
    }
    jnamed s;
    try {
        String conf;
        if (args.length == 1) conf = args [0];
        else conf = "jnamed.conf";

        s = new jnamed (conf);
    } catch (IOException e) {
        System.out.println (e);
    } catch (ZoneTransferException e) {
        System.out.println (e);
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/A6RecordTest.java" startline="52" endline="64">
protected void setUp () throws TextParseException, UnknownHostException {
    m_an = Name.fromString ("My.Absolute.Name.");
    m_an2 = Name.fromString ("My.Second.Absolute.Name.");
    m_rn = Name.fromString ("My.Relative.Name");
    m_addr_string = "2001:0db8:85a3:08d3:1319:8a2e:0370:7334";
    m_addr_string_canonical = "2001:db8:85a3:8d3:1319:8a2e:370:7334";
    m_addr = InetAddress.getByName (m_addr_string);
    m_addr_bytes = m_addr.getAddress ();
    m_ttl = 0x13579;
    m_prefix_bits = 9;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/A6RecordTest.java" startline="66" endline="73">
public void test_ctor_0arg () {
    A6Record ar = new A6Record ();
    assertNull (ar.getName ());
    assertEquals (0, ar.getType ());
    assertEquals (0, ar.getDClass ());
    assertEquals (0, ar.getTTL ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/A6RecordTest.java" startline="75" endline="80">
public void test_getObject () {
    A6Record ar = new A6Record ();
    Record r = ar.getObject ();
    assertTrue (r instanceof A6Record);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/A6RecordTest.java" startline="82" endline="132">
public void test_ctor_6arg () {
    A6Record ar = new A6Record (m_an, DClass.IN, m_ttl, m_prefix_bits, m_addr, null);
    assertEquals (m_an, ar.getName ());
    assertEquals (Type.A6, ar.getType ());
    assertEquals (DClass.IN, ar.getDClass ());
    assertEquals (m_ttl, ar.getTTL ());
    assertEquals (m_prefix_bits, ar.getPrefixBits ());
    assertEquals (m_addr, ar.getSuffix ());
    assertNull (ar.getPrefix ());
    ar = new A6Record (m_an, DClass.IN, m_ttl, m_prefix_bits, m_addr, m_an2);
    assertEquals (m_an, ar.getName ());
    assertEquals (Type.A6, ar.getType ());
    assertEquals (DClass.IN, ar.getDClass ());
    assertEquals (m_ttl, ar.getTTL ());
    assertEquals (m_prefix_bits, ar.getPrefixBits ());
    assertEquals (m_addr, ar.getSuffix ());
    assertEquals (m_an2, ar.getPrefix ());
    try {
        new A6Record (m_rn, DClass.IN, m_ttl, m_prefix_bits, m_addr, null);
        fail ("RelativeNameException not thrown");
    } catch (RelativeNameException e) {
    }
    try {
        new A6Record (m_an, DClass.IN, m_ttl, m_prefix_bits, m_addr, m_rn);
        fail ("RelativeNameException not thrown");
    } catch (RelativeNameException e) {
    }
    try {
        new A6Record (m_rn, DClass.IN, m_ttl, 0x100, m_addr, null);
        fail ("IllegalArgumentException not thrown");
    } catch (RelativeNameException e) {
    }
    try {
        new A6Record (m_an, DClass.IN, m_ttl, m_prefix_bits, InetAddress.getByName ("192.168.0.1"), null);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    } catch (UnknownHostException e) {
        fail (e.getMessage ());
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/A6RecordTest.java" startline="134" endline="166">
public void test_rrFromWire () throws CloneNotSupportedException, IOException, UnknownHostException {
    DNSOutput dout = new DNSOutput ();
    dout.writeU8 (0);
    dout.writeByteArray (m_addr_bytes);
    DNSInput din = new DNSInput (dout.toByteArray ());
    A6Record ar = new A6Record ();
    ar.rrFromWire (din);
    assertEquals (0, ar.getPrefixBits ());
    assertEquals (m_addr, ar.getSuffix ());
    assertNull (ar.getPrefix ());
    dout = new DNSOutput ();
    dout.writeU8 (9);
    dout.writeByteArray (m_addr_bytes, 1, 15);
    dout.writeByteArray (m_an2.toWire ());
    din = new DNSInput (dout.toByteArray ());
    ar = new A6Record ();
    ar.rrFromWire (din);
    assertEquals (9, ar.getPrefixBits ());
    byte [] addr_bytes = (byte []) m_addr_bytes.clone ();
    addr_bytes [0] = 0;
    InetAddress exp = InetAddress.getByAddress (addr_bytes);
    assertEquals (exp, ar.getSuffix ());
    assertEquals (m_an2, ar.getPrefix ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/A6RecordTest.java" startline="168" endline="207">
public void test_rdataFromString () throws CloneNotSupportedException, IOException, UnknownHostException {
    Tokenizer t = new Tokenizer ("0 " + m_addr_string);
    A6Record ar = new A6Record ();
    ar.rdataFromString (t, null);
    assertEquals (0, ar.getPrefixBits ());
    assertEquals (m_addr, ar.getSuffix ());
    assertNull (ar.getPrefix ());
    t = new Tokenizer ("9 " + m_addr_string + " " + m_an2);
    ar = new A6Record ();
    ar.rdataFromString (t, null);
    assertEquals (9, ar.getPrefixBits ());
    assertEquals (m_addr, ar.getSuffix ());
    assertEquals (m_an2, ar.getPrefix ());
    t = new Tokenizer ("129");
    ar = new A6Record ();
    try {
        ar.rdataFromString (t, null);
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
    t = new Tokenizer ("0 " + m_addr_string.substring (4));
    ar = new A6Record ();
    try {
        ar.rdataFromString (t, null);
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/A6RecordTest.java" startline="209" endline="215">
public void test_rrToString () {
    A6Record ar = new A6Record (m_an, DClass.IN, m_ttl, m_prefix_bits, m_addr, m_an2);
    String exp = "" + m_prefix_bits + " " + m_addr_string_canonical + " " + m_an2;
    String out = ar.rrToString ();
    assertEquals (exp, out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/A6RecordTest.java" startline="217" endline="244">
public void test_rrToWire () {
    A6Record ar = new A6Record (m_an, DClass.IN, m_ttl, m_prefix_bits, m_addr, m_an2);
    DNSOutput dout = new DNSOutput ();
    dout.writeU8 (m_prefix_bits);
    dout.writeByteArray (m_addr_bytes, 1, 15);
    dout.writeByteArray (m_an2.toWireCanonical ());
    byte [] exp = dout.toByteArray ();
    dout = new DNSOutput ();
    ar.rrToWire (dout, null, true);
    assertTrue (Arrays.equals (exp, dout.toByteArray ()));
    dout = new DNSOutput ();
    dout.writeU8 (m_prefix_bits);
    dout.writeByteArray (m_addr_bytes, 1, 15);
    dout.writeByteArray (m_an2.toWire ());
    exp = dout.toByteArray ();
    dout = new DNSOutput ();
    ar.rrToWire (dout, null, false);
    assertTrue (Arrays.equals (exp, dout.toByteArray ()));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RTRecordTest.java" startline="42" endline="47">
public void test_getObject () {
    RTRecord d = new RTRecord ();
    Record r = d.getObject ();
    assertTrue (r instanceof RTRecord);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RTRecordTest.java" startline="49" endline="61">
public void test_ctor_5arg () throws TextParseException {
    Name n = Name.fromString ("My.Name.");
    Name m = Name.fromString ("My.OtherName.");
    RTRecord d = new RTRecord (n, DClass.IN, 0xABCDEL, 0xF1, m);
    assertEquals (n, d.getName ());
    assertEquals (Type.RT, d.getType ());
    assertEquals (DClass.IN, d.getDClass ());
    assertEquals (0xABCDEL, d.getTTL ());
    assertEquals (0xF1, d.getPreference ());
    assertEquals (m, d.getIntermediateHost ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RecordTest.java" startline="48" endline="48">
public SubRecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RecordTest.java" startline="50" endline="53">
public SubRecord (Name name, int type, int dclass, long ttl) {
    super (name, type, dclass, ttl);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RecordTest.java" startline="55" endline="58">
public Record getObject () {
    return null;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RecordTest.java" startline="60" endline="60">
public void rrFromWire (DNSInput in) throws IOException {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RecordTest.java" startline="62" endline="65">
public String rrToString () {
    return "{SubRecord: rrToString}";
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RecordTest.java" startline="67" endline="67">
public void rdataFromString (Tokenizer t, Name origin) throws IOException {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RecordTest.java" startline="69" endline="69">
public void rrToWire (DNSOutput out, Compression c, boolean canonical) {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RecordTest.java" startline="72" endline="75">
public static byte [] byteArrayFromString (String in) throws TextParseException {
    return Record.byteArrayFromString (in);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RecordTest.java" startline="78" endline="81">
public static String byteArrayToString (byte [] in, boolean quote) {
    return Record.byteArrayToString (in, quote);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RecordTest.java" startline="84" endline="87">
public static String unknownToString (byte [] in) {
    return Record.unknownToString (in);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RecordTest.java" startline="89" endline="92">
public Object clone () throws CloneNotSupportedException {
    throw new CloneNotSupportedException ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RecordTest.java" startline="95" endline="102">
public void test_ctor_0arg () {
    SubRecord sr = new SubRecord ();
    assertNull (sr.getName ());
    assertEquals (0, sr.getType ());
    assertEquals (0, sr.getTTL ());
    assertEquals (0, sr.getDClass ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RecordTest.java" startline="104" endline="116">
public void test_ctor_4arg () throws TextParseException {
    Name n = Name.fromString ("my.name.");
    int t = Type.A;
    int d = DClass.IN;
    long ttl = 0xABCDEL;
    SubRecord r = new SubRecord (n, t, d, ttl);
    assertEquals (n, r.getName ());
    assertEquals (t, r.getType ());
    assertEquals (d, r.getDClass ());
    assertEquals (ttl, r.getTTL ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RecordTest.java" startline="118" endline="149">
public void test_ctor_4arg_invalid () throws TextParseException {
    Name n = Name.fromString ("my.name.");
    Name r = Name.fromString ("my.relative.name");
    int t = Type.A;
    int d = DClass.IN;
    long ttl = 0xABCDEL;
    try {
        new SubRecord (r, t, d, ttl);
        fail ("RelativeNameException not thrown");
    } catch (RelativeNameException e) {
    }
    try {
        new SubRecord (n, - 1, d, ttl);
        fail ("InvalidTypeException not thrown");
    } catch (InvalidTypeException e) {
    }
    try {
        new SubRecord (n, t, - 1, ttl);
        fail ("InvalidDClassException not thrown");
    } catch (InvalidDClassException e) {
    }
    try {
        new SubRecord (n, t, d, - 1);
        fail ("InvalidTTLException not thrown");
    } catch (InvalidTTLException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RecordTest.java" startline="151" endline="170">
public void test_newRecord_3arg () throws TextParseException {
    Name n = Name.fromString ("my.name.");
    Name r = Name.fromString ("my.relative.name");
    int t = Type.A;
    int d = DClass.IN;
    Record rec = Record.newRecord (n, t, d);
    assertTrue (rec instanceof EmptyRecord);
    assertEquals (n, rec.getName ());
    assertEquals (t, rec.getType ());
    assertEquals (d, rec.getDClass ());
    assertEquals (0, rec.getTTL ());
    try {
        Record.newRecord (r, t, d);
        fail ("RelativeNameException not thrown");
    } catch (RelativeNameException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RecordTest.java" startline="172" endline="192">
public void test_newRecord_4arg () throws TextParseException {
    Name n = Name.fromString ("my.name.");
    Name r = Name.fromString ("my.relative.name");
    int t = Type.A;
    int d = DClass.IN;
    int ttl = 0xDBE8;
    Record rec = Record.newRecord (n, t, d, ttl);
    assertTrue (rec instanceof EmptyRecord);
    assertEquals (n, rec.getName ());
    assertEquals (t, rec.getType ());
    assertEquals (d, rec.getDClass ());
    assertEquals (ttl, rec.getTTL ());
    try {
        Record.newRecord (r, t, d, ttl);
        fail ("RelativeNameException not thrown");
    } catch (RelativeNameException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RecordTest.java" startline="194" endline="211">
public void test_newRecord_5arg () throws TextParseException, UnknownHostException {
    Name n = Name.fromString ("my.name.");
    int t = Type.A;
    int d = DClass.IN;
    int ttl = 0xDBE8;
    byte [] data = new byte [] {(byte) 123, (byte) 232, (byte) 0, (byte) 255};
    InetAddress exp = InetAddress.getByName ("123.232.0.255");
    Record rec = Record.newRecord (n, t, d, ttl, data);
    assertTrue (rec instanceof ARecord);
    assertEquals (n, rec.getName ());
    assertEquals (t, rec.getType ());
    assertEquals (d, rec.getDClass ());
    assertEquals (ttl, rec.getTTL ());
    assertEquals (exp, ((ARecord) rec).getAddress ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RecordTest.java" startline="213" endline="245">
public void test_newRecord_6arg () throws TextParseException, UnknownHostException {
    Name n = Name.fromString ("my.name.");
    int t = Type.A;
    int d = DClass.IN;
    int ttl = 0xDBE8;
    byte [] data = new byte [] {(byte) 123, (byte) 232, (byte) 0, (byte) 255};
    InetAddress exp = InetAddress.getByName ("123.232.0.255");
    Record rec = Record.newRecord (n, t, d, ttl, 0, null);
    assertTrue (rec instanceof EmptyRecord);
    assertEquals (n, rec.getName ());
    assertEquals (t, rec.getType ());
    assertEquals (d, rec.getDClass ());
    assertEquals (ttl, rec.getTTL ());
    rec = Record.newRecord (n, t, d, ttl, data.length, data);
    assertTrue (rec instanceof ARecord);
    assertEquals (n, rec.getName ());
    assertEquals (t, rec.getType ());
    assertEquals (d, rec.getDClass ());
    assertEquals (ttl, rec.getTTL ());
    assertEquals (exp, ((ARecord) rec).getAddress ());
    rec = Record.newRecord (n, Type.NIMLOC, d, ttl, data.length, data);
    assertTrue (rec instanceof UNKRecord);
    assertEquals (n, rec.getName ());
    assertEquals (Type.NIMLOC, rec.getType ());
    assertEquals (d, rec.getDClass ());
    assertEquals (ttl, rec.getTTL ());
    assertTrue (Arrays.equals (data, ((UNKRecord) rec).getData ()));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RecordTest.java" startline="247" endline="266">
public void test_newRecord_6arg_invalid () throws TextParseException {
    Name n = Name.fromString ("my.name.");
    Name r = Name.fromString ("my.relative.name");
    int t = Type.A;
    int d = DClass.IN;
    int ttl = 0xDBE8;
    byte [] data = new byte [] {(byte) 123, (byte) 232, (byte) 0, (byte) 255};
    assertNull (Record.newRecord (n, t, d, ttl, 0, new byte [0]));
    assertNull (Record.newRecord (n, t, d, ttl, 1, new byte [0]));
    assertNull (Record.newRecord (n, t, d, ttl, data.length + 1, data));
    assertNull (Record.newRecord (n, t, d, ttl, 5, new byte [] {data [0], data [1], data [2], data [3], 0}));
    try {
        Record.newRecord (r, t, d, ttl, 0, null);
        fail ("RelativeNameException not thrown");
    } catch (RelativeNameException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RecordTest.java" startline="268" endline="337">
public void test_fromWire () throws IOException, TextParseException, UnknownHostException {
    Name n = Name.fromString ("my.name.");
    int t = Type.A;
    int d = DClass.IN;
    int ttl = 0xDBE8;
    byte [] data = new byte [] {(byte) 123, (byte) 232, (byte) 0, (byte) 255};
    InetAddress exp = InetAddress.getByName ("123.232.0.255");
    DNSOutput out = new DNSOutput ();
    n.toWire (out, null);
    out.writeU16 (t);
    out.writeU16 (d);
    out.writeU32 (ttl);
    out.writeU16 (data.length);
    out.writeByteArray (data);
    DNSInput in = new DNSInput (out.toByteArray ());
    Record rec = Record.fromWire (in, Section.ANSWER, false);
    assertTrue (rec instanceof ARecord);
    assertEquals (n, rec.getName ());
    assertEquals (t, rec.getType ());
    assertEquals (d, rec.getDClass ());
    assertEquals (ttl, rec.getTTL ());
    assertEquals (exp, ((ARecord) rec).getAddress ());
    in = new DNSInput (out.toByteArray ());
    rec = Record.fromWire (in, Section.QUESTION, false);
    assertTrue (rec instanceof EmptyRecord);
    assertEquals (n, rec.getName ());
    assertEquals (t, rec.getType ());
    assertEquals (d, rec.getDClass ());
    assertEquals (0, rec.getTTL ());
    in = new DNSInput (out.toByteArray ());
    rec = Record.fromWire (in, Section.QUESTION);
    assertTrue (rec instanceof EmptyRecord);
    assertEquals (n, rec.getName ());
    assertEquals (t, rec.getType ());
    assertEquals (d, rec.getDClass ());
    assertEquals (0, rec.getTTL ());
    rec = Record.fromWire (out.toByteArray (), Section.QUESTION);
    assertTrue (rec instanceof EmptyRecord);
    assertEquals (n, rec.getName ());
    assertEquals (t, rec.getType ());
    assertEquals (d, rec.getDClass ());
    assertEquals (0, rec.getTTL ());
    out = new DNSOutput ();
    n.toWire (out, null);
    out.writeU16 (t);
    out.writeU16 (d);
    out.writeU32 (ttl);
    out.writeU16 (0);
    in = new DNSInput (out.toByteArray ());
    rec = Record.fromWire (in, Section.ANSWER, true);
    assertTrue (rec instanceof EmptyRecord);
    assertEquals (n, rec.getName ());
    assertEquals (t, rec.getType ());
    assertEquals (d, rec.getDClass ());
    assertEquals (ttl, rec.getTTL ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RecordTest.java" startline="339" endline="388">
public void test_toWire () throws IOException, TextParseException, UnknownHostException {
    Name n = Name.fromString ("my.name.");
    int t = Type.A;
    int d = DClass.IN;
    int ttl = 0xDBE8;
    byte [] data = new byte [] {(byte) 123, (byte) 232, (byte) 0, (byte) 255};
    DNSOutput out = new DNSOutput ();
    n.toWire (out, null);
    out.writeU16 (t);
    out.writeU16 (d);
    out.writeU32 (ttl);
    out.writeU16 (data.length);
    out.writeByteArray (data);
    byte [] exp = out.toByteArray ();
    Record rec = Record.newRecord (n, t, d, ttl, data.length, data);
    out = new DNSOutput ();
    rec.toWire (out, Section.ANSWER, null);
    byte [] after = out.toByteArray ();
    assertTrue (Arrays.equals (exp, after));
    after = rec.toWire (Section.ANSWER);
    assertTrue (Arrays.equals (exp, after));
    out = new DNSOutput ();
    n.toWire (out, null);
    out.writeU16 (t);
    out.writeU16 (d);
    exp = out.toByteArray ();
    out = new DNSOutput ();
    rec.toWire (out, Section.QUESTION, null);
    after = out.toByteArray ();
    assertTrue (Arrays.equals (exp, after));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RecordTest.java" startline="390" endline="415">
public void test_toWireCanonical () throws IOException, TextParseException, UnknownHostException {
    Name n = Name.fromString ("My.Name.");
    int t = Type.A;
    int d = DClass.IN;
    int ttl = 0xDBE8;
    byte [] data = new byte [] {(byte) 123, (byte) 232, (byte) 0, (byte) 255};
    DNSOutput out = new DNSOutput ();
    n.toWireCanonical (out);
    out.writeU16 (t);
    out.writeU16 (d);
    out.writeU32 (ttl);
    out.writeU16 (data.length);
    out.writeByteArray (data);
    byte [] exp = out.toByteArray ();
    Record rec = Record.newRecord (n, t, d, ttl, data.length, data);
    byte [] after = rec.toWireCanonical ();
    assertTrue (Arrays.equals (exp, after));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RecordTest.java" startline="417" endline="441">
public void test_rdataToWireCanonical () throws IOException, TextParseException, UnknownHostException {
    Name n = Name.fromString ("My.Name.");
    Name n2 = Name.fromString ("My.Second.Name.");
    int t = Type.NS;
    int d = DClass.IN;
    int ttl = 0xABE99;
    DNSOutput out = new DNSOutput ();
    n2.toWire (out, null);
    byte [] data = out.toByteArray ();
    out = new DNSOutput ();
    n2.toWireCanonical (out);
    byte [] exp = out.toByteArray ();
    Record rec = Record.newRecord (n, t, d, ttl, data.length, data);
    assertTrue (rec instanceof NSRecord);
    byte [] after = rec.rdataToWireCanonical ();
    assertTrue (Arrays.equals (exp, after));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RecordTest.java" startline="443" endline="460">
public void test_rdataToString () throws IOException, TextParseException, UnknownHostException {
    Name n = Name.fromString ("My.Name.");
    Name n2 = Name.fromString ("My.Second.Name.");
    int t = Type.NS;
    int d = DClass.IN;
    int ttl = 0xABE99;
    DNSOutput out = new DNSOutput ();
    n2.toWire (out, null);
    byte [] data = out.toByteArray ();
    Record rec = Record.newRecord (n, t, d, ttl, data.length, data);
    assertTrue (rec instanceof NSRecord);
    assertEquals (rec.rrToString (), rec.rdataToString ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RecordTest.java" startline="462" endline="498">
public void test_toString () throws TextParseException {
    Name n = Name.fromString ("My.N.");
    Name n2 = Name.fromString ("My.Second.Name.");
    int t = Type.NS;
    int d = DClass.IN;
    int ttl = 0xABE99;
    DNSOutput o = new DNSOutput ();
    n2.toWire (o, null);
    byte [] data = o.toByteArray ();
    Record rec = Record.newRecord (n, t, d, ttl, data.length, data);
    String out = rec.toString ();
    assertFalse (out.indexOf (n.toString ()) == - 1);
    assertFalse (out.indexOf (n2.toString ()) == - 1);
    assertFalse (out.indexOf ("NS") == - 1);
    assertFalse (out.indexOf ("IN") == - 1);
    assertFalse (out.indexOf (ttl + "") == - 1);
    Options.set ("BINDTTL");
    out = rec.toString ();
    assertFalse (out.indexOf (n.toString ()) == - 1);
    assertFalse (out.indexOf (n2.toString ()) == - 1);
    assertFalse (out.indexOf ("NS") == - 1);
    assertFalse (out.indexOf ("IN") == - 1);
    assertFalse (out.indexOf (TTL.format (ttl)) == - 1);
    Options.set ("noPrintIN");
    out = rec.toString ();
    assertFalse (out.indexOf (n.toString ()) == - 1);
    assertFalse (out.indexOf (n2.toString ()) == - 1);
    assertFalse (out.indexOf ("NS") == - 1);
    assertTrue (out.indexOf ("IN") == - 1);
    assertFalse (out.indexOf (TTL.format (ttl)) == - 1);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RecordTest.java" startline="500" endline="510">
public void test_byteArrayFromString () throws TextParseException {
    String in = "the 98 \" \' quick 0xAB brown";
    byte [] out = SubRecord.byteArrayFromString (in);
    assertTrue (Arrays.equals (in.getBytes (), out));
    in = " \\031Aa\\;\\\"\\\\~\\127\\255";
    byte [] exp = new byte [] {' ', 0x1F, 'A', 'a', ';', '"', '\\', 0x7E, 0x7F, (byte) 0xFF};
    out = SubRecord.byteArrayFromString (in);
    assertTrue (Arrays.equals (exp, out));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RecordTest.java" startline="512" endline="547">
public void test_byteArrayFromString_invalid () {
    StringBuffer b = new StringBuffer ();
    for (int i = 0;
    i < 257; ++ i) {
        b.append ('A');
    }
    try {
        SubRecord.byteArrayFromString (b.toString ());
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
    try {
        SubRecord.byteArrayFromString ("\\256");
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
    try {
        SubRecord.byteArrayFromString ("\\25a");
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
    try {
        SubRecord.byteArrayFromString ("\\25");
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
    b.append ("\\233");
    try {
        SubRecord.byteArrayFromString (b.toString ());
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RecordTest.java" startline="549" endline="554">
public void test_byteArrayToString () {
    byte [] in = new byte [] {' ', 0x1F, 'A', 'a', ';', '"', '\\', 0x7E, 0x7F, (byte) 0xFF};
    String exp = "\" \\031Aa;\\\"\\\\~\\127\\255\"";
    assertEquals (exp, SubRecord.byteArrayToString (in, true));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RecordTest.java" startline="556" endline="564">
public void test_unknownToString () {
    byte [] data = new byte [] {(byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x9A, (byte) 0xBC, (byte) 0xDE, (byte) 0xFF};
    String out = SubRecord.unknownToString (data);
    assertFalse (out.indexOf ("" + data.length) == - 1);
    assertFalse (out.indexOf ("123456789ABCDEFF") == - 1);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RecordTest.java" startline="566" endline="595">
public void test_fromString () throws IOException, TextParseException {
    Name n = Name.fromString ("My.N.");
    Name n2 = Name.fromString ("My.Second.Name.");
    int t = Type.A;
    int d = DClass.IN;
    int ttl = 0xABE99;
    String sa = "191.234.43.10";
    InetAddress addr = InetAddress.getByName (sa);
    byte [] b = new byte [] {(byte) 191, (byte) 234, (byte) 43, (byte) 10};
    Tokenizer st = new Tokenizer (sa);
    Record rec = Record.fromString (n, t, d, ttl, st, n2);
    assertTrue (rec instanceof ARecord);
    assertEquals (n, rec.getName ());
    assertEquals (t, rec.getType ());
    assertEquals (d, rec.getDClass ());
    assertEquals (ttl, rec.getTTL ());
    assertEquals (addr, ((ARecord) rec).getAddress ());
    String unkData = SubRecord.unknownToString (b);
    st = new Tokenizer (unkData);
    rec = Record.fromString (n, t, d, ttl, st, n2);
    assertTrue (rec instanceof ARecord);
    assertEquals (n, rec.getName ());
    assertEquals (t, rec.getType ());
    assertEquals (d, rec.getDClass ());
    assertEquals (ttl, rec.getTTL ());
    assertEquals (addr, ((ARecord) rec).getAddress ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RecordTest.java" startline="597" endline="634">
public void test_fromString_invalid () throws IOException, TextParseException {
    Name n = Name.fromString ("My.N.");
    Name rel = Name.fromString ("My.R");
    Name n2 = Name.fromString ("My.Second.Name.");
    int t = Type.A;
    int d = DClass.IN;
    int ttl = 0xABE99;
    InetAddress addr = InetAddress.getByName ("191.234.43.10");
    Tokenizer st = new Tokenizer ("191.234.43.10");
    try {
        Record.fromString (rel, t, d, ttl, st, n2);
        fail ("RelativeNameException not thrown");
    } catch (RelativeNameException e) {
    }
    st = new Tokenizer ("191.234.43.10 another_token");
    try {
        Record.fromString (n, t, d, ttl, st, n2);
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
    st = new Tokenizer ("\\# 100 ABCDE");
    try {
        Record.fromString (n, t, d, ttl, st, n2);
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
    try {
        Record.fromString (n, t, d, ttl, "\\# 100", n2);
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RecordTest.java" startline="636" endline="646">
public void test_getRRsetType () throws TextParseException {
    Name n = Name.fromString ("My.N.");
    Record r = Record.newRecord (n, Type.A, DClass.IN, 0);
    assertEquals (Type.A, r.getRRsetType ());
    r = new RRSIGRecord (n, DClass.IN, 0, Type.A, 1, 0, new Date (), new Date (), 10, n, new byte [0]);
    assertEquals (Type.A, r.getRRsetType ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RecordTest.java" startline="648" endline="670">
public void test_sameRRset () throws TextParseException {
    Name n = Name.fromString ("My.N.");
    Name m = Name.fromString ("My.M.");
    Record r1 = Record.newRecord (n, Type.A, DClass.IN, 0);
    Record r2 = new RRSIGRecord (n, DClass.IN, 0, Type.A, 1, 0, new Date (), new Date (), 10, n, new byte [0]);
    assertTrue (r1.sameRRset (r2));
    assertTrue (r2.sameRRset (r1));
    r1 = Record.newRecord (n, Type.A, DClass.HS, 0);
    r2 = new RRSIGRecord (n, DClass.IN, 0, Type.A, 1, 0, new Date (), new Date (), 10, n, new byte [0]);
    assertFalse (r1.sameRRset (r2));
    assertFalse (r2.sameRRset (r1));
    r1 = Record.newRecord (n, Type.A, DClass.IN, 0);
    r2 = new RRSIGRecord (m, DClass.IN, 0, Type.A, 1, 0, new Date (), new Date (), 10, n, new byte [0]);
    assertFalse (r1.sameRRset (r2));
    assertFalse (r2.sameRRset (r1));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RecordTest.java" startline="672" endline="720">
public void test_equals () throws TextParseException {
    Name n = Name.fromString ("My.N.");
    Name n2 = Name.fromString ("my.n.");
    Name m = Name.fromString ("My.M.");
    Record r1 = Record.newRecord (n, Type.A, DClass.IN, 0);
    assertFalse (r1.equals (null));
    assertFalse (r1.equals (new Object ()));
    Record r2 = Record.newRecord (n, Type.A, DClass.IN, 0);
    assertEquals (r1, r2);
    assertEquals (r2, r1);
    r2 = Record.newRecord (n2, Type.A, DClass.IN, 0);
    assertEquals (r1, r2);
    assertEquals (r2, r1);
    r2 = Record.newRecord (n2, Type.A, DClass.IN, 0xABCDE);
    assertEquals (r1, r2);
    assertEquals (r2, r1);
    r2 = Record.newRecord (m, Type.A, DClass.IN, 0xABCDE);
    assertFalse (r1.equals (r2));
    assertFalse (r2.equals (r1));
    r2 = Record.newRecord (n2, Type.MX, DClass.IN, 0xABCDE);
    assertFalse (r1.equals (r2));
    assertFalse (r2.equals (r1));
    r2 = Record.newRecord (n2, Type.A, DClass.CHAOS, 0xABCDE);
    assertFalse (r1.equals (r2));
    assertFalse (r2.equals (r1));
    byte [] d1 = new byte [] {23, 12, 9, (byte) 129};
    byte [] d2 = new byte [] {(byte) 220, 1, (byte) 131, (byte) 212};
    r1 = Record.newRecord (n, Type.A, DClass.IN, 0xABCDE9, d1);
    r2 = Record.newRecord (n, Type.A, DClass.IN, 0xABCDE9, d1);
    assertEquals (r1, r2);
    assertEquals (r2, r1);
    r2 = Record.newRecord (n, Type.A, DClass.IN, 0xABCDE9, d2);
    assertFalse (r1.equals (r2));
    assertFalse (r2.equals (r1));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RecordTest.java" startline="722" endline="755">
public void test_hashCode () throws TextParseException {
    Name n = Name.fromString ("My.N.");
    Name n2 = Name.fromString ("my.n.");
    Name m = Name.fromString ("My.M.");
    byte [] d1 = new byte [] {23, 12, 9, (byte) 129};
    byte [] d2 = new byte [] {(byte) 220, 1, (byte) 131, (byte) 212};
    Record r1 = Record.newRecord (n, Type.A, DClass.IN, 0xABCDE9, d1);
    Record r2 = Record.newRecord (n, Type.A, DClass.IN, 0xABCDE9, d1);
    assertEquals (r1.hashCode (), r2.hashCode ());
    r2 = Record.newRecord (n2, Type.A, DClass.IN, 0xABCDE9, d1);
    assertEquals (r1.hashCode (), r2.hashCode ());
    r2 = Record.newRecord (m, Type.A, DClass.IN, 0xABCDE9, d1);
    assertFalse (r1.hashCode () == r2.hashCode ());
    r2 = Record.newRecord (n, Type.A, DClass.CHAOS, 0xABCDE9, d1);
    assertFalse (r1.hashCode () == r2.hashCode ());
    r2 = Record.newRecord (n, Type.A, DClass.IN, 0xABCDE, d1);
    assertEquals (r1.hashCode (), r2.hashCode ());
    r2 = Record.newRecord (n, Type.A, DClass.IN, 0xABCDE9, d2);
    assertFalse (r1.hashCode () == r2.hashCode ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RecordTest.java" startline="757" endline="775">
public void test_cloneRecord () throws TextParseException {
    Name n = Name.fromString ("My.N.");
    byte [] d = new byte [] {23, 12, 9, (byte) 129};
    Record r = Record.newRecord (n, Type.A, DClass.IN, 0xABCDE9, d);
    Record r2 = r.cloneRecord ();
    assertNotSame (r, r2);
    assertEquals (r, r2);
    r = new SubRecord (n, Type.A, DClass.IN, 0xABCDE9);
    try {
        r.cloneRecord ();
        fail ("IllegalStateException not thrown");
    } catch (IllegalStateException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RecordTest.java" startline="777" endline="798">
public void test_withName () throws TextParseException {
    Name n = Name.fromString ("My.N.");
    Name m = Name.fromString ("My.M.Name.");
    Name rel = Name.fromString ("My.Relative.Name");
    byte [] d = new byte [] {23, 12, 9, (byte) 129};
    Record r = Record.newRecord (n, Type.A, DClass.IN, 0xABCDE9, d);
    Record r1 = r.withName (m);
    assertEquals (m, r1.getName ());
    assertEquals (Type.A, r1.getType ());
    assertEquals (DClass.IN, r1.getDClass ());
    assertEquals (0xABCDE9, r1.getTTL ());
    assertEquals (((ARecord) r).getAddress (), ((ARecord) r1).getAddress ());
    try {
        r.withName (rel);
        fail ("RelativeNameException not thrown");
    } catch (RelativeNameException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RecordTest.java" startline="800" endline="813">
public void test_withDClass () throws TextParseException {
    Name n = Name.fromString ("My.N.");
    byte [] d = new byte [] {23, 12, 9, (byte) 129};
    Record r = Record.newRecord (n, Type.A, DClass.IN, 0xABCDE9, d);
    Record r1 = r.withDClass (DClass.HESIOD, 0x9876);
    assertEquals (n, r1.getName ());
    assertEquals (Type.A, r1.getType ());
    assertEquals (DClass.HESIOD, r1.getDClass ());
    assertEquals (0x9876, r1.getTTL ());
    assertEquals (((ARecord) r).getAddress (), ((ARecord) r1).getAddress ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RecordTest.java" startline="815" endline="832">
public void test_setTTL () throws TextParseException, UnknownHostException {
    Name n = Name.fromString ("My.N.");
    byte [] d = new byte [] {23, 12, 9, (byte) 129};
    InetAddress exp = InetAddress.getByName ("23.12.9.129");
    Record r = Record.newRecord (n, Type.A, DClass.IN, 0xABCDE9, d);
    assertEquals (0xABCDE9, r.getTTL ());
    r.setTTL (0x9876);
    assertEquals (n, r.getName ());
    assertEquals (Type.A, r.getType ());
    assertEquals (DClass.IN, r.getDClass ());
    assertEquals (0x9876, r.getTTL ());
    assertEquals (exp, ((ARecord) r).getAddress ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RecordTest.java" startline="834" endline="880">
public void test_compareTo () throws TextParseException {
    Name n = Name.fromString ("My.N.");
    Name n2 = Name.fromString ("my.n.");
    Name m = Name.fromString ("My.M.");
    byte [] d = new byte [] {23, 12, 9, (byte) 129};
    byte [] d2 = new byte [] {23, 12, 9, (byte) 128};
    Record r1 = Record.newRecord (n, Type.A, DClass.IN, 0xABCDE9, d);
    Record r2 = Record.newRecord (n, Type.A, DClass.IN, 0xABCDE9, d);
    assertEquals (0, r1.compareTo (r1));
    assertEquals (0, r1.compareTo (r2));
    assertEquals (0, r2.compareTo (r1));
    r2 = Record.newRecord (n2, Type.A, DClass.IN, 0xABCDE9, d);
    assertEquals (0, r1.compareTo (r2));
    assertEquals (0, r2.compareTo (r1));
    r2 = Record.newRecord (m, Type.A, DClass.IN, 0xABCDE9, d);
    assertEquals (n.compareTo (m), r1.compareTo (r2));
    assertEquals (m.compareTo (n), r2.compareTo (r1));
    r2 = Record.newRecord (n, Type.A, DClass.CHAOS, 0xABCDE9, d);
    assertEquals (DClass.IN - DClass.CHAOS, r1.compareTo (r2));
    assertEquals (DClass.CHAOS - DClass.IN, r2.compareTo (r1));
    r2 = Record.newRecord (n, Type.NS, DClass.IN, 0xABCDE9, m.toWire ());
    assertEquals (Type.A - Type.NS, r1.compareTo (r2));
    assertEquals (Type.NS - Type.A, r2.compareTo (r1));
    r2 = Record.newRecord (n, Type.A, DClass.IN, 0xABCDE9, d2);
    assertEquals (1, r1.compareTo (r2));
    assertEquals (- 1, r2.compareTo (r1));
    m = Name.fromString ("My.N.L.");
    r1 = Record.newRecord (n, Type.NS, DClass.IN, 0xABCDE9, n.toWire ());
    r2 = Record.newRecord (n, Type.NS, DClass.IN, 0xABCDE9, m.toWire ());
    assertEquals (- 1, r1.compareTo (r2));
    assertEquals (1, r2.compareTo (r1));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RecordTest.java" startline="882" endline="888">
public void test_getAdditionalName () throws TextParseException {
    Name n = Name.fromString ("My.N.");
    Record r = new SubRecord (n, Type.A, DClass.IN, 0xABCDE9);
    assertNull (r.getAdditionalName ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RecordTest.java" startline="890" endline="899">
public void test_checkU8 () {
    try {
        Record.checkU8 ("field", - 1);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
    assertEquals (0, Record.checkU8 ("field", 0));
    assertEquals (0x9D, Record.checkU8 ("field", 0x9D));
    assertEquals (0xFF, Record.checkU8 ("field", 0xFF));
    try {
        Record.checkU8 ("field", 0x100);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RecordTest.java" startline="901" endline="910">
public void test_checkU16 () {
    try {
        Record.checkU16 ("field", - 1);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
    assertEquals (0, Record.checkU16 ("field", 0));
    assertEquals (0x9DA1, Record.checkU16 ("field", 0x9DA1));
    assertEquals (0xFFFF, Record.checkU16 ("field", 0xFFFF));
    try {
        Record.checkU16 ("field", 0x10000);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RecordTest.java" startline="912" endline="921">
public void test_checkU32 () {
    try {
        Record.checkU32 ("field", - 1);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
    assertEquals (0, Record.checkU32 ("field", 0));
    assertEquals (0x9DA1F02DL, Record.checkU32 ("field", 0x9DA1F02DL));
    assertEquals (0xFFFFFFFFL, Record.checkU32 ("field", 0xFFFFFFFFL));
    try {
        Record.checkU32 ("field", 0x100000000L);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RecordTest.java" startline="923" endline="935">
public void test_checkName () throws TextParseException {
    Name n = Name.fromString ("My.N.");
    Name m = Name.fromString ("My.m");
    assertEquals (n, Record.checkName ("field", n));
    try {
        Record.checkName ("field", m);
        fail ("RelativeNameException not thrown");
    } catch (RelativeNameException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/U16NameBaseTest.java" startline="43" endline="46">
private void assertEquals (byte [] exp, byte [] act) {
    assertTrue (java.util.Arrays.equals (exp, act));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/U16NameBaseTest.java" startline="50" endline="50">
public TestClass () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/U16NameBaseTest.java" startline="52" endline="55">
public TestClass (Name name, int type, int dclass, long ttl) {
    super (name, type, dclass, ttl);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/U16NameBaseTest.java" startline="57" endline="61">
public TestClass (Name name, int type, int dclass, long ttl, int u16Field, String u16Description, Name nameField, String nameDescription) {
    super (name, type, dclass, ttl, u16Field, u16Description, nameField, nameDescription);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/U16NameBaseTest.java" startline="63" endline="66">
public int getU16Field () {
    return super.getU16Field ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/U16NameBaseTest.java" startline="68" endline="71">
public Name getNameField () {
    return super.getNameField ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/U16NameBaseTest.java" startline="73" endline="76">
public Record getObject () {
    return null;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/U16NameBaseTest.java" startline="79" endline="88">
public void test_ctor_0arg () {
    TestClass tc = new TestClass ();
    assertNull (tc.getName ());
    assertEquals (0, tc.getType ());
    assertEquals (0, tc.getDClass ());
    assertEquals (0, tc.getTTL ());
    assertEquals (0, tc.getU16Field ());
    assertNull (tc.getNameField ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/U16NameBaseTest.java" startline="90" endline="102">
public void test_ctor_4arg () throws TextParseException {
    Name n = Name.fromString ("My.Name.");
    TestClass tc = new TestClass (n, Type.MX, DClass.IN, 0xBCDA);
    assertSame (n, tc.getName ());
    assertEquals (Type.MX, tc.getType ());
    assertEquals (DClass.IN, tc.getDClass ());
    assertEquals (0xBCDA, tc.getTTL ());
    assertEquals (0, tc.getU16Field ());
    assertNull (tc.getNameField ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/U16NameBaseTest.java" startline="104" endline="139">
public void test_ctor_8arg () throws TextParseException {
    Name n = Name.fromString ("My.Name.");
    Name m = Name.fromString ("My.Other.Name.");
    TestClass tc = new TestClass (n, Type.MX, DClass.IN, 0xB12FL, 0x1F2B, "u16 description", m, "name description");
    assertSame (n, tc.getName ());
    assertEquals (Type.MX, tc.getType ());
    assertEquals (DClass.IN, tc.getDClass ());
    assertEquals (0xB12FL, tc.getTTL ());
    assertEquals (0x1F2B, tc.getU16Field ());
    assertEquals (m, tc.getNameField ());
    try {
        new TestClass (n, Type.MX, DClass.IN, 0xB12FL, 0x10000, "u16 description", m, "name description");
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
    Name rel = Name.fromString ("My.relative.Name");
    try {
        new TestClass (n, Type.MX, DClass.IN, 0xB12FL, 0x1F2B, "u16 description", rel, "name description");
        fail ("RelativeNameException not thrown");
    } catch (RelativeNameException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/U16NameBaseTest.java" startline="141" endline="152">
public void test_rrFromWire () throws IOException {
    byte [] raw = new byte [] {(byte) 0xBC, (byte) 0x1F, 2, 'M', 'y', 6, 's', 'i', 'N', 'g', 'l', 'E', 4, 'n', 'A', 'm', 'E', 0};
    DNSInput in = new DNSInput (raw);
    TestClass tc = new TestClass ();
    tc.rrFromWire (in);
    Name exp = Name.fromString ("My.single.name.");
    assertEquals (0xBC1FL, tc.getU16Field ());
    assertEquals (exp, tc.getNameField ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/U16NameBaseTest.java" startline="154" endline="172">
public void test_rdataFromString () throws IOException {
    Name exp = Name.fromString ("My.Single.Name.");
    Tokenizer t = new Tokenizer (0x19A2 + " My.Single.Name.");
    TestClass tc = new TestClass ();
    tc.rdataFromString (t, null);
    assertEquals (0x19A2, tc.getU16Field ());
    assertEquals (exp, tc.getNameField ());
    t = new Tokenizer ("10 My.Relative.Name");
    tc = new TestClass ();
    try {
        tc.rdataFromString (t, null);
        fail ("RelativeNameException not thrown");
    } catch (RelativeNameException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/U16NameBaseTest.java" startline="174" endline="187">
public void test_rrToString () throws IOException, TextParseException {
    Name n = Name.fromString ("My.Name.");
    Name m = Name.fromString ("My.Other.Name.");
    TestClass tc = new TestClass (n, Type.MX, DClass.IN, 0xB12FL, 0x1F2B, "u16 description", m, "name description");
    String out = tc.rrToString ();
    String exp = 0x1F2B + " My.Other.Name.";
    assertEquals (exp, out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/U16NameBaseTest.java" startline="189" endline="211">
public void test_rrToWire () throws IOException, TextParseException {
    Name n = Name.fromString ("My.Name.");
    Name m = Name.fromString ("M.O.n.");
    TestClass tc = new TestClass (n, Type.MX, DClass.IN, 0xB12FL, 0x1F2B, "u16 description", m, "name description");
    DNSOutput dout = new DNSOutput ();
    tc.rrToWire (dout, null, true);
    byte [] out = dout.toByteArray ();
    byte [] exp = new byte [] {0x1F, 0x2B, 1, 'm', 1, 'o', 1, 'n', 0};
    assertTrue (Arrays.equals (exp, out));
    dout = new DNSOutput ();
    tc.rrToWire (dout, null, false);
    out = dout.toByteArray ();
    exp = new byte [] {0x1F, 0x2B, 1, 'M', 1, 'O', 1, 'n', 0};
    assertTrue (Arrays.equals (exp, out));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/MGRecordTest.java" startline="41" endline="46">
public void test_ctor_0arg () {
    MGRecord d = new MGRecord ();
    assertNull (d.getName ());
    assertNull (d.getMailbox ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/MGRecordTest.java" startline="48" endline="59">
public void test_ctor_4arg () throws TextParseException {
    Name n = Name.fromString ("my.name.");
    Name a = Name.fromString ("my.alias.");
    MGRecord d = new MGRecord (n, DClass.IN, 0xABCDEL, a);
    assertEquals (n, d.getName ());
    assertEquals (Type.MG, d.getType ());
    assertEquals (DClass.IN, d.getDClass ());
    assertEquals (0xABCDEL, d.getTTL ());
    assertEquals (a, d.getMailbox ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/MGRecordTest.java" startline="61" endline="66">
public void test_getObject () {
    MGRecord d = new MGRecord ();
    Record r = d.getObject ();
    assertTrue (r instanceof MGRecord);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/ExtendedFlagsTest.java" startline="41" endline="63">
public void test_string () {
    assertEquals ("do", ExtendedFlags.string (ExtendedFlags.DO));
    assertTrue (ExtendedFlags.string (1).startsWith ("flag"));
    try {
        ExtendedFlags.string (- 1);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
    try {
        ExtendedFlags.string (0x10000);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/ExtendedFlagsTest.java" startline="65" endline="81">
public void test_value () {
    assertEquals (ExtendedFlags.DO, ExtendedFlags.value ("do"));
    assertEquals (16, ExtendedFlags.value ("FLAG16"));
    assertEquals (- 1, ExtendedFlags.value ("FLAG" + 0x10000));
    assertEquals (- 1, ExtendedFlags.value ("THIS IS DEFINITELY UNKNOWN"));
    assertEquals (- 1, ExtendedFlags.value (""));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/MnemonicTest.java" startline="45" endline="48">
public MnemonicTest (String name) {
    super (name);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/MnemonicTest.java" startline="50" endline="53">
public void setUp () {
    m_mn = new Mnemonic (MnemonicTest.class.getName () + " UPPER", Mnemonic.CASE_UPPER);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/MnemonicTest.java" startline="55" endline="80">
public void test_toInteger () {
    Integer i = Mnemonic.toInteger (64);
    assertEquals (new Integer (64), i);
    Integer i2 = Mnemonic.toInteger (64);
    assertEquals (i, i2);
    assertNotSame (i, i2);
    i = Mnemonic.toInteger (- 1);
    assertEquals (new Integer (- 1), i);
    i2 = Mnemonic.toInteger (- 1);
    assertEquals (i, i2);
    assertNotSame (i, i2);
    i = Mnemonic.toInteger (0);
    assertEquals (new Integer (0), i);
    i2 = Mnemonic.toInteger (0);
    assertEquals (i, i2);
    assertSame (i, i2);
    i = Mnemonic.toInteger (63);
    assertEquals (new Integer (63), i);
    i2 = Mnemonic.toInteger (63);
    assertEquals (i, i2);
    assertSame (i, i2);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/MnemonicTest.java" startline="82" endline="98">
public void test_no_maximum () {
    try {
        m_mn.check (- 1);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
    try {
        m_mn.check (0);
    } catch (IllegalArgumentException e) {
        fail (e.getMessage ());
    }
    try {
        m_mn.check (Integer.MAX_VALUE);
    } catch (IllegalArgumentException e) {
        fail (e.getMessage ());
    }
    m_mn.setNumericAllowed (true);
    int val = m_mn.getValue ("-2");
    assertEquals (- 1, val);
    val = m_mn.getValue ("0");
    assertEquals (0, val);
    val = m_mn.getValue ("" + Integer.MAX_VALUE);
    assertEquals (Integer.MAX_VALUE, val);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/MnemonicTest.java" startline="100" endline="122">
public void test_setMaximum () {
    m_mn.setMaximum (15);
    try {
        m_mn.check (- 1);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
    try {
        m_mn.check (0);
    } catch (IllegalArgumentException e) {
        fail (e.getMessage ());
    }
    try {
        m_mn.check (15);
    } catch (IllegalArgumentException e) {
        fail (e.getMessage ());
    }
    try {
        m_mn.check (16);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
    m_mn.setNumericAllowed (true);
    int val = m_mn.getValue ("-2");
    assertEquals (- 1, val);
    val = m_mn.getValue ("0");
    assertEquals (0, val);
    val = m_mn.getValue ("15");
    assertEquals (15, val);
    val = m_mn.getValue ("16");
    assertEquals (- 1, val);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/MnemonicTest.java" startline="124" endline="134">
public void test_setPrefix () {
    final String prefix = "A mixed CASE Prefix".toUpperCase ();
    m_mn.setPrefix (prefix);
    String out = m_mn.getText (10);
    assertEquals (prefix + "10", out);
    int i = m_mn.getValue (out);
    assertEquals (10, i);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/MnemonicTest.java" startline="136" endline="167">
public void test_basic_operation () {
    m_mn.add (10, "Ten");
    m_mn.add (20, "Twenty");
    m_mn.addAlias (20, "Veinte");
    m_mn.add (30, "Thirty");
    String text = m_mn.getText (10);
    assertEquals ("TEN", text);
    text = m_mn.getText (20);
    assertEquals ("TWENTY", text);
    text = m_mn.getText (30);
    assertEquals ("THIRTY", text);
    text = m_mn.getText (40);
    assertEquals ("40", text);
    int value = m_mn.getValue ("tEn");
    assertEquals (10, value);
    value = m_mn.getValue ("twenty");
    assertEquals (20, value);
    value = m_mn.getValue ("VeiNTe");
    assertEquals (20, value);
    value = m_mn.getValue ("THIRTY");
    assertEquals (30, value);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/MnemonicTest.java" startline="169" endline="200">
public void test_basic_operation_lower () {
    m_mn = new Mnemonic (MnemonicTest.class.getName () + " LOWER", Mnemonic.CASE_LOWER);
    m_mn.add (10, "Ten");
    m_mn.add (20, "Twenty");
    m_mn.addAlias (20, "Veinte");
    m_mn.add (30, "Thirty");
    String text = m_mn.getText (10);
    assertEquals ("ten", text);
    text = m_mn.getText (20);
    assertEquals ("twenty", text);
    text = m_mn.getText (30);
    assertEquals ("thirty", text);
    text = m_mn.getText (40);
    assertEquals ("40", text);
    int value = m_mn.getValue ("tEn");
    assertEquals (10, value);
    value = m_mn.getValue ("twenty");
    assertEquals (20, value);
    value = m_mn.getValue ("VeiNTe");
    assertEquals (20, value);
    value = m_mn.getValue ("THIRTY");
    assertEquals (30, value);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/MnemonicTest.java" startline="202" endline="239">
public void test_basic_operation_sensitive () {
    m_mn = new Mnemonic (MnemonicTest.class.getName () + " SENSITIVE", Mnemonic.CASE_SENSITIVE);
    m_mn.add (10, "Ten");
    m_mn.add (20, "Twenty");
    m_mn.addAlias (20, "Veinte");
    m_mn.add (30, "Thirty");
    String text = m_mn.getText (10);
    assertEquals ("Ten", text);
    text = m_mn.getText (20);
    assertEquals ("Twenty", text);
    text = m_mn.getText (30);
    assertEquals ("Thirty", text);
    text = m_mn.getText (40);
    assertEquals ("40", text);
    int value = m_mn.getValue ("Ten");
    assertEquals (10, value);
    value = m_mn.getValue ("twenty");
    assertEquals (- 1, value);
    value = m_mn.getValue ("Twenty");
    assertEquals (20, value);
    value = m_mn.getValue ("VEINTE");
    assertEquals (- 1, value);
    value = m_mn.getValue ("Veinte");
    assertEquals (20, value);
    value = m_mn.getValue ("Thirty");
    assertEquals (30, value);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/MnemonicTest.java" startline="241" endline="246">
public void test_invalid_numeric () {
    m_mn.setNumericAllowed (true);
    int value = m_mn.getValue ("Not-A-Number");
    assertEquals (- 1, value);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/MnemonicTest.java" startline="248" endline="283">
public void test_addAll () {
    m_mn.add (10, "Ten");
    m_mn.add (20, "Twenty");
    Mnemonic mn2 = new Mnemonic ("second test Mnemonic", Mnemonic.CASE_UPPER);
    mn2.add (20, "Twenty");
    mn2.addAlias (20, "Veinte");
    mn2.add (30, "Thirty");
    m_mn.addAll (mn2);
    String text = m_mn.getText (10);
    assertEquals ("TEN", text);
    text = m_mn.getText (20);
    assertEquals ("TWENTY", text);
    text = m_mn.getText (30);
    assertEquals ("THIRTY", text);
    text = m_mn.getText (40);
    assertEquals ("40", text);
    int value = m_mn.getValue ("tEn");
    assertEquals (10, value);
    value = m_mn.getValue ("twenty");
    assertEquals (20, value);
    value = m_mn.getValue ("VeiNTe");
    assertEquals (20, value);
    value = m_mn.getValue ("THIRTY");
    assertEquals (30, value);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NSRecordTest.java" startline="41" endline="47">
public void test_ctor_0arg () {
    NSRecord d = new NSRecord ();
    assertNull (d.getName ());
    assertNull (d.getTarget ());
    assertNull (d.getAdditionalName ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NSRecordTest.java" startline="49" endline="61">
public void test_ctor_4arg () throws TextParseException {
    Name n = Name.fromString ("my.name.");
    Name a = Name.fromString ("my.alias.");
    NSRecord d = new NSRecord (n, DClass.IN, 0xABCDEL, a);
    assertEquals (n, d.getName ());
    assertEquals (Type.NS, d.getType ());
    assertEquals (DClass.IN, d.getDClass ());
    assertEquals (0xABCDEL, d.getTTL ());
    assertEquals (a, d.getTarget ());
    assertEquals (a, d.getAdditionalName ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NSRecordTest.java" startline="63" endline="68">
public void test_getObject () {
    NSRecord d = new NSRecord ();
    Record r = d.getObject ();
    assertTrue (r instanceof NSRecord);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSSECWithLunaProviderTest.java" startline="28" endline="32">
public void setUp () {
    Security.addProvider (new LunaJCEProvider ());
    Security.addProvider (new LunaJCAProvider ());
    tokenManager.Login (partitionName, partitionPassword);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSSECWithLunaProviderTest.java" startline="34" endline="36">
public void tearDown () {
    tokenManager.Logout ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSSECWithLunaProviderTest.java" startline="38" endline="57">
public void testSignHSM () throws Exception {
    KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance (KEY_ALGORITHM, lunaJCAProvider);
    keyPairGenerator.initialize (512);
    KeyPair keyPair = keyPairGenerator.generateKeyPair ();
    Signature signer = Signature.getInstance (SIGNATURE_ALGORITHM, lunaJCAProvider);
    signer.initSign (keyPair.getPrivate ());
    signer.update (toSign);
    byte [] signature = signer.sign ();
    assertNotNull (signature);
    Signature verifier = Signature.getInstance (SIGNATURE_ALGORITHM, lunaJCAProvider);
    verifier.initVerify (keyPair.getPublic ());
    verifier.update (toSign);
    boolean verify = verifier.verify (signature);
    assertTrue (verify);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSSECWithLunaProviderTest.java" startline="59" endline="74">
public void testSignWithDNSSECAndHSM () throws Exception {
    KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance (KEY_ALGORITHM, lunaJCAProvider);
    keyPairGenerator.initialize (512);
    KeyPair keyPair = keyPairGenerator.generateKeyPair ();
    byte [] signature = DNSSEC.sign (keyPair.getPrivate (), keyPair.getPublic (), algorithm, toSign, lunaJCAProvider);
    assertNotNull (signature);
    Signature verifier = Signature.getInstance (DNSSEC.algString (algorithm), lunaJCAProvider);
    verifier.initVerify (keyPair.getPublic ());
    verifier.update (toSign);
    boolean verify = verifier.verify (signature);
    assertTrue (verify);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSSECWithLunaProviderTest.java" startline="76" endline="91">
public void testSignWithDNSSECAndSoftware () throws Exception {
    KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance (KEY_ALGORITHM);
    keyPairGenerator.initialize (512);
    KeyPair keyPair = keyPairGenerator.generateKeyPair ();
    byte [] signature = DNSSEC.sign (keyPair.getPrivate (), keyPair.getPublic (), algorithm, toSign);
    assertNotNull (signature);
    Signature verifier = Signature.getInstance (DNSSEC.algString (algorithm));
    verifier.initVerify (keyPair.getPublic ());
    verifier.update (toSign);
    boolean verify = verifier.verify (signature);
    assertTrue (verify);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/TypeBitmapTest.java" startline="39" endline="42">
public void test_empty () {
    TypeBitmap typeBitmap = new TypeBitmap (new int [] {});
    assertEquals (typeBitmap.toString (), "");
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/TypeBitmapTest.java" startline="44" endline="47">
public void test_typeA () {
    TypeBitmap typeBitmap = new TypeBitmap (new int [] {1});
    assertEquals (typeBitmap.toString (), "A");
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/TypeBitmapTest.java" startline="49" endline="52">
public void test_typeNSandSOA () {
    TypeBitmap typeBitmap = new TypeBitmap (new int [] {2, 6});
    assertEquals (typeBitmap.toString (), "NS SOA");
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/HeaderTest.java" startline="50" endline="53">
public void setUp () {
    m_h = new Header (0xABCD);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/HeaderTest.java" startline="55" endline="69">
public void test_fixture_state () {
    assertEquals (0xABCD, m_h.getID ());
    boolean [] flags = m_h.getFlags ();
    for (int i = 0;
    i < flags.length; ++ i) {
        assertFalse (flags [i]);
    }
    assertEquals (0, m_h.getRcode ());
    assertEquals (0, m_h.getOpcode ());
    assertEquals (0, m_h.getCount (0));
    assertEquals (0, m_h.getCount (1));
    assertEquals (0, m_h.getCount (2));
    assertEquals (0, m_h.getCount (3));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/HeaderTest.java" startline="71" endline="86">
public void test_ctor_0arg () {
    m_h = new Header ();
    assertTrue (0 <= m_h.getID () && m_h.getID () < 0xFFFF);
    boolean [] flags = m_h.getFlags ();
    for (int i = 0;
    i < flags.length; ++ i) {
        assertFalse (flags [i]);
    }
    assertEquals (0, m_h.getRcode ());
    assertEquals (0, m_h.getOpcode ());
    assertEquals (0, m_h.getCount (0));
    assertEquals (0, m_h.getCount (1));
    assertEquals (0, m_h.getCount (2));
    assertEquals (0, m_h.getCount (3));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/HeaderTest.java" startline="88" endline="125">
public void test_ctor_DNSInput () throws IOException {
    byte [] raw = new byte [] {(byte) 0x12, (byte) 0xAB, (byte) 0x8F, (byte) 0xBD, (byte) 0x65, (byte) 0x1C, (byte) 0x10, (byte) 0xF0, (byte) 0x98, (byte) 0xBA, (byte) 0x71, (byte) 0x90};
    m_h = new Header (new DNSInput (raw));
    assertEquals (0x12AB, m_h.getID ());
    boolean [] flags = m_h.getFlags ();
    assertTrue (flags [0]);
    assertEquals (1, m_h.getOpcode ());
    assertTrue (flags [5]);
    assertTrue (flags [6]);
    assertTrue (flags [7]);
    assertTrue (flags [8]);
    assertFalse (flags [9]);
    assertTrue (flags [10]);
    assertTrue (flags [11]);
    assertEquals (0xD, m_h.getRcode ());
    assertEquals (0x651C, m_h.getCount (0));
    assertEquals (0x10F0, m_h.getCount (1));
    assertEquals (0x98BA, m_h.getCount (2));
    assertEquals (0x7190, m_h.getCount (3));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/HeaderTest.java" startline="127" endline="163">
public void test_toWire () throws IOException {
    byte [] raw = new byte [] {(byte) 0x12, (byte) 0xAB, (byte) 0x8F, (byte) 0xBD, (byte) 0x65, (byte) 0x1C, (byte) 0x10, (byte) 0xF0, (byte) 0x98, (byte) 0xBA, (byte) 0x71, (byte) 0x90};
    m_h = new Header (raw);
    DNSOutput dout = new DNSOutput ();
    m_h.toWire (dout);
    byte [] out = dout.toByteArray ();
    assertEquals (12, out.length);
    for (int i = 0;
    i < out.length; ++ i) {
        assertEquals (raw [i], out [i]);
    }
    m_h.setOpcode (0xA);
    assertEquals (0xA, m_h.getOpcode ());
    m_h.setRcode (0x7);
    raw [2] = (byte) 0xD7;
    raw [3] = (byte) 0xB7;
    out = m_h.toWire ();
    assertEquals (12, out.length);
    for (int i = 0;
    i < out.length; ++ i) {
        assertEquals ("i=" + i, raw [i], out [i]);
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/HeaderTest.java" startline="165" endline="193">
public void test_flags () {
    m_h.setFlag (0);
    m_h.setFlag (5);
    assertTrue (m_h.getFlag (0));
    assertTrue (m_h.getFlags () [0]);
    assertTrue (m_h.getFlag (5));
    assertTrue (m_h.getFlags () [5]);
    m_h.unsetFlag (0);
    assertFalse (m_h.getFlag (0));
    assertFalse (m_h.getFlags () [0]);
    assertTrue (m_h.getFlag (5));
    assertTrue (m_h.getFlags () [5]);
    m_h.unsetFlag (5);
    assertFalse (m_h.getFlag (0));
    assertFalse (m_h.getFlags () [0]);
    assertFalse (m_h.getFlag (5));
    assertFalse (m_h.getFlags () [5]);
    boolean [] flags = m_h.getFlags ();
    for (int i = 0;
    i < flags.length; ++ i) {
        if ((i > 0 && i < 5) || i > 11) {
            continue;
        }
        assertFalse (flags [i]);
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/HeaderTest.java" startline="195" endline="215">
public void test_flags_invalid () {
    try {
        m_h.setFlag (- 1);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
    try {
        m_h.setFlag (1);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
    try {
        m_h.setFlag (16);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
    try {
        m_h.unsetFlag (- 1);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
    try {
        m_h.unsetFlag (13);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
    try {
        m_h.unsetFlag (16);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
    try {
        m_h.getFlag (- 1);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
    try {
        m_h.getFlag (4);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
    try {
        m_h.getFlag (16);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/HeaderTest.java" startline="217" endline="229">
public void test_ID () {
    assertEquals (0xABCD, m_h.getID ());
    m_h = new Header ();
    int id = m_h.getID ();
    assertEquals (id, m_h.getID ());
    assertTrue (id >= 0 && id < 0xffff);
    m_h.setID (0xDCBA);
    assertEquals (0xDCBA, m_h.getID ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/HeaderTest.java" startline="231" endline="245">
public void test_setID_invalid () {
    try {
        m_h.setID (0x10000);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
    try {
        m_h.setID (- 1);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/HeaderTest.java" startline="247" endline="259">
public void test_Rcode () {
    assertEquals (0, m_h.getRcode ());
    m_h.setRcode (0xA);
    assertEquals (0xA, m_h.getRcode ());
    for (int i = 0;
    i < 12; ++ i) {
        if ((i > 0 && i < 5) || i > 11) {
            continue;
        }
        assertFalse (m_h.getFlag (i));
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/HeaderTest.java" startline="261" endline="275">
public void test_setRcode_invalid () {
    try {
        m_h.setRcode (- 1);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
    try {
        m_h.setRcode (0x100);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/HeaderTest.java" startline="277" endline="289">
public void test_Opcode () {
    assertEquals (0, m_h.getOpcode ());
    m_h.setOpcode (0xE);
    assertEquals (0xE, m_h.getOpcode ());
    assertFalse (m_h.getFlag (0));
    for (int i = 5;
    i < 12; ++ i) {
        assertFalse (m_h.getFlag (i));
    }
    assertEquals (0, m_h.getRcode ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/HeaderTest.java" startline="291" endline="305">
public void test_setOpcode_invalid () {
    try {
        m_h.setOpcode (- 1);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
    try {
        m_h.setOpcode (0x100);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/HeaderTest.java" startline="307" endline="320">
public void test_Count () {
    m_h.setCount (2, 0x1E);
    assertEquals (0, m_h.getCount (0));
    assertEquals (0, m_h.getCount (1));
    assertEquals (0x1E, m_h.getCount (2));
    assertEquals (0, m_h.getCount (3));
    m_h.incCount (0);
    assertEquals (1, m_h.getCount (0));
    m_h.decCount (2);
    assertEquals (0x1E - 1, m_h.getCount (2));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/HeaderTest.java" startline="322" endline="333">
public void test_setCount_invalid () {
    try {
        m_h.setCount (- 1, 0);
        fail ("ArrayIndexOutOfBoundsException not thrown");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
    try {
        m_h.setCount (4, 0);
        fail ("ArrayIndexOutOfBoundsException not thrown");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
    try {
        m_h.setCount (0, - 1);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
    try {
        m_h.setCount (3, 0x10000);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/HeaderTest.java" startline="335" endline="341">
public void test_getCount_invalid () {
    try {
        m_h.getCount (- 1);
        fail ("ArrayIndexOutOfBoundsException not thrown");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
    try {
        m_h.getCount (4);
        fail ("ArrayIndexOutOfBoundsException not thrown");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/HeaderTest.java" startline="343" endline="348">
public void test_incCount_invalid () {
    m_h.setCount (1, 0xFFFF);
    try {
        m_h.incCount (1);
        fail ("IllegalStateException not thrown");
    } catch (IllegalStateException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/HeaderTest.java" startline="350" endline="355">
public void test_decCount_invalid () {
    m_h.setCount (2, 0);
    try {
        m_h.decCount (2);
        fail ("IllegalStateException not thrown");
    } catch (IllegalStateException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/HeaderTest.java" startline="357" endline="382">
public void test_toString () {
    m_h.setOpcode (Opcode.value ("STATUS"));
    m_h.setRcode (Rcode.value ("NXDOMAIN"));
    m_h.setFlag (0);
    m_h.setFlag (7);
    m_h.setFlag (8);
    m_h.setFlag (11);
    m_h.setCount (1, 0xFF);
    m_h.setCount (2, 0x0A);
    String text = m_h.toString ();
    assertFalse (text.indexOf ("id: 43981") == - 1);
    assertFalse (text.indexOf ("opcode: STATUS") == - 1);
    assertFalse (text.indexOf ("status: NXDOMAIN") == - 1);
    assertFalse (text.indexOf (" qr ") == - 1);
    assertFalse (text.indexOf (" rd ") == - 1);
    assertFalse (text.indexOf (" ra ") == - 1);
    assertFalse (text.indexOf (" cd ") == - 1);
    assertFalse (text.indexOf ("qd: 0 ") == - 1);
    assertFalse (text.indexOf ("an: 255 ") == - 1);
    assertFalse (text.indexOf ("au: 10 ") == - 1);
    assertFalse (text.indexOf ("ad: 0 ") == - 1);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/HeaderTest.java" startline="384" endline="408">
public void test_clone () {
    m_h.setOpcode (Opcode.value ("IQUERY"));
    m_h.setRcode (Rcode.value ("SERVFAIL"));
    m_h.setFlag (0);
    m_h.setFlag (7);
    m_h.setFlag (8);
    m_h.setFlag (11);
    m_h.setCount (1, 0xFF);
    m_h.setCount (2, 0x0A);
    Header h2 = (Header) m_h.clone ();
    assertNotSame (m_h, h2);
    assertEquals (m_h.getID (), h2.getID ());
    for (int i = 0;
    i < 16; ++ i) {
        if ((i > 0 && i < 5) || i > 11) {
            continue;
        }
        assertEquals (m_h.getFlag (i), h2.getFlag (i));
    }
    for (int i = 0;
    i < 4; ++ i) {
        assertEquals (m_h.getCount (i), h2.getCount (i));
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSSECWithProviderTest.java" startline="20" endline="21">
public void setUp () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSSECWithProviderTest.java" startline="23" endline="24">
public void tearDown () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSSECWithProviderTest.java" startline="26" endline="45">
public void testSignSoftware () throws Exception {
    KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance (KEY_ALGORITHM);
    keyPairGenerator.initialize (512);
    KeyPair keyPair = keyPairGenerator.generateKeyPair ();
    Signature signer = Signature.getInstance (SIGNATURE_ALGORITHM);
    signer.initSign (keyPair.getPrivate ());
    signer.update (toSign);
    byte [] signature = signer.sign ();
    assertNotNull (signature);
    Signature verifier = Signature.getInstance (SIGNATURE_ALGORITHM);
    verifier.initVerify (keyPair.getPublic ());
    verifier.update (toSign);
    boolean verify = verifier.verify (signature);
    assertTrue (verify);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/MDRecordTest.java" startline="41" endline="47">
public void test_ctor_0arg () {
    MDRecord d = new MDRecord ();
    assertNull (d.getName ());
    assertNull (d.getAdditionalName ());
    assertNull (d.getMailAgent ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/MDRecordTest.java" startline="49" endline="61">
public void test_ctor_4arg () throws TextParseException {
    Name n = Name.fromString ("my.name.");
    Name a = Name.fromString ("my.alias.");
    MDRecord d = new MDRecord (n, DClass.IN, 0xABCDEL, a);
    assertEquals (n, d.getName ());
    assertEquals (Type.MD, d.getType ());
    assertEquals (DClass.IN, d.getDClass ());
    assertEquals (0xABCDEL, d.getTTL ());
    assertEquals (a, d.getAdditionalName ());
    assertEquals (a, d.getMailAgent ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/MDRecordTest.java" startline="63" endline="68">
public void test_getObject () {
    MDRecord d = new MDRecord ();
    Record r = d.getObject ();
    assertTrue (r instanceof MDRecord);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SectionTest.java" startline="41" endline="60">
public void test_string () {
    assertEquals ("au", Section.string (Section.AUTHORITY));
    try {
        Section.string (- 1);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
    try {
        Section.string (4);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SectionTest.java" startline="62" endline="72">
public void test_value () {
    assertEquals (Section.ADDITIONAL, Section.value ("ad"));
    assertEquals (- 1, Section.value ("THIS IS DEFINITELY UNKNOWN"));
    assertEquals (- 1, Section.value (""));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SectionTest.java" startline="74" endline="80">
public void test_longString () {
    assertEquals ("ADDITIONAL RECORDS", Section.longString (Section.ADDITIONAL));
    try {
        Section.longString (- 1);
    } catch (IllegalArgumentException e) {
    }
    try {
        Section.longString (4);
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SectionTest.java" startline="82" endline="88">
public void test_updString () {
    assertEquals ("ZONE", Section.updString (Section.ZONE));
    try {
        Section.longString (- 1);
    } catch (IllegalArgumentException e) {
    }
    try {
        Section.longString (4);
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSOutputTest.java" startline="43" endline="46">
public void setUp () {
    m_do = new DNSOutput (1);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSOutputTest.java" startline="48" endline="51">
private void assertEquals (byte [] exp, byte [] act) {
    assertTrue (java.util.Arrays.equals (exp, act));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSOutputTest.java" startline="53" endline="57">
public void test_default_ctor () {
    m_do = new DNSOutput ();
    assertEquals (0, m_do.current ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSOutputTest.java" startline="59" endline="76">
public void test_initial_state () {
    assertEquals (0, m_do.current ());
    try {
        m_do.restore ();
        fail ("IllegalStateException not thrown");
    } catch (IllegalStateException e) {
    }
    try {
        m_do.jump (1);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSOutputTest.java" startline="78" endline="86">
public void test_writeU8_basic () {
    m_do.writeU8 (1);
    assertEquals (1, m_do.current ());
    byte [] curr = m_do.toByteArray ();
    assertEquals (1, curr.length);
    assertEquals (1, curr [0]);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSOutputTest.java" startline="88" endline="100">
public void test_writeU8_expand () {
    m_do.writeU8 (1);
    m_do.writeU8 (2);
    assertEquals (2, m_do.current ());
    byte [] curr = m_do.toByteArray ();
    assertEquals (2, curr.length);
    assertEquals (1, curr [0]);
    assertEquals (2, curr [1]);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSOutputTest.java" startline="102" endline="107">
public void test_writeU8_max () {
    m_do.writeU8 (0xFF);
    byte [] curr = m_do.toByteArray ();
    assertEquals ((byte) 0xFF, (byte) curr [0]);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSOutputTest.java" startline="109" endline="118">
public void test_writeU8_toobig () {
    try {
        m_do.writeU8 (0x1FF);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSOutputTest.java" startline="120" endline="129">
public void test_writeU16_basic () {
    m_do.writeU16 (0x100);
    assertEquals (2, m_do.current ());
    byte [] curr = m_do.toByteArray ();
    assertEquals (2, curr.length);
    assertEquals (1, curr [0]);
    assertEquals (0, curr [1]);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSOutputTest.java" startline="131" endline="137">
public void test_writeU16_max () {
    m_do.writeU16 (0xFFFF);
    byte [] curr = m_do.toByteArray ();
    assertEquals ((byte) 0xFF, (byte) curr [0]);
    assertEquals ((byte) 0XFF, (byte) curr [1]);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSOutputTest.java" startline="139" endline="148">
public void test_writeU16_toobig () {
    try {
        m_do.writeU16 (0x1FFFF);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSOutputTest.java" startline="150" endline="161">
public void test_writeU32_basic () {
    m_do.writeU32 (0x11001011);
    assertEquals (4, m_do.current ());
    byte [] curr = m_do.toByteArray ();
    assertEquals (4, curr.length);
    assertEquals (0x11, curr [0]);
    assertEquals (0x00, curr [1]);
    assertEquals (0x10, curr [2]);
    assertEquals (0x11, curr [3]);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSOutputTest.java" startline="163" endline="171">
public void test_writeU32_max () {
    m_do.writeU32 (0xFFFFFFFFL);
    byte [] curr = m_do.toByteArray ();
    assertEquals ((byte) 0xFF, (byte) curr [0]);
    assertEquals ((byte) 0XFF, (byte) curr [1]);
    assertEquals ((byte) 0XFF, (byte) curr [2]);
    assertEquals ((byte) 0XFF, (byte) curr [3]);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSOutputTest.java" startline="173" endline="182">
public void test_writeU32_toobig () {
    try {
        m_do.writeU32 (0x1FFFFFFFFL);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSOutputTest.java" startline="184" endline="197">
public void test_jump_basic () {
    m_do.writeU32 (0x11223344L);
    assertEquals (4, m_do.current ());
    m_do.jump (2);
    assertEquals (2, m_do.current ());
    m_do.writeU8 (0x99);
    byte [] curr = m_do.toByteArray ();
    assertEquals (3, curr.length);
    assertEquals (0x11, curr [0]);
    assertEquals (0x22, curr [1]);
    assertEquals ((byte) 0x99, (byte) curr [2]);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSOutputTest.java" startline="199" endline="206">
public void test_writeByteArray_1arg () {
    byte [] in = new byte [] {(byte) 0xAB, (byte) 0xCD, (byte) 0xEF, (byte) 0x12, (byte) 0x34};
    m_do.writeByteArray (in);
    assertEquals (5, m_do.current ());
    byte [] curr = m_do.toByteArray ();
    assertEquals (in, curr);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSOutputTest.java" startline="208" endline="216">
public void test_writeByteArray_3arg () {
    byte [] in = new byte [] {(byte) 0xAB, (byte) 0xCD, (byte) 0xEF, (byte) 0x12, (byte) 0x34};
    m_do.writeByteArray (in, 2, 3);
    assertEquals (3, m_do.current ());
    byte [] exp = new byte [] {in [2], in [3], in [4]};
    byte [] curr = m_do.toByteArray ();
    assertEquals (exp, curr);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSOutputTest.java" startline="218" endline="226">
public void test_writeCountedString_basic () {
    byte [] in = new byte [] {'h', 'e', 'l', 'L', '0'};
    m_do.writeCountedString (in);
    assertEquals (in.length + 1, m_do.current ());
    byte [] curr = m_do.toByteArray ();
    byte [] exp = new byte [] {(byte) (in.length), in [0], in [1], in [2], in [3], in [4]};
    assertEquals (exp, curr);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSOutputTest.java" startline="228" endline="236">
public void test_writeCountedString_empty () {
    byte [] in = new byte [] {};
    m_do.writeCountedString (in);
    assertEquals (in.length + 1, m_do.current ());
    byte [] curr = m_do.toByteArray ();
    byte [] exp = new byte [] {(byte) (in.length)};
    assertEquals (exp, curr);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSOutputTest.java" startline="238" endline="248">
public void test_writeCountedString_toobig () {
    byte [] in = new byte [256];
    try {
        m_do.writeCountedString (in);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSOutputTest.java" startline="250" endline="266">
public void test_save_restore () {
    m_do.writeU32 (0x12345678L);
    assertEquals (4, m_do.current ());
    m_do.save ();
    m_do.writeU16 (0xABCD);
    assertEquals (6, m_do.current ());
    m_do.restore ();
    assertEquals (4, m_do.current ());
    try {
        m_do.restore ();
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalStateException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RcodeTest.java" startline="41" endline="66">
public void test_string () {
    assertEquals ("NXDOMAIN", Rcode.string (Rcode.NXDOMAIN));
    assertEquals ("NOTIMP", Rcode.string (Rcode.NOTIMP));
    assertTrue (Rcode.string (20).startsWith ("RESERVED"));
    try {
        Rcode.string (- 1);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
    try {
        Rcode.string (0x1000);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RcodeTest.java" startline="68" endline="90">
public void test_TSIGstring () {
    assertEquals ("BADSIG", Rcode.TSIGstring (Rcode.BADSIG));
    assertTrue (Rcode.TSIGstring (20).startsWith ("RESERVED"));
    try {
        Rcode.TSIGstring (- 1);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
    try {
        Rcode.string (0x10000);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RcodeTest.java" startline="92" endline="112">
public void test_value () {
    assertEquals (Rcode.FORMERR, Rcode.value ("FORMERR"));
    assertEquals (Rcode.NOTIMP, Rcode.value ("NOTIMP"));
    assertEquals (Rcode.NOTIMP, Rcode.value ("NOTIMPL"));
    assertEquals (35, Rcode.value ("RESERVED35"));
    assertEquals (- 1, Rcode.value ("RESERVED" + 0x1000));
    assertEquals (- 1, Rcode.value ("THIS IS DEFINITELY UNKNOWN"));
    assertEquals (- 1, Rcode.value (""));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SOARecordTest.java" startline="49" endline="52">
private static long randomU16 () {
    return m_random.nextLong ()>>> 48;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SOARecordTest.java" startline="54" endline="57">
private static long randomU32 () {
    return m_random.nextLong ()>>> 32;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SOARecordTest.java" startline="64" endline="77">
protected void setUp () throws TextParseException, UnknownHostException {
    m_an = Name.fromString ("My.Absolute.Name.");
    m_rn = Name.fromString ("My.Relative.Name");
    m_host = Name.fromString ("My.Host.Name.");
    m_admin = Name.fromString ("My.Administrative.Name.");
    m_ttl = randomU16 ();
    m_serial = randomU32 ();
    m_refresh = randomU32 ();
    m_retry = randomU32 ();
    m_expire = randomU32 ();
    m_minimum = randomU32 ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SOARecordTest.java" startline="79" endline="93">
public void test_0arg () throws UnknownHostException {
    SOARecord ar = new SOARecord ();
    assertNull (ar.getName ());
    assertEquals (0, ar.getType ());
    assertEquals (0, ar.getDClass ());
    assertEquals (0, ar.getTTL ());
    assertNull (ar.getHost ());
    assertNull (ar.getAdmin ());
    assertEquals (0, ar.getSerial ());
    assertEquals (0, ar.getRefresh ());
    assertEquals (0, ar.getRetry ());
    assertEquals (0, ar.getExpire ());
    assertEquals (0, ar.getMinimum ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SOARecordTest.java" startline="95" endline="100">
public void test_getObject () {
    SOARecord ar = new SOARecord ();
    Record r = ar.getObject ();
    assertTrue (r instanceof SOARecord);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SOARecordTest.java" startline="102" endline="118">
public void test_10arg () {
    SOARecord ar = new SOARecord (m_an, DClass.IN, m_ttl, m_host, m_admin, m_serial, m_refresh, m_retry, m_expire, m_minimum);
    assertEquals (m_an, ar.getName ());
    assertEquals (Type.SOA, ar.getType ());
    assertEquals (DClass.IN, ar.getDClass ());
    assertEquals (m_ttl, ar.getTTL ());
    assertEquals (m_host, ar.getHost ());
    assertEquals (m_admin, ar.getAdmin ());
    assertEquals (m_serial, ar.getSerial ());
    assertEquals (m_refresh, ar.getRefresh ());
    assertEquals (m_retry, ar.getRetry ());
    assertEquals (m_expire, ar.getExpire ());
    assertEquals (m_minimum, ar.getMinimum ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SOARecordTest.java" startline="120" endline="129">
public void test_10arg_relative_name () {
    try {
        new SOARecord (m_rn, DClass.IN, m_ttl, m_host, m_admin, m_serial, m_refresh, m_retry, m_expire, m_minimum);
        fail ("RelativeNameException not thrown");
    } catch (RelativeNameException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SOARecordTest.java" startline="131" endline="140">
public void test_10arg_relative_host () {
    try {
        new SOARecord (m_an, DClass.IN, m_ttl, m_rn, m_admin, m_serial, m_refresh, m_retry, m_expire, m_minimum);
        fail ("RelativeNameException not thrown");
    } catch (RelativeNameException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SOARecordTest.java" startline="142" endline="151">
public void test_10arg_relative_admin () {
    try {
        new SOARecord (m_an, DClass.IN, m_ttl, m_host, m_rn, m_serial, m_refresh, m_retry, m_expire, m_minimum);
        fail ("RelativeNameException not thrown");
    } catch (RelativeNameException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SOARecordTest.java" startline="153" endline="162">
public void test_10arg_negative_serial () {
    try {
        new SOARecord (m_an, DClass.IN, m_ttl, m_host, m_admin, - 1, m_refresh, m_retry, m_expire, m_minimum);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SOARecordTest.java" startline="164" endline="173">
public void test_10arg_toobig_serial () {
    try {
        new SOARecord (m_an, DClass.IN, m_ttl, m_host, m_admin, 0x100000000L, m_refresh, m_retry, m_expire, m_minimum);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SOARecordTest.java" startline="175" endline="184">
public void test_10arg_negative_refresh () {
    try {
        new SOARecord (m_an, DClass.IN, m_ttl, m_host, m_admin, m_serial, - 1, m_retry, m_expire, m_minimum);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SOARecordTest.java" startline="186" endline="195">
public void test_10arg_toobig_refresh () {
    try {
        new SOARecord (m_an, DClass.IN, m_ttl, m_host, m_admin, m_serial, 0x100000000L, m_retry, m_expire, m_minimum);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SOARecordTest.java" startline="197" endline="206">
public void test_10arg_negative_retry () {
    try {
        new SOARecord (m_an, DClass.IN, m_ttl, m_host, m_admin, m_serial, m_refresh, - 1, m_expire, m_minimum);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SOARecordTest.java" startline="208" endline="217">
public void test_10arg_toobig_retry () {
    try {
        new SOARecord (m_an, DClass.IN, m_ttl, m_host, m_admin, m_serial, m_refresh, 0x100000000L, m_expire, m_minimum);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SOARecordTest.java" startline="219" endline="228">
public void test_10arg_negative_expire () {
    try {
        new SOARecord (m_an, DClass.IN, m_ttl, m_host, m_admin, m_serial, m_refresh, m_retry, - 1, m_minimum);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SOARecordTest.java" startline="230" endline="239">
public void test_10arg_toobig_expire () {
    try {
        new SOARecord (m_an, DClass.IN, m_ttl, m_host, m_admin, m_serial, m_refresh, m_retry, 0x100000000L, m_minimum);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SOARecordTest.java" startline="241" endline="250">
public void test_10arg_negative_minimun () {
    try {
        new SOARecord (m_an, DClass.IN, m_ttl, m_host, m_admin, m_serial, m_refresh, m_retry, m_expire, - 1);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SOARecordTest.java" startline="252" endline="261">
public void test_10arg_toobig_minimum () {
    try {
        new SOARecord (m_an, DClass.IN, m_ttl, m_host, m_admin, m_serial, m_refresh, m_retry, m_expire, 0x100000000L);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SOARecordTest.java" startline="269" endline="279">
protected void setUp () throws TextParseException, UnknownHostException {
    m_host = Name.fromString ("M.h.N.");
    m_admin = Name.fromString ("M.a.n.");
    m_serial = 0xABCDEF12L;
    m_refresh = 0xCDEF1234L;
    m_retry = 0xEF123456L;
    m_expire = 0x12345678L;
    m_minimum = 0x3456789AL;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SOARecordTest.java" startline="281" endline="304">
public void test () throws IOException {
    byte [] raw = new byte [] {1, 'm', 1, 'h', 1, 'n', 0, 1, 'm', 1, 'a', 1, 'n', 0, (byte) 0xAB, (byte) 0xCD, (byte) 0xEF, (byte) 0x12, (byte) 0xCD, (byte) 0xEF, (byte) 0x12, (byte) 0x34, (byte) 0xEF, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x9A};
    DNSInput di = new DNSInput (raw);
    SOARecord ar = new SOARecord ();
    ar.rrFromWire (di);
    assertEquals (m_host, ar.getHost ());
    assertEquals (m_admin, ar.getAdmin ());
    assertEquals (m_serial, ar.getSerial ());
    assertEquals (m_refresh, ar.getRefresh ());
    assertEquals (m_retry, ar.getRetry ());
    assertEquals (m_expire, ar.getExpire ());
    assertEquals (m_minimum, ar.getMinimum ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SOARecordTest.java" startline="312" endline="323">
protected void setUp () throws TextParseException, UnknownHostException {
    m_origin = Name.fromString ("O.");
    m_host = Name.fromString ("M.h", m_origin);
    m_admin = Name.fromString ("M.a.n.");
    m_serial = 0xABCDEF12L;
    m_refresh = 0xCDEF1234L;
    m_retry = 0xEF123456L;
    m_expire = 0x12345678L;
    m_minimum = 0x3456789AL;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SOARecordTest.java" startline="325" endline="344">
public void test_valid () throws IOException {
    Tokenizer t = new Tokenizer ("M.h " + m_admin + " " + m_serial + " " + m_refresh + " " + m_retry + " " + m_expire + " " + m_minimum);
    SOARecord ar = new SOARecord ();
    ar.rdataFromString (t, m_origin);
    assertEquals (m_host, ar.getHost ());
    assertEquals (m_admin, ar.getAdmin ());
    assertEquals (m_serial, ar.getSerial ());
    assertEquals (m_refresh, ar.getRefresh ());
    assertEquals (m_retry, ar.getRetry ());
    assertEquals (m_expire, ar.getExpire ());
    assertEquals (m_minimum, ar.getMinimum ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SOARecordTest.java" startline="346" endline="361">
public void test_relative_name () throws IOException {
    Tokenizer t = new Tokenizer ("M.h " + m_admin + " " + m_serial + " " + m_refresh + " " + m_retry + " " + m_expire + " " + m_minimum);
    SOARecord ar = new SOARecord ();
    try {
        ar.rdataFromString (t, null);
        fail ("RelativeNameException not thrown");
    } catch (RelativeNameException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SOARecordTest.java" startline="369" endline="380">
protected void setUp () throws TextParseException {
    m_an = Name.fromString ("My.absolute.name.");
    m_ttl = 0x13A8;
    m_host = Name.fromString ("M.h.N.");
    m_admin = Name.fromString ("M.a.n.");
    m_serial = 0xABCDEF12L;
    m_refresh = 0xCDEF1234L;
    m_retry = 0xEF123456L;
    m_expire = 0x12345678L;
    m_minimum = 0x3456789AL;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SOARecordTest.java" startline="382" endline="393">
public void test_singleLine () {
    SOARecord ar = new SOARecord (m_an, DClass.IN, m_ttl, m_host, m_admin, m_serial, m_refresh, m_retry, m_expire, m_minimum);
    String exp = m_host + " " + m_admin + " " + m_serial + " " + m_refresh + " " + m_retry + " " + m_expire + " " + m_minimum;
    String out = ar.rrToString ();
    assertEquals (exp, out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SOARecordTest.java" startline="395" endline="412">
public void test_multiLine () {
    SOARecord ar = new SOARecord (m_an, DClass.IN, m_ttl, m_host, m_admin, m_serial, m_refresh, m_retry, m_expire, m_minimum);
    String re = "^.*\\(\\n" + "\\s*" + m_serial + "\\s*;\\s*serial\\n" + "\\s*" + m_refresh + "\\s*;\\s*refresh\\n" + "\\s*" + m_retry + "\\s*;\\s*retry\\n" + "\\s*" + m_expire + "\\s*;\\s*expire\\n" + "\\s*" + m_minimum + "\\s*\\)\\s*;\\s*minimum$";
    Options.set ("multiline");
    String out = ar.rrToString ();
    Options.unset ("multiline");
    assertTrue (out.matches (re));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SOARecordTest.java" startline="420" endline="431">
protected void setUp () throws TextParseException {
    m_an = Name.fromString ("My.Abs.Name.");
    m_ttl = 0x13A8;
    m_host = Name.fromString ("M.h.N.");
    m_admin = Name.fromString ("M.a.n.");
    m_serial = 0xABCDEF12L;
    m_refresh = 0xCDEF1234L;
    m_retry = 0xEF123456L;
    m_expire = 0x12345678L;
    m_minimum = 0x3456789AL;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SOARecordTest.java" startline="433" endline="451">
public void test_canonical () {
    byte [] exp = new byte [] {1, 'm', 1, 'h', 1, 'n', 0, 1, 'm', 1, 'a', 1, 'n', 0, (byte) 0xAB, (byte) 0xCD, (byte) 0xEF, (byte) 0x12, (byte) 0xCD, (byte) 0xEF, (byte) 0x12, (byte) 0x34, (byte) 0xEF, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x9A};
    SOARecord ar = new SOARecord (m_an, DClass.IN, m_ttl, m_host, m_admin, m_serial, m_refresh, m_retry, m_expire, m_minimum);
    DNSOutput o = new DNSOutput ();
    ar.rrToWire (o, null, true);
    assertTrue (Arrays.equals (exp, o.toByteArray ()));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SOARecordTest.java" startline="453" endline="471">
public void test_case_sensitive () {
    byte [] exp = new byte [] {1, 'M', 1, 'h', 1, 'N', 0, 1, 'M', 1, 'a', 1, 'n', 0, (byte) 0xAB, (byte) 0xCD, (byte) 0xEF, (byte) 0x12, (byte) 0xCD, (byte) 0xEF, (byte) 0x12, (byte) 0x34, (byte) 0xEF, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x9A};
    SOARecord ar = new SOARecord (m_an, DClass.IN, m_ttl, m_host, m_admin, m_serial, m_refresh, m_retry, m_expire, m_minimum);
    DNSOutput o = new DNSOutput ();
    ar.rrToWire (o, null, false);
    assertTrue (Arrays.equals (exp, o.toByteArray ()));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SOARecordTest.java" startline="474" endline="483">
public static Test suite () {
    TestSuite s = new TestSuite ();
    s.addTestSuite (Test_init.class);
    s.addTestSuite (Test_rrFromWire.class);
    s.addTestSuite (Test_rdataFromString.class);
    s.addTestSuite (Test_rrToString.class);
    s.addTestSuite (Test_rrToWire.class);
    return s;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/GPOSRecordTest.java" startline="45" endline="52">
public void test_ctor_0arg () {
    GPOSRecord gr = new GPOSRecord ();
    assertNull (gr.getName ());
    assertEquals (0, gr.getType ());
    assertEquals (0, gr.getDClass ());
    assertEquals (0, gr.getTTL ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/GPOSRecordTest.java" startline="54" endline="59">
public void test_getObject () {
    GPOSRecord gr = new GPOSRecord ();
    Record r = gr.getObject ();
    assertTrue (r instanceof GPOSRecord);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/GPOSRecordTest.java" startline="67" endline="74">
protected void setUp () throws TextParseException {
    m_n = Name.fromString ("The.Name.");
    m_ttl = 0xABCDL;
    m_lat = - 10.43;
    m_long = 76.12;
    m_alt = 100.101;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/GPOSRecordTest.java" startline="76" endline="90">
public void test_basic () throws TextParseException {
    GPOSRecord gr = new GPOSRecord (m_n, DClass.IN, m_ttl, m_long, m_lat, m_alt);
    assertEquals (m_n, gr.getName ());
    assertEquals (DClass.IN, gr.getDClass ());
    assertEquals (Type.GPOS, gr.getType ());
    assertEquals (m_ttl, gr.getTTL ());
    assertEquals (new Double (m_long), new Double (gr.getLongitude ()));
    assertEquals (new Double (m_lat), new Double (gr.getLatitude ()));
    assertEquals (new Double (m_alt), new Double (gr.getAltitude ()));
    assertEquals (new Double (m_long).toString (), gr.getLongitudeString ());
    assertEquals (new Double (m_lat).toString (), gr.getLatitudeString ());
    assertEquals (new Double (m_alt).toString (), gr.getAltitudeString ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/GPOSRecordTest.java" startline="92" endline="100">
public void test_toosmall_longitude () throws TextParseException {
    try {
        new GPOSRecord (m_n, DClass.IN, m_ttl, - 90.001, m_lat, m_alt);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/GPOSRecordTest.java" startline="102" endline="110">
public void test_toobig_longitude () throws TextParseException {
    try {
        new GPOSRecord (m_n, DClass.IN, m_ttl, 90.001, m_lat, m_alt);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/GPOSRecordTest.java" startline="112" endline="120">
public void test_toosmall_latitude () throws TextParseException {
    try {
        new GPOSRecord (m_n, DClass.IN, m_ttl, m_long, - 180.001, m_alt);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/GPOSRecordTest.java" startline="122" endline="130">
public void test_toobig_latitude () throws TextParseException {
    try {
        new GPOSRecord (m_n, DClass.IN, m_ttl, m_long, 180.001, m_alt);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/GPOSRecordTest.java" startline="132" endline="141">
public void test_invalid_string () {
    try {
        new GPOSRecord (m_n, DClass.IN, m_ttl, new Double (m_long).toString (), "120.\\00ABC", new Double (m_alt).toString ());
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/GPOSRecordTest.java" startline="150" endline="157">
protected void setUp () throws TextParseException {
    m_n = Name.fromString ("The.Name.");
    m_ttl = 0xABCDL;
    m_lat = - 10.43;
    m_long = 76.12;
    m_alt = 100.101;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/GPOSRecordTest.java" startline="159" endline="175">
public void test_basic () throws TextParseException {
    GPOSRecord gr = new GPOSRecord (m_n, DClass.IN, m_ttl, new Double (m_long).toString (), new Double (m_lat).toString (), new Double (m_alt).toString ());
    assertEquals (m_n, gr.getName ());
    assertEquals (DClass.IN, gr.getDClass ());
    assertEquals (Type.GPOS, gr.getType ());
    assertEquals (m_ttl, gr.getTTL ());
    assertEquals (new Double (m_long), new Double (gr.getLongitude ()));
    assertEquals (new Double (m_lat), new Double (gr.getLatitude ()));
    assertEquals (new Double (m_alt), new Double (gr.getAltitude ()));
    assertEquals (new Double (m_long).toString (), gr.getLongitudeString ());
    assertEquals (new Double (m_lat).toString (), gr.getLatitudeString ());
    assertEquals (new Double (m_alt).toString (), gr.getAltitudeString ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/GPOSRecordTest.java" startline="177" endline="186">
public void test_toosmall_longitude () throws TextParseException {
    try {
        new GPOSRecord (m_n, DClass.IN, m_ttl, "-90.001", new Double (m_lat).toString (), new Double (m_alt).toString ());
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/GPOSRecordTest.java" startline="188" endline="197">
public void test_toobig_longitude () throws TextParseException {
    try {
        new GPOSRecord (m_n, DClass.IN, m_ttl, "90.001", new Double (m_lat).toString (), new Double (m_alt).toString ());
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/GPOSRecordTest.java" startline="199" endline="208">
public void test_toosmall_latitude () throws TextParseException {
    try {
        new GPOSRecord (m_n, DClass.IN, m_ttl, new Double (m_long).toString (), "-180.001", new Double (m_alt).toString ());
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/GPOSRecordTest.java" startline="210" endline="218">
public void test_toobig_latitude () throws TextParseException {
    try {
        new GPOSRecord (m_n, DClass.IN, m_ttl, new Double (m_long).toString (), "180.001", new Double (m_alt).toString ());
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/GPOSRecordTest.java" startline="223" endline="235">
public void test_basic () throws IOException {
    byte [] raw = new byte [] {5, '-', '8', '.', '1', '2', 6, '1', '2', '3', '.', '0', '7', 3, '0', '.', '0'};
    DNSInput in = new DNSInput (raw);
    GPOSRecord gr = new GPOSRecord ();
    gr.rrFromWire (in);
    assertEquals (new Double (- 8.12), new Double (gr.getLongitude ()));
    assertEquals (new Double (123.07), new Double (gr.getLatitude ()));
    assertEquals (new Double (0.0), new Double (gr.getAltitude ()));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/GPOSRecordTest.java" startline="237" endline="250">
public void test_longitude_toosmall () throws IOException {
    byte [] raw = new byte [] {5, '-', '9', '5', '.', '0', 6, '1', '2', '3', '.', '0', '7', 3, '0', '.', '0'};
    DNSInput in = new DNSInput (raw);
    GPOSRecord gr = new GPOSRecord ();
    try {
        gr.rrFromWire (in);
        fail ("WireParseException not thrown");
    } catch (WireParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/GPOSRecordTest.java" startline="252" endline="265">
public void test_longitude_toobig () throws IOException {
    byte [] raw = new byte [] {5, '1', '8', '5', '.', '0', 6, '1', '2', '3', '.', '0', '7', 3, '0', '.', '0'};
    DNSInput in = new DNSInput (raw);
    GPOSRecord gr = new GPOSRecord ();
    try {
        gr.rrFromWire (in);
        fail ("WireParseException not thrown");
    } catch (WireParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/GPOSRecordTest.java" startline="267" endline="280">
public void test_latitude_toosmall () throws IOException {
    byte [] raw = new byte [] {5, '-', '8', '5', '.', '0', 6, '-', '1', '9', '0', '.', '0', 3, '0', '.', '0'};
    DNSInput in = new DNSInput (raw);
    GPOSRecord gr = new GPOSRecord ();
    try {
        gr.rrFromWire (in);
        fail ("WireParseException not thrown");
    } catch (WireParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/GPOSRecordTest.java" startline="282" endline="295">
public void test_latitude_toobig () throws IOException {
    byte [] raw = new byte [] {5, '-', '8', '5', '.', '0', 6, '2', '1', '9', '0', '.', '0', 3, '0', '.', '0'};
    DNSInput in = new DNSInput (raw);
    GPOSRecord gr = new GPOSRecord ();
    try {
        gr.rrFromWire (in);
        fail ("WireParseException not thrown");
    } catch (WireParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/GPOSRecordTest.java" startline="300" endline="309">
public void test_basic () throws IOException {
    Tokenizer t = new Tokenizer ("10.45 171.121212 1010787");
    GPOSRecord gr = new GPOSRecord ();
    gr.rdataFromString (t, null);
    assertEquals (new Double (10.45), new Double (gr.getLongitude ()));
    assertEquals (new Double (171.121212), new Double (gr.getLatitude ()));
    assertEquals (new Double (1010787), new Double (gr.getAltitude ()));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/GPOSRecordTest.java" startline="311" endline="321">
public void test_longitude_toosmall () throws IOException {
    Tokenizer t = new Tokenizer ("-100.390 171.121212 1010787");
    GPOSRecord gr = new GPOSRecord ();
    try {
        gr.rdataFromString (t, null);
        fail ("IOException not thrown");
    } catch (IOException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/GPOSRecordTest.java" startline="323" endline="333">
public void test_longitude_toobig () throws IOException {
    Tokenizer t = new Tokenizer ("90.00001 171.121212 1010787");
    GPOSRecord gr = new GPOSRecord ();
    try {
        gr.rdataFromString (t, null);
        fail ("IOException not thrown");
    } catch (IOException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/GPOSRecordTest.java" startline="335" endline="345">
public void test_latitude_toosmall () throws IOException {
    Tokenizer t = new Tokenizer ("0.0 -180.01 1010787");
    GPOSRecord gr = new GPOSRecord ();
    try {
        gr.rdataFromString (t, null);
        fail ("IOException not thrown");
    } catch (IOException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/GPOSRecordTest.java" startline="347" endline="357">
public void test_latitude_toobig () throws IOException {
    Tokenizer t = new Tokenizer ("0.0 180.01 1010787");
    GPOSRecord gr = new GPOSRecord ();
    try {
        gr.rdataFromString (t, null);
        fail ("IOException not thrown");
    } catch (IOException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/GPOSRecordTest.java" startline="359" endline="366">
public void test_invalid_string () throws IOException {
    Tokenizer t = new Tokenizer ("1.0 2.0 \\435");
    try {
        GPOSRecord gr = new GPOSRecord ();
        gr.rdataFromString (t, null);
    } catch (TextParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/GPOSRecordTest.java" startline="369" endline="376">
public void test_rrToString () throws TextParseException {
    String exp = "\"10.45\" \"171.121212\" \"1010787.0\"";
    GPOSRecord gr = new GPOSRecord (Name.fromString ("The.Name."), DClass.IN, 0x123, 10.45, 171.121212, 1010787);
    assertEquals (exp, gr.rrToString ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/GPOSRecordTest.java" startline="378" endline="396">
public void test_rrToWire () throws TextParseException {
    GPOSRecord gr = new GPOSRecord (Name.fromString ("The.Name."), DClass.IN, 0x123, - 10.45, 120.0, 111.0);
    byte [] exp = new byte [] {6, '-', '1', '0', '.', '4', '5', 5, '1', '2', '0', '.', '0', 5, '1', '1', '1', '.', '0'};
    DNSOutput out = new DNSOutput ();
    gr.rrToWire (out, null, true);
    byte [] bar = out.toByteArray ();
    assertEquals (exp.length, bar.length);
    for (int i = 0;
    i < exp.length; ++ i) {
        assertEquals ("i=" + i, exp [i], bar [i]);
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/GPOSRecordTest.java" startline="398" endline="407">
public static Test suite () {
    TestSuite s = new TestSuite ();
    s.addTestSuite (Test_Ctor_6arg_doubles.class);
    s.addTestSuite (Test_Ctor_6arg_Strings.class);
    s.addTestSuite (Test_rrFromWire.class);
    s.addTestSuite (Test_rdataFromString.class);
    s.addTestSuite (GPOSRecordTest.class);
    return s;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/EmptyRecordTest.java" startline="45" endline="52">
public void test_ctor () throws UnknownHostException {
    EmptyRecord ar = new EmptyRecord ();
    assertNull (ar.getName ());
    assertEquals (0, ar.getType ());
    assertEquals (0, ar.getDClass ());
    assertEquals (0, ar.getTTL ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/EmptyRecordTest.java" startline="54" endline="59">
public void test_getObject () {
    EmptyRecord ar = new EmptyRecord ();
    Record r = ar.getObject ();
    assertTrue (r instanceof EmptyRecord);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/EmptyRecordTest.java" startline="61" endline="73">
public void test_rrFromWire () throws IOException {
    DNSInput i = new DNSInput (new byte [] {1, 2, 3, 4, 5});
    i.jump (3);
    EmptyRecord er = new EmptyRecord ();
    er.rrFromWire (i);
    assertEquals (3, i.current ());
    assertNull (er.getName ());
    assertEquals (0, er.getType ());
    assertEquals (0, er.getDClass ());
    assertEquals (0, er.getTTL ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/EmptyRecordTest.java" startline="75" endline="86">
public void test_rdataFromString () throws IOException {
    Tokenizer t = new Tokenizer ("these are the tokens");
    EmptyRecord er = new EmptyRecord ();
    er.rdataFromString (t, null);
    assertNull (er.getName ());
    assertEquals (0, er.getType ());
    assertEquals (0, er.getDClass ());
    assertEquals (0, er.getTTL ());
    assertEquals ("these", t.getString ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/EmptyRecordTest.java" startline="88" endline="92">
public void test_rrToString () {
    EmptyRecord er = new EmptyRecord ();
    assertEquals ("", er.rrToString ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/EmptyRecordTest.java" startline="94" endline="100">
public void test_rrToWire () {
    EmptyRecord er = new EmptyRecord ();
    DNSOutput out = new DNSOutput ();
    er.rrToWire (out, null, true);
    assertEquals (0, out.toByteArray ().length);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/APLRecordTest.java" startline="55" endline="60">
protected void setUp () throws TextParseException, UnknownHostException {
    m_addr4 = InetAddress.getByName ("193.160.232.5");
    m_addr6 = InetAddress.getByName ("2001:db8:85a3:8d3:1319:8a2e:370:7334");
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/APLRecordTest.java" startline="62" endline="69">
public void test_valid_IPv4 () {
    Element el = new Element (true, m_addr4, 16);
    assertEquals (Address.IPv4, el.family);
    assertEquals (true, el.negative);
    assertEquals (m_addr4, el.address);
    assertEquals (16, el.prefixLength);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/APLRecordTest.java" startline="71" endline="78">
public void test_invalid_IPv4 () {
    try {
        new Element (true, m_addr4, 33);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/APLRecordTest.java" startline="80" endline="87">
public void test_valid_IPv6 () {
    Element el = new Element (false, m_addr6, 74);
    assertEquals (Address.IPv6, el.family);
    assertEquals (false, el.negative);
    assertEquals (m_addr6, el.address);
    assertEquals (74, el.prefixLength);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/APLRecordTest.java" startline="89" endline="96">
public void test_invalid_IPv6 () {
    try {
        new Element (true, m_addr6, 129);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/APLRecordTest.java" startline="111" endline="131">
protected void setUp () throws TextParseException, UnknownHostException {
    m_an = Name.fromString ("My.Absolute.Name.");
    m_rn = Name.fromString ("My.Relative.Name");
    m_ttl = 0x13579;
    m_addr4_string = "193.160.232.5";
    m_addr4 = InetAddress.getByName (m_addr4_string);
    m_addr4_bytes = m_addr4.getAddress ();
    m_addr6_string = "2001:db8:85a3:8d3:1319:8a2e:370:7334";
    m_addr6 = InetAddress.getByName (m_addr6_string);
    m_addr6_bytes = m_addr6.getAddress ();
    m_elements = new ArrayList (2);
    Element e = new Element (true, m_addr4, 12);
    m_elements.add (e);
    e = new Element (false, m_addr6, 64);
    m_elements.add (e);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/APLRecordTest.java" startline="133" endline="141">
public void test_0arg () throws UnknownHostException {
    APLRecord ar = new APLRecord ();
    assertNull (ar.getName ());
    assertEquals (0, ar.getType ());
    assertEquals (0, ar.getDClass ());
    assertEquals (0, ar.getTTL ());
    assertNull (ar.getElements ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/APLRecordTest.java" startline="143" endline="148">
public void test_getObject () {
    APLRecord ar = new APLRecord ();
    Record r = ar.getObject ();
    assertTrue (r instanceof APLRecord);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/APLRecordTest.java" startline="150" endline="158">
public void test_4arg_basic () {
    APLRecord ar = new APLRecord (m_an, DClass.IN, m_ttl, m_elements);
    assertEquals (m_an, ar.getName ());
    assertEquals (Type.APL, ar.getType ());
    assertEquals (DClass.IN, ar.getDClass ());
    assertEquals (m_ttl, ar.getTTL ());
    assertEquals (m_elements, ar.getElements ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/APLRecordTest.java" startline="160" endline="164">
public void test_4arg_empty_elements () {
    APLRecord ar = new APLRecord (m_an, DClass.IN, m_ttl, new ArrayList ());
    assertEquals (new ArrayList (), ar.getElements ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/APLRecordTest.java" startline="166" endline="173">
public void test_4arg_relative_name () {
    try {
        new APLRecord (m_rn, DClass.IN, m_ttl, m_elements);
        fail ("RelativeNameException not thrown");
    } catch (RelativeNameException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/APLRecordTest.java" startline="175" endline="184">
public void test_4arg_invalid_elements () {
    m_elements = new ArrayList ();
    m_elements.add (new Object ());
    try {
        new APLRecord (m_an, DClass.IN, m_ttl, m_elements);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/APLRecordTest.java" startline="194" endline="202">
protected void setUp () throws TextParseException, UnknownHostException {
    m_addr4 = InetAddress.getByName ("193.160.232.5");
    m_addr4_bytes = m_addr4.getAddress ();
    m_addr6 = InetAddress.getByName ("2001:db8:85a3:8d3:1319:8a2e:370:7334");
    m_addr6_bytes = m_addr6.getAddress ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/APLRecordTest.java" startline="204" endline="217">
public void test_validIPv4 () throws IOException {
    byte [] raw = new byte [] {0, 1, 8, (byte) 0x84, m_addr4_bytes [0], m_addr4_bytes [1], m_addr4_bytes [2], m_addr4_bytes [3]};
    DNSInput di = new DNSInput (raw);
    APLRecord ar = new APLRecord ();
    ar.rrFromWire (di);
    ArrayList exp = new ArrayList ();
    exp.add (new Element (true, m_addr4, 8));
    assertEquals (exp, ar.getElements ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/APLRecordTest.java" startline="219" endline="234">
public void test_validIPv4_short_address () throws IOException {
    byte [] raw = new byte [] {0, 1, 20, (byte) 0x83, m_addr4_bytes [0], m_addr4_bytes [1], m_addr4_bytes [2]};
    DNSInput di = new DNSInput (raw);
    APLRecord ar = new APLRecord ();
    ar.rrFromWire (di);
    InetAddress a = InetAddress.getByName ("193.160.232.0");
    ArrayList exp = new ArrayList ();
    exp.add (new Element (true, a, 20));
    assertEquals (exp, ar.getElements ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/APLRecordTest.java" startline="236" endline="249">
public void test_invalid_IPv4_prefix () throws IOException {
    byte [] raw = new byte [] {0, 1, 33, (byte) 0x84, m_addr4_bytes [0], m_addr4_bytes [1], m_addr4_bytes [2], m_addr4_bytes [3]};
    DNSInput di = new DNSInput (raw);
    APLRecord ar = new APLRecord ();
    try {
        ar.rrFromWire (di);
        fail ("WireParseException not thrown");
    } catch (WireParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/APLRecordTest.java" startline="251" endline="264">
public void test_invalid_IPv4_length () throws IOException {
    byte [] raw = new byte [] {0, 1, 8, (byte) 0x85, m_addr4_bytes [0], m_addr4_bytes [1], m_addr4_bytes [2], m_addr4_bytes [3], 10};
    DNSInput di = new DNSInput (raw);
    APLRecord ar = new APLRecord ();
    try {
        ar.rrFromWire (di);
        fail ("WireParseException not thrown");
    } catch (WireParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/APLRecordTest.java" startline="266" endline="284">
public void test_multiple_validIPv4 () throws IOException {
    byte [] raw = new byte [] {0, 1, 8, (byte) 0x84, m_addr4_bytes [0], m_addr4_bytes [1], m_addr4_bytes [2], m_addr4_bytes [3], 0, 1, 30, (byte) 0x4, m_addr4_bytes [0], m_addr4_bytes [1], m_addr4_bytes [2], m_addr4_bytes [3],};
    DNSInput di = new DNSInput (raw);
    APLRecord ar = new APLRecord ();
    ar.rrFromWire (di);
    ArrayList exp = new ArrayList ();
    exp.add (new Element (true, m_addr4, 8));
    exp.add (new Element (false, m_addr4, 30));
    assertEquals (exp, ar.getElements ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/APLRecordTest.java" startline="286" endline="305">
public void test_validIPv6 () throws IOException {
    byte [] raw = new byte [] {0, 2, (byte) 115, (byte) 0x10, m_addr6_bytes [0], m_addr6_bytes [1], m_addr6_bytes [2], m_addr6_bytes [3], m_addr6_bytes [4], m_addr6_bytes [5], m_addr6_bytes [6], m_addr6_bytes [7], m_addr6_bytes [8], m_addr6_bytes [9], m_addr6_bytes [10], m_addr6_bytes [11], m_addr6_bytes [12], m_addr6_bytes [13], m_addr6_bytes [14], m_addr6_bytes [15]};
    DNSInput di = new DNSInput (raw);
    APLRecord ar = new APLRecord ();
    ar.rrFromWire (di);
    ArrayList exp = new ArrayList ();
    exp.add (new Element (false, m_addr6, 115));
    assertEquals (exp, ar.getElements ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/APLRecordTest.java" startline="307" endline="325">
public void test_valid_nonIP () throws IOException {
    byte [] raw = new byte [] {0, 3, (byte) 130, (byte) 0x85, 1, 2, 3, 4, 5};
    DNSInput di = new DNSInput (raw);
    APLRecord ar = new APLRecord ();
    ar.rrFromWire (di);
    List l = ar.getElements ();
    assertEquals (1, l.size ());
    Element el = (Element) l.get (0);
    assertEquals (3, el.family);
    assertEquals (true, el.negative);
    assertEquals (130, el.prefixLength);
    assertTrue (Arrays.equals (new byte [] {1, 2, 3, 4, 5}, (byte []) el.address));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/APLRecordTest.java" startline="337" endline="347">
protected void setUp () throws TextParseException, UnknownHostException {
    m_addr4_string = "193.160.232.5";
    m_addr4 = InetAddress.getByName (m_addr4_string);
    m_addr4_bytes = m_addr4.getAddress ();
    m_addr6_string = "2001:db8:85a3:8d3:1319:8a2e:370:7334";
    m_addr6 = InetAddress.getByName (m_addr6_string);
    m_addr6_bytes = m_addr6.getAddress ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/APLRecordTest.java" startline="349" endline="362">
public void test_validIPv4 () throws IOException {
    Tokenizer t = new Tokenizer ("1:" + m_addr4_string + "/11\n");
    APLRecord ar = new APLRecord ();
    ar.rdataFromString (t, null);
    ArrayList exp = new ArrayList ();
    exp.add (new Element (false, m_addr4, 11));
    assertEquals (exp, ar.getElements ());
    assertEquals (Tokenizer.EOL, t.get ().type);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/APLRecordTest.java" startline="364" endline="375">
public void test_valid_multi () throws IOException {
    Tokenizer t = new Tokenizer ("1:" + m_addr4_string + "/11 !2:" + m_addr6_string + "/100");
    APLRecord ar = new APLRecord ();
    ar.rdataFromString (t, null);
    ArrayList exp = new ArrayList ();
    exp.add (new Element (false, m_addr4, 11));
    exp.add (new Element (true, m_addr6, 100));
    assertEquals (exp, ar.getElements ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/APLRecordTest.java" startline="377" endline="390">
public void test_validIPv6 () throws IOException {
    Tokenizer t = new Tokenizer ("!2:" + m_addr6_string + "/36\n");
    APLRecord ar = new APLRecord ();
    ar.rdataFromString (t, null);
    ArrayList exp = new ArrayList ();
    exp.add (new Element (true, m_addr6, 36));
    assertEquals (exp, ar.getElements ());
    assertEquals (Tokenizer.EOL, t.get ().type);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/APLRecordTest.java" startline="392" endline="401">
public void test_no_colon () throws IOException {
    Tokenizer t = new Tokenizer ("!1192.68.0.1/20");
    APLRecord ar = new APLRecord ();
    try {
        ar.rdataFromString (t, null);
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/APLRecordTest.java" startline="403" endline="412">
public void test_colon_and_slash_swapped () throws IOException {
    Tokenizer t = new Tokenizer ("!1/192.68.0.1:20");
    APLRecord ar = new APLRecord ();
    try {
        ar.rdataFromString (t, null);
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/APLRecordTest.java" startline="414" endline="423">
public void test_no_slash () throws IOException {
    Tokenizer t = new Tokenizer ("!1:192.68.0.1|20");
    APLRecord ar = new APLRecord ();
    try {
        ar.rdataFromString (t, null);
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/APLRecordTest.java" startline="425" endline="434">
public void test_empty_family () throws IOException {
    Tokenizer t = new Tokenizer ("!:192.68.0.1/20");
    APLRecord ar = new APLRecord ();
    try {
        ar.rdataFromString (t, null);
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/APLRecordTest.java" startline="436" endline="445">
public void test_malformed_family () throws IOException {
    Tokenizer t = new Tokenizer ("family:192.68.0.1/20");
    APLRecord ar = new APLRecord ();
    try {
        ar.rdataFromString (t, null);
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/APLRecordTest.java" startline="447" endline="456">
public void test_invalid_family () throws IOException {
    Tokenizer t = new Tokenizer ("3:192.68.0.1/20");
    APLRecord ar = new APLRecord ();
    try {
        ar.rdataFromString (t, null);
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/APLRecordTest.java" startline="458" endline="467">
public void test_empty_prefix () throws IOException {
    Tokenizer t = new Tokenizer ("1:192.68.0.1/");
    APLRecord ar = new APLRecord ();
    try {
        ar.rdataFromString (t, null);
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/APLRecordTest.java" startline="469" endline="478">
public void test_malformed_prefix () throws IOException {
    Tokenizer t = new Tokenizer ("1:192.68.0.1/prefix");
    APLRecord ar = new APLRecord ();
    try {
        ar.rdataFromString (t, null);
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/APLRecordTest.java" startline="480" endline="489">
public void test_invalid_prefix () throws IOException {
    Tokenizer t = new Tokenizer ("1:192.68.0.1/33");
    APLRecord ar = new APLRecord ();
    try {
        ar.rdataFromString (t, null);
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/APLRecordTest.java" startline="491" endline="500">
public void test_empty_address () throws IOException {
    Tokenizer t = new Tokenizer ("1:/33");
    APLRecord ar = new APLRecord ();
    try {
        ar.rdataFromString (t, null);
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/APLRecordTest.java" startline="502" endline="511">
public void test_malformed_address () throws IOException {
    Tokenizer t = new Tokenizer ("1:A.B.C.D/33");
    APLRecord ar = new APLRecord ();
    try {
        ar.rdataFromString (t, null);
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/APLRecordTest.java" startline="526" endline="546">
protected void setUp () throws TextParseException, UnknownHostException {
    m_an = Name.fromString ("My.Absolute.Name.");
    m_rn = Name.fromString ("My.Relative.Name");
    m_ttl = 0x13579;
    m_addr4_string = "193.160.232.5";
    m_addr4 = InetAddress.getByName (m_addr4_string);
    m_addr4_bytes = m_addr4.getAddress ();
    m_addr6_string = "2001:db8:85a3:8d3:1319:8a2e:370:7334";
    m_addr6 = InetAddress.getByName (m_addr6_string);
    m_addr6_bytes = m_addr6.getAddress ();
    m_elements = new ArrayList (2);
    Element e = new Element (true, m_addr4, 12);
    m_elements.add (e);
    e = new Element (false, m_addr6, 64);
    m_elements.add (e);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/APLRecordTest.java" startline="548" endline="553">
public void test () {
    APLRecord ar = new APLRecord (m_an, DClass.IN, m_ttl, m_elements);
    assertEquals ("!1:" + m_addr4_string + "/12 2:" + m_addr6_string + "/64", ar.rrToString ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/APLRecordTest.java" startline="568" endline="588">
protected void setUp () throws TextParseException, UnknownHostException {
    m_an = Name.fromString ("My.Absolute.Name.");
    m_rn = Name.fromString ("My.Relative.Name");
    m_ttl = 0x13579;
    m_addr4_string = "193.160.232.5";
    m_addr4 = InetAddress.getByName (m_addr4_string);
    m_addr4_bytes = m_addr4.getAddress ();
    m_addr6_string = "2001:db8:85a3:8d3:1319:8a2e:370:7334";
    m_addr6 = InetAddress.getByName (m_addr6_string);
    m_addr6_bytes = m_addr6.getAddress ();
    m_elements = new ArrayList (2);
    Element e = new Element (true, m_addr4, 12);
    m_elements.add (e);
    e = new Element (false, m_addr6, 64);
    m_elements.add (e);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/APLRecordTest.java" startline="590" endline="597">
public void test_empty () {
    APLRecord ar = new APLRecord (m_an, DClass.IN, m_ttl, new ArrayList ());
    DNSOutput dout = new DNSOutput ();
    ar.rrToWire (dout, null, true);
    assertTrue (Arrays.equals (new byte [0], dout.toByteArray ()));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/APLRecordTest.java" startline="599" endline="620">
public void test_basic () {
    APLRecord ar = new APLRecord (m_an, DClass.IN, m_ttl, m_elements);
    byte [] exp = new byte [] {0, 1, 12, (byte) 0x84, m_addr4_bytes [0], m_addr4_bytes [1], m_addr4_bytes [2], m_addr4_bytes [3], 0, 2, 64, 0x10, m_addr6_bytes [0], m_addr6_bytes [1], m_addr6_bytes [2], m_addr6_bytes [3], m_addr6_bytes [4], m_addr6_bytes [5], m_addr6_bytes [6], m_addr6_bytes [7], m_addr6_bytes [8], m_addr6_bytes [9], m_addr6_bytes [10], m_addr6_bytes [11], m_addr6_bytes [12], m_addr6_bytes [13], m_addr6_bytes [14], m_addr6_bytes [15]};
    DNSOutput dout = new DNSOutput ();
    ar.rrToWire (dout, null, true);
    assertTrue (Arrays.equals (exp, dout.toByteArray ()));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/APLRecordTest.java" startline="622" endline="635">
public void test_non_IP () throws IOException {
    byte [] exp = new byte [] {0, 3, (byte) 130, (byte) 0x85, 1, 2, 3, 4, 5};
    DNSInput di = new DNSInput (exp);
    APLRecord ar = new APLRecord ();
    ar.rrFromWire (di);
    DNSOutput dout = new DNSOutput ();
    ar.rrToWire (dout, null, true);
    assertTrue (Arrays.equals (exp, dout.toByteArray ()));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/APLRecordTest.java" startline="637" endline="651">
public void test_address_with_embedded_zero () throws UnknownHostException {
    InetAddress a = InetAddress.getByName ("232.0.11.1");
    ArrayList elements = new ArrayList ();
    elements.add (new Element (true, a, 31));
    APLRecord ar = new APLRecord (m_an, DClass.IN, m_ttl, elements);
    byte [] exp = new byte [] {0, 1, 31, (byte) 0x84, (byte) 232, 0, 11, 1};
    DNSOutput dout = new DNSOutput ();
    ar.rrToWire (dout, null, true);
    assertTrue (Arrays.equals (exp, dout.toByteArray ()));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/APLRecordTest.java" startline="653" endline="667">
public void test_short_address () throws UnknownHostException {
    InetAddress a = InetAddress.getByName ("232.0.11.0");
    ArrayList elements = new ArrayList ();
    elements.add (new Element (true, a, 31));
    APLRecord ar = new APLRecord (m_an, DClass.IN, m_ttl, elements);
    byte [] exp = new byte [] {0, 1, 31, (byte) 0x83, (byte) 232, 0, 11};
    DNSOutput dout = new DNSOutput ();
    ar.rrToWire (dout, null, true);
    assertTrue (Arrays.equals (exp, dout.toByteArray ()));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/APLRecordTest.java" startline="669" endline="683">
public void test_wildcard_address () throws UnknownHostException {
    InetAddress a = InetAddress.getByName ("0.0.0.0");
    ArrayList elements = new ArrayList ();
    elements.add (new Element (true, a, 31));
    APLRecord ar = new APLRecord (m_an, DClass.IN, m_ttl, elements);
    byte [] exp = new byte [] {0, 1, 31, (byte) 0x80};
    DNSOutput dout = new DNSOutput ();
    ar.rrToWire (dout, null, true);
    assertTrue (Arrays.equals (exp, dout.toByteArray ()));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/APLRecordTest.java" startline="686" endline="696">
public static Test suite () {
    TestSuite s = new TestSuite ();
    s.addTestSuite (Test_Element_init.class);
    s.addTestSuite (Test_init.class);
    s.addTestSuite (Test_rrFromWire.class);
    s.addTestSuite (Test_rdataFromString.class);
    s.addTestSuite (Test_rrToString.class);
    s.addTestSuite (Test_rrToWire.class);
    return s;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NSAP_PTRRecordTest.java" startline="41" endline="46">
public void test_ctor_0arg () {
    NSAP_PTRRecord d = new NSAP_PTRRecord ();
    assertNull (d.getName ());
    assertNull (d.getTarget ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NSAP_PTRRecordTest.java" startline="48" endline="59">
public void test_ctor_4arg () throws TextParseException {
    Name n = Name.fromString ("my.name.");
    Name a = Name.fromString ("my.alias.");
    NSAP_PTRRecord d = new NSAP_PTRRecord (n, DClass.IN, 0xABCDEL, a);
    assertEquals (n, d.getName ());
    assertEquals (Type.NSAP_PTR, d.getType ());
    assertEquals (DClass.IN, d.getDClass ());
    assertEquals (0xABCDEL, d.getTTL ());
    assertEquals (a, d.getTarget ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NSAP_PTRRecordTest.java" startline="61" endline="66">
public void test_getObject () {
    NSAP_PTRRecord d = new NSAP_PTRRecord ();
    Record r = d.getObject ();
    assertTrue (r instanceof NSAP_PTRRecord);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/TTLTest.java" startline="47" endline="70">
public void test_parseTTL () {
    assertEquals (9876, TTL.parseTTL ("9876"));
    assertEquals (0, TTL.parseTTL ("0S"));
    assertEquals (0, TTL.parseTTL ("0M"));
    assertEquals (0, TTL.parseTTL ("0H"));
    assertEquals (0, TTL.parseTTL ("0D"));
    assertEquals (0, TTL.parseTTL ("0W"));
    assertEquals (S, TTL.parseTTL ("1s"));
    assertEquals (M, TTL.parseTTL ("1m"));
    assertEquals (H, TTL.parseTTL ("1h"));
    assertEquals (D, TTL.parseTTL ("1d"));
    assertEquals (W, TTL.parseTTL ("1w"));
    assertEquals (98 * S, TTL.parseTTL ("98S"));
    assertEquals (76 * M, TTL.parseTTL ("76M"));
    assertEquals (54 * H, TTL.parseTTL ("54H"));
    assertEquals (32 * D, TTL.parseTTL ("32D"));
    assertEquals (10 * W, TTL.parseTTL ("10W"));
    assertEquals (98 * S + 11 * M + 1234 * H + 2 * D + W, TTL.parseTTL ("98S11M1234H2D01W"));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/TTLTest.java" startline="72" endline="91">
public void test_parseTTL_invalid () {
    try {
        TTL.parseTTL (null);
        fail ("NumberFormatException not throw");
    } catch (NumberFormatException e) {
    }
    try {
        TTL.parseTTL ("");
        fail ("NumberFormatException not throw");
    } catch (NumberFormatException e) {
    }
    try {
        TTL.parseTTL ("S");
        fail ("NumberFormatException not throw");
    } catch (NumberFormatException e) {
    }
    try {
        TTL.parseTTL ("10S4B");
        fail ("NumberFormatException not throw");
    } catch (NumberFormatException e) {
    }
    try {
        TTL.parseTTL ("1S" + 0xFFFFFFFFL + "S");
        fail ("NumberFormatException not throw");
    } catch (NumberFormatException e) {
    }
    try {
        TTL.parseTTL ("" + 0x100000000L);
        fail ("NumberFormatException not throw");
    } catch (NumberFormatException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/TTLTest.java" startline="93" endline="111">
public void test_format () {
    assertEquals ("0S", TTL.format (0));
    assertEquals ("1S", TTL.format (1));
    assertEquals ("59S", TTL.format (59));
    assertEquals ("1M", TTL.format (60));
    assertEquals ("59M", TTL.format (59 * M));
    assertEquals ("1M33S", TTL.format (M + 33));
    assertEquals ("59M59S", TTL.format (59 * M + 59 * S));
    assertEquals ("1H", TTL.format (H));
    assertEquals ("10H1M21S", TTL.format (10 * H + M + 21));
    assertEquals ("23H59M59S", TTL.format (23 * H + 59 * M + 59));
    assertEquals ("1D", TTL.format (D));
    assertEquals ("4D18H45M30S", TTL.format (4 * D + 18 * H + 45 * M + 30));
    assertEquals ("6D23H59M59S", TTL.format (6 * D + 23 * H + 59 * M + 59));
    assertEquals ("1W", TTL.format (W));
    assertEquals ("10W4D1H21M29S", TTL.format (10 * W + 4 * D + H + 21 * M + 29));
    assertEquals ("3550W5D3H14M7S", TTL.format (0x7FFFFFFFL));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/TTLTest.java" startline="113" endline="120">
public void test_format_invalid () {
    try {
        TTL.format (- 1);
        fail ("InvalidTTLException not thrown");
    } catch (InvalidTTLException e) {
    }
    try {
        TTL.format (0x100000000L);
        fail ("InvalidTTLException not thrown");
    } catch (InvalidTTLException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/TokenizerTest.java" startline="48" endline="51">
protected void setUp () {
    m_t = null;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/TokenizerTest.java" startline="53" endline="56">
private void assertEquals (byte [] exp, byte [] act) {
    assertTrue (java.util.Arrays.equals (exp, act));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/TokenizerTest.java" startline="58" endline="188">
public void test_get () throws IOException {
    m_t = new Tokenizer (new BufferedInputStream (new ByteArrayInputStream ("AnIdentifier \"a quoted \\\" string\"\r\n; this is \"my\"\t(comment)\nanotherIdentifier (\ramultilineIdentifier\n)".getBytes ())));
    Tokenizer.Token tt = m_t.get (true, true);
    assertEquals (Tokenizer.IDENTIFIER, tt.type);
    assertTrue (tt.isString ());
    assertFalse (tt.isEOL ());
    assertEquals ("AnIdentifier", tt.value);
    tt = m_t.get (true, true);
    assertEquals (Tokenizer.WHITESPACE, tt.type);
    assertFalse (tt.isString ());
    assertFalse (tt.isEOL ());
    assertNull (tt.value);
    tt = m_t.get (true, true);
    assertEquals (Tokenizer.QUOTED_STRING, tt.type);
    assertTrue (tt.isString ());
    assertFalse (tt.isEOL ());
    assertEquals ("a quoted \\\" string", tt.value);
    tt = m_t.get (true, true);
    assertEquals (Tokenizer.EOL, tt.type);
    assertFalse (tt.isString ());
    assertTrue (tt.isEOL ());
    assertNull (tt.value);
    tt = m_t.get (true, true);
    assertEquals (Tokenizer.COMMENT, tt.type);
    assertFalse (tt.isString ());
    assertFalse (tt.isEOL ());
    assertEquals (" this is \"my\"\t(comment)", tt.value);
    tt = m_t.get (true, true);
    assertEquals (Tokenizer.EOL, tt.type);
    assertFalse (tt.isString ());
    assertTrue (tt.isEOL ());
    assertNull (tt.value);
    tt = m_t.get (true, true);
    assertEquals (Tokenizer.IDENTIFIER, tt.type);
    assertTrue (tt.isString ());
    assertFalse (tt.isEOL ());
    assertEquals ("anotherIdentifier", tt.value);
    tt = m_t.get (true, true);
    assertEquals (Tokenizer.WHITESPACE, tt.type);
    tt = m_t.get (true, true);
    assertEquals (Tokenizer.IDENTIFIER, tt.type);
    assertTrue (tt.isString ());
    assertFalse (tt.isEOL ());
    assertEquals ("amultilineIdentifier", tt.value);
    tt = m_t.get (true, true);
    assertEquals (Tokenizer.WHITESPACE, tt.type);
    tt = m_t.get (true, true);
    assertEquals (Tokenizer.EOF, tt.type);
    assertFalse (tt.isString ());
    assertTrue (tt.isEOL ());
    assertNull (tt.value);
    tt = m_t.get (true, true);
    assertEquals (Tokenizer.EOF, tt.type);
    assertFalse (tt.isString ());
    assertTrue (tt.isEOL ());
    assertNull (tt.value);
    m_t = new Tokenizer ("onlyOneIdentifier");
    tt = m_t.get ();
    assertEquals (Tokenizer.IDENTIFIER, tt.type);
    assertEquals ("onlyOneIdentifier", tt.value);
    m_t = new Tokenizer ("identifier ;");
    tt = m_t.get ();
    assertEquals ("identifier", tt.value);
    tt = m_t.get ();
    assertEquals (Tokenizer.EOF, tt.type);
    m_t = new Tokenizer ("identifier \nidentifier2; junk comment");
    tt = m_t.get (true, true);
    assertEquals (Tokenizer.IDENTIFIER, tt.type);
    assertEquals ("identifier", tt.value);
    m_t.unget ();
    tt = m_t.get (true, true);
    assertEquals (Tokenizer.IDENTIFIER, tt.type);
    assertEquals ("identifier", tt.value);
    tt = m_t.get (true, true);
    assertEquals (Tokenizer.WHITESPACE, tt.type);
    m_t.unget ();
    tt = m_t.get (true, true);
    assertEquals (Tokenizer.WHITESPACE, tt.type);
    tt = m_t.get (true, true);
    assertEquals (Tokenizer.EOL, tt.type);
    m_t.unget ();
    tt = m_t.get (true, true);
    assertEquals (Tokenizer.EOL, tt.type);
    tt = m_t.get (true, true);
    assertEquals (Tokenizer.IDENTIFIER, tt.type);
    assertEquals ("identifier2", tt.value);
    tt = m_t.get (true, true);
    assertEquals (Tokenizer.COMMENT, tt.type);
    assertEquals (" junk comment", tt.value);
    m_t.unget ();
    tt = m_t.get (true, true);
    assertEquals (Tokenizer.COMMENT, tt.type);
    assertEquals (" junk comment", tt.value);
    tt = m_t.get (true, true);
    assertEquals (Tokenizer.EOF, tt.type);
    m_t = new Tokenizer ("identifier ( junk ; comment\n )");
    tt = m_t.get ();
    assertEquals (Tokenizer.IDENTIFIER, tt.type);
    assertEquals (Tokenizer.IDENTIFIER, m_t.get ().type);
    assertEquals (Tokenizer.EOF, m_t.get ().type);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/TokenizerTest.java" startline="190" endline="212">
public void test_get_invalid () throws IOException {
    m_t = new Tokenizer ("(this ;");
    m_t.get ();
    try {
        m_t.get ();
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
    m_t = new Tokenizer ("\"bad");
    try {
        m_t.get ();
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
    m_t = new Tokenizer (")");
    try {
        m_t.get ();
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
    m_t = new Tokenizer ("\\");
    try {
        m_t.get ();
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
    m_t = new Tokenizer ("\"\n");
    try {
        m_t.get ();
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/TokenizerTest.java" startline="214" endline="244">
public void test_File_input () throws IOException {
    File tmp = File.createTempFile ("dnsjava", "tmp");
    try {
        FileWriter fw = new FileWriter (tmp);
        fw.write ("file\ninput; test");
        fw.close ();
        m_t = new Tokenizer (tmp);
        Tokenizer.Token tt = m_t.get ();
        assertEquals (Tokenizer.IDENTIFIER, tt.type);
        assertEquals ("file", tt.value);
        tt = m_t.get ();
        assertEquals (Tokenizer.EOL, tt.type);
        tt = m_t.get ();
        assertEquals (Tokenizer.IDENTIFIER, tt.type);
        assertEquals ("input", tt.value);
        tt = m_t.get (false, true);
        assertEquals (Tokenizer.COMMENT, tt.type);
        assertEquals (" test", tt.value);
        m_t.close ();
    } finally {
        tmp.delete ();
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/TokenizerTest.java" startline="246" endline="252">
public void test_unwanted_comment () throws IOException {
    m_t = new Tokenizer ("; this whole thing is a comment\n");
    Tokenizer.Token tt = m_t.get ();
    assertEquals (Tokenizer.EOL, tt.type);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/TokenizerTest.java" startline="254" endline="261">
public void test_unwanted_ungotten_whitespace () throws IOException {
    m_t = new Tokenizer (" ");
    Tokenizer.Token tt = m_t.get (true, true);
    m_t.unget ();
    tt = m_t.get ();
    assertEquals (Tokenizer.EOF, tt.type);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/TokenizerTest.java" startline="263" endline="270">
public void test_unwanted_ungotten_comment () throws IOException {
    m_t = new Tokenizer ("; this whole thing is a comment");
    Tokenizer.Token tt = m_t.get (true, true);
    m_t.unget ();
    tt = m_t.get ();
    assertEquals (Tokenizer.EOF, tt.type);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/TokenizerTest.java" startline="272" endline="281">
public void test_empty_string () throws IOException {
    m_t = new Tokenizer ("");
    Tokenizer.Token tt = m_t.get ();
    assertEquals (Tokenizer.EOF, tt.type);
    m_t = new Tokenizer (" ");
    tt = m_t.get ();
    assertEquals (Tokenizer.EOF, tt.type);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/TokenizerTest.java" startline="283" endline="294">
public void test_multiple_ungets () throws IOException {
    m_t = new Tokenizer ("a simple one");
    Tokenizer.Token tt = m_t.get ();
    m_t.unget ();
    try {
        m_t.unget ();
        fail ("IllegalStateException not thrown");
    } catch (IllegalStateException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/TokenizerTest.java" startline="296" endline="312">
public void test_getString () throws IOException {
    m_t = new Tokenizer ("just_an_identifier");
    String out = m_t.getString ();
    assertEquals ("just_an_identifier", out);
    m_t = new Tokenizer ("\"just a string\"");
    out = m_t.getString ();
    assertEquals ("just a string", out);
    m_t = new Tokenizer ("; just a comment");
    try {
        out = m_t.getString ();
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/TokenizerTest.java" startline="314" endline="326">
public void test_getIdentifier () throws IOException {
    m_t = new Tokenizer ("just_an_identifier");
    String out = m_t.getIdentifier ();
    assertEquals ("just_an_identifier", out);
    m_t = new Tokenizer ("\"just a string\"");
    try {
        m_t.getIdentifier ();
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/TokenizerTest.java" startline="328" endline="347">
public void test_getLong () throws IOException {
    m_t = new Tokenizer ((Integer.MAX_VALUE + 1L) + "");
    long out = m_t.getLong ();
    assertEquals ((Integer.MAX_VALUE + 1L), out);
    m_t = new Tokenizer ("-10");
    try {
        m_t.getLong ();
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
    m_t = new Tokenizer ("19_identifier");
    try {
        m_t.getLong ();
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/TokenizerTest.java" startline="349" endline="368">
public void test_getUInt32 () throws IOException {
    m_t = new Tokenizer (0xABCDEF12L + "");
    long out = m_t.getUInt32 ();
    assertEquals (0xABCDEF12L, out);
    m_t = new Tokenizer (0x100000000L + "");
    try {
        m_t.getUInt32 ();
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
    m_t = new Tokenizer ("-12345");
    try {
        m_t.getUInt32 ();
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/TokenizerTest.java" startline="370" endline="389">
public void test_getUInt16 () throws IOException {
    m_t = new Tokenizer (0xABCDL + "");
    int out = m_t.getUInt16 ();
    assertEquals (0xABCDL, out);
    m_t = new Tokenizer (0x10000 + "");
    try {
        m_t.getUInt16 ();
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
    m_t = new Tokenizer ("-125");
    try {
        m_t.getUInt16 ();
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/TokenizerTest.java" startline="391" endline="410">
public void test_getUInt8 () throws IOException {
    m_t = new Tokenizer (0xCDL + "");
    int out = m_t.getUInt8 ();
    assertEquals (0xCDL, out);
    m_t = new Tokenizer (0x100 + "");
    try {
        m_t.getUInt8 ();
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
    m_t = new Tokenizer ("-12");
    try {
        m_t.getUInt8 ();
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/TokenizerTest.java" startline="412" endline="429">
public void test_getTTL () throws IOException {
    m_t = new Tokenizer ("59S");
    assertEquals (59, m_t.getTTL ());
    m_t = new Tokenizer (TTL.MAX_VALUE + "");
    assertEquals (TTL.MAX_VALUE, m_t.getTTL ());
    m_t = new Tokenizer ((TTL.MAX_VALUE + 1L) + "");
    assertEquals (TTL.MAX_VALUE, m_t.getTTL ());
    m_t = new Tokenizer ("Junk");
    try {
        m_t.getTTL ();
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/TokenizerTest.java" startline="431" endline="448">
public void test_getTTLLike () throws IOException {
    m_t = new Tokenizer ("59S");
    assertEquals (59, m_t.getTTLLike ());
    m_t = new Tokenizer (TTL.MAX_VALUE + "");
    assertEquals (TTL.MAX_VALUE, m_t.getTTLLike ());
    m_t = new Tokenizer ((TTL.MAX_VALUE + 1L) + "");
    assertEquals (TTL.MAX_VALUE + 1L, m_t.getTTLLike ());
    m_t = new Tokenizer ("Junk");
    try {
        m_t.getTTLLike ();
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/TokenizerTest.java" startline="450" endline="472">
public void test_getName () throws IOException, TextParseException {
    Name root = Name.fromString (".");
    m_t = new Tokenizer ("junk");
    Name exp = Name.fromString ("junk.");
    Name out = m_t.getName (root);
    assertEquals (exp, out);
    Name rel = Name.fromString ("you.dig");
    m_t = new Tokenizer ("junk");
    try {
        m_t.getName (rel);
        fail ("RelativeNameException not thrown");
    } catch (RelativeNameException e) {
    }
    m_t = new Tokenizer ("");
    try {
        m_t.getName (root);
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/TokenizerTest.java" startline="474" endline="500">
public void test_getEOL () throws IOException {
    m_t = new Tokenizer ("id");
    m_t.getIdentifier ();
    try {
        m_t.getEOL ();
    } catch (TextParseException e) {
        fail (e.getMessage ());
    }
    m_t = new Tokenizer ("\n");
    try {
        m_t.getEOL ();
        m_t.getEOL ();
    } catch (TextParseException e) {
        fail (e.getMessage ());
    }
    m_t = new Tokenizer ("id");
    try {
        m_t.getEOL ();
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/TokenizerTest.java" startline="502" endline="545">
public void test_getBase64 () throws IOException {
    byte [] exp = {1, 2, 3, 4, 5, 6, 7, 8, 9};
    m_t = new Tokenizer ("AQIDBAUGBwgJ");
    byte [] out = m_t.getBase64 ();
    assertEquals (exp, out);
    m_t = new Tokenizer ("AQIDB AUGB   wgJ");
    out = m_t.getBase64 ();
    assertEquals (exp, out);
    m_t = new Tokenizer ("AQIDBAUGBwgJ\nAB23DK");
    out = m_t.getBase64 ();
    assertEquals (exp, out);
    m_t = new Tokenizer ("\n");
    assertNull (m_t.getBase64 ());
    m_t = new Tokenizer ("\n");
    try {
        m_t.getBase64 (true);
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
    m_t = new Tokenizer ("not_base64");
    try {
        m_t.getBase64 (false);
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
    m_t = new Tokenizer ("not_base64");
    try {
        m_t.getBase64 (true);
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/TokenizerTest.java" startline="547" endline="590">
public void test_getHex () throws IOException {
    byte [] exp = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
    m_t = new Tokenizer ("0102030405060708090A0B0C0D0E0F");
    byte [] out = m_t.getHex ();
    assertEquals (exp, out);
    m_t = new Tokenizer ("0102030 405 060708090A0B0C      0D0E0F");
    out = m_t.getHex ();
    assertEquals (exp, out);
    m_t = new Tokenizer ("0102030405060708090A0B0C0D0E0F\n01AB3FE");
    out = m_t.getHex ();
    assertEquals (exp, out);
    m_t = new Tokenizer ("\n");
    assertNull (m_t.getHex ());
    m_t = new Tokenizer ("\n");
    try {
        m_t.getHex (true);
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
    m_t = new Tokenizer ("not_hex");
    try {
        m_t.getHex (false);
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
    m_t = new Tokenizer ("not_hex");
    try {
        m_t.getHex (true);
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/OpcodeTest.java" startline="41" endline="63">
public void test_string () {
    assertEquals ("IQUERY", Opcode.string (Opcode.IQUERY));
    assertTrue (Opcode.string (6).startsWith ("RESERVED"));
    try {
        Opcode.string (- 1);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
    try {
        Opcode.string (0x10);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/OpcodeTest.java" startline="65" endline="81">
public void test_value () {
    assertEquals (Opcode.STATUS, Opcode.value ("STATUS"));
    assertEquals (6, Opcode.value ("RESERVED6"));
    assertEquals (- 1, Opcode.value ("RESERVED" + 0x10));
    assertEquals (- 1, Opcode.value ("THIS IS DEFINITELY UNKNOWN"));
    assertEquals (- 1, Opcode.value (""));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/OPTRecordTest.java" startline="11" endline="15">
public void testForNoEqualityWithDifferentEDNS_Versions () {
    final OPTRecord optRecordOne = new OPTRecord (DEFAULT_PAYLOAD_SIZE, DEFAULT_EDNS_RCODE, 0);
    final OPTRecord optRecordTwo = new OPTRecord (DEFAULT_PAYLOAD_SIZE, DEFAULT_EDNS_RCODE, 1);
    assertNotEqual (optRecordOne, optRecordTwo);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/OPTRecordTest.java" startline="17" endline="21">
public void testForNoEqualityWithDifferentEDNS_RCodes () {
    final OPTRecord optRecordOne = new OPTRecord (DEFAULT_PAYLOAD_SIZE, 0, DEFAULT_EDNS_VERSION);
    final OPTRecord optRecordTwo = new OPTRecord (DEFAULT_PAYLOAD_SIZE, 1, DEFAULT_EDNS_VERSION);
    assertNotEqual (optRecordOne, optRecordTwo);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/OPTRecordTest.java" startline="23" endline="28">
public void testForEquality () {
    final OPTRecord optRecordOne = new OPTRecord (DEFAULT_PAYLOAD_SIZE, DEFAULT_EDNS_RCODE, DEFAULT_EDNS_VERSION);
    final OPTRecord optRecordTwo = new OPTRecord (DEFAULT_PAYLOAD_SIZE, DEFAULT_EDNS_RCODE, DEFAULT_EDNS_VERSION);
    assertEquals (optRecordOne, optRecordTwo);
    assertEquals (optRecordTwo, optRecordOne);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/OPTRecordTest.java" startline="30" endline="35">
private void assertNotEqual (final OPTRecord optRecordOne, final OPTRecord optRecordTwo) {
    assertTrue ("Expecting no equality of " + optRecordOne + " compared to " + optRecordTwo, ! optRecordOne.equals (optRecordTwo));
    assertTrue ("Expecting no equality of " + optRecordTwo + " compared to " + optRecordOne, ! optRecordTwo.equals (optRecordOne));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSKEYRecordTest.java" startline="45" endline="57">
public void test_ctor_0arg () throws UnknownHostException {
    DNSKEYRecord ar = new DNSKEYRecord ();
    assertNull (ar.getName ());
    assertEquals (0, ar.getType ());
    assertEquals (0, ar.getDClass ());
    assertEquals (0, ar.getTTL ());
    assertEquals (0, ar.getAlgorithm ());
    assertEquals (0, ar.getFlags ());
    assertEquals (0, ar.getFootprint ());
    assertEquals (0, ar.getProtocol ());
    assertNull (ar.getKey ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSKEYRecordTest.java" startline="59" endline="64">
public void test_getObject () {
    DNSKEYRecord ar = new DNSKEYRecord ();
    Record r = ar.getObject ();
    assertTrue (r instanceof DNSKEYRecord);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSKEYRecordTest.java" startline="66" endline="88">
public void test_ctor_7arg () throws TextParseException {
    Name n = Name.fromString ("My.Absolute.Name.");
    Name r = Name.fromString ("My.Relative.Name");
    byte [] key = new byte [] {0, 1, 3, 5, 7, 9};
    DNSKEYRecord kr = new DNSKEYRecord (n, DClass.IN, 0x24AC, 0x9832, 0x12, 0x67, key);
    assertEquals (n, kr.getName ());
    assertEquals (Type.DNSKEY, kr.getType ());
    assertEquals (DClass.IN, kr.getDClass ());
    assertEquals (0x24AC, kr.getTTL ());
    assertEquals (0x9832, kr.getFlags ());
    assertEquals (0x12, kr.getProtocol ());
    assertEquals (0x67, kr.getAlgorithm ());
    assertTrue (Arrays.equals (key, kr.getKey ()));
    try {
        new DNSKEYRecord (r, DClass.IN, 0x24AC, 0x9832, 0x12, 0x67, key);
        fail ("RelativeNameException not thrown");
    } catch (RelativeNameException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSKEYRecordTest.java" startline="90" endline="109">
public void test_rdataFromString () throws IOException, TextParseException {
    DNSKEYRecord kr = new DNSKEYRecord ();
    Tokenizer st = new Tokenizer (0xABCD + " " + 0x81 + " RSASHA1 AQIDBAUGBwgJ");
    kr.rdataFromString (st, null);
    assertEquals (0xABCD, kr.getFlags ());
    assertEquals (0x81, kr.getProtocol ());
    assertEquals (DNSSEC.Algorithm.RSASHA1, kr.getAlgorithm ());
    assertTrue (Arrays.equals (new byte [] {1, 2, 3, 4, 5, 6, 7, 8, 9}, kr.getKey ()));
    kr = new DNSKEYRecord ();
    st = new Tokenizer (0x1212 + " " + 0xAA + " ZONE AQIDBAUGBwgJ");
    try {
        kr.rdataFromString (st, null);
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="54" endline="58">
protected void setUp () throws TextParseException {
    m_abs_origin = Name.fromString ("Orig.");
    m_rel_origin = Name.fromString ("Orig");
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="60" endline="67">
public void test_ctor_empty () {
    try {
        new Name ("");
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="69" endline="76">
public void test_ctor_at_null_origin () throws TextParseException {
    Name n = new Name ("@");
    assertFalse (n.isAbsolute ());
    assertFalse (n.isWild ());
    assertEquals (0, n.labels ());
    assertEquals (0, n.length ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="78" endline="82">
public void test_ctor_at_abs_origin () throws TextParseException {
    Name n = new Name ("@", m_abs_origin);
    assertEquals (m_abs_origin, n);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="84" endline="88">
public void test_ctor_at_rel_origin () throws TextParseException {
    Name n = new Name ("@", m_rel_origin);
    assertEquals (m_rel_origin, n);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="90" endline="97">
public void test_ctor_dot () throws TextParseException {
    Name n = new Name (".");
    assertEquals (Name.root, n);
    assertNotSame (Name.root, n);
    assertEquals (1, n.labels ());
    assertEquals (1, n.length ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="99" endline="108">
public void test_ctor_wildcard () throws TextParseException {
    Name n = new Name ("*");
    assertFalse (n.isAbsolute ());
    assertTrue (n.isWild ());
    assertEquals (1, n.labels ());
    assertEquals (2, n.length ());
    assertTrue (Arrays.equals (new byte [] {1, '*'}, n.getLabel (0)));
    assertEquals ("*", n.getLabelString (0));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="110" endline="129">
public void test_ctor_abs () throws TextParseException {
    Name n = new Name (m_abs);
    assertTrue (n.isAbsolute ());
    assertFalse (n.isWild ());
    assertEquals (4, n.labels ());
    assertEquals (17, n.length ());
    assertTrue (Arrays.equals (new byte [] {3, 'W', 'W', 'W'}, n.getLabel (0)));
    assertEquals ("WWW", n.getLabelString (0));
    assertTrue (Arrays.equals (new byte [] {7, 'D', 'n', 's', 'J', 'a', 'v', 'a'}, n.getLabel (1)));
    assertEquals ("DnsJava", n.getLabelString (1));
    assertTrue (Arrays.equals (new byte [] {3, 'o', 'r', 'g'}, n.getLabel (2)));
    assertEquals ("org", n.getLabelString (2));
    assertTrue (Arrays.equals (new byte [] {0}, n.getLabel (3)));
    assertEquals ("", n.getLabelString (3));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="131" endline="144">
public void test_ctor_rel () throws TextParseException {
    Name n = new Name (m_rel);
    assertFalse (n.isAbsolute ());
    assertFalse (n.isWild ());
    assertEquals (2, n.labels ());
    assertEquals (12, n.length ());
    assertTrue (Arrays.equals (new byte [] {3, 'W', 'W', 'W'}, n.getLabel (0)));
    assertEquals ("WWW", n.getLabelString (0));
    assertTrue (Arrays.equals (new byte [] {7, 'D', 'n', 's', 'J', 'a', 'v', 'a'}, n.getLabel (1)));
    assertEquals ("DnsJava", n.getLabelString (1));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="146" endline="168">
public void test_ctor_7label () throws TextParseException {
    Name n = new Name ("a.b.c.d.e.f.");
    assertTrue (n.isAbsolute ());
    assertFalse (n.isWild ());
    assertEquals (7, n.labels ());
    assertEquals (13, n.length ());
    assertTrue (Arrays.equals (new byte [] {1, 'a'}, n.getLabel (0)));
    assertEquals ("a", n.getLabelString (0));
    assertTrue (Arrays.equals (new byte [] {1, 'b'}, n.getLabel (1)));
    assertEquals ("b", n.getLabelString (1));
    assertTrue (Arrays.equals (new byte [] {1, 'c'}, n.getLabel (2)));
    assertEquals ("c", n.getLabelString (2));
    assertTrue (Arrays.equals (new byte [] {1, 'd'}, n.getLabel (3)));
    assertEquals ("d", n.getLabelString (3));
    assertTrue (Arrays.equals (new byte [] {1, 'e'}, n.getLabel (4)));
    assertEquals ("e", n.getLabelString (4));
    assertTrue (Arrays.equals (new byte [] {1, 'f'}, n.getLabel (5)));
    assertEquals ("f", n.getLabelString (5));
    assertTrue (Arrays.equals (new byte [] {0}, n.getLabel (6)));
    assertEquals ("", n.getLabelString (6));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="170" endline="194">
public void test_ctor_8label () throws TextParseException {
    Name n = new Name ("a.b.c.d.e.f.g.");
    assertTrue (n.isAbsolute ());
    assertFalse (n.isWild ());
    assertEquals (8, n.labels ());
    assertEquals (15, n.length ());
    assertTrue (Arrays.equals (new byte [] {1, 'a'}, n.getLabel (0)));
    assertEquals ("a", n.getLabelString (0));
    assertTrue (Arrays.equals (new byte [] {1, 'b'}, n.getLabel (1)));
    assertEquals ("b", n.getLabelString (1));
    assertTrue (Arrays.equals (new byte [] {1, 'c'}, n.getLabel (2)));
    assertEquals ("c", n.getLabelString (2));
    assertTrue (Arrays.equals (new byte [] {1, 'd'}, n.getLabel (3)));
    assertEquals ("d", n.getLabelString (3));
    assertTrue (Arrays.equals (new byte [] {1, 'e'}, n.getLabel (4)));
    assertEquals ("e", n.getLabelString (4));
    assertTrue (Arrays.equals (new byte [] {1, 'f'}, n.getLabel (5)));
    assertEquals ("f", n.getLabelString (5));
    assertTrue (Arrays.equals (new byte [] {1, 'g'}, n.getLabel (6)));
    assertEquals ("g", n.getLabelString (6));
    assertTrue (Arrays.equals (new byte [] {0}, n.getLabel (7)));
    assertEquals ("", n.getLabelString (7));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="196" endline="204">
public void test_ctor_removed_label () throws TextParseException, NameTooLongException {
    String pre = "prepend";
    Name stripped = new Name (Name.fromString ("sub.domain.example."), 1);
    Name concat = new Name (pre, stripped);
    assertEquals (Name.concatenate (Name.fromString (pre), stripped), concat);
    assertEquals (Name.fromString (pre, stripped), concat);
    assertEquals ("prepend.domain.example.", concat.toString ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="206" endline="225">
public void test_ctor_abs_abs_origin () throws TextParseException {
    Name n = new Name (m_abs, m_abs_origin);
    assertTrue (n.isAbsolute ());
    assertFalse (n.isWild ());
    assertEquals (4, n.labels ());
    assertEquals (17, n.length ());
    assertTrue (Arrays.equals (new byte [] {3, 'W', 'W', 'W'}, n.getLabel (0)));
    assertEquals ("WWW", n.getLabelString (0));
    assertTrue (Arrays.equals (new byte [] {7, 'D', 'n', 's', 'J', 'a', 'v', 'a'}, n.getLabel (1)));
    assertEquals ("DnsJava", n.getLabelString (1));
    assertTrue (Arrays.equals (new byte [] {3, 'o', 'r', 'g'}, n.getLabel (2)));
    assertEquals ("org", n.getLabelString (2));
    assertTrue (Arrays.equals (new byte [] {0}, n.getLabel (3)));
    assertEquals ("", n.getLabelString (3));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="227" endline="246">
public void test_ctor_abs_rel_origin () throws TextParseException {
    Name n = new Name (m_abs, m_rel_origin);
    assertTrue (n.isAbsolute ());
    assertFalse (n.isWild ());
    assertEquals (4, n.labels ());
    assertEquals (17, n.length ());
    assertTrue (Arrays.equals (new byte [] {3, 'W', 'W', 'W'}, n.getLabel (0)));
    assertEquals ("WWW", n.getLabelString (0));
    assertTrue (Arrays.equals (new byte [] {7, 'D', 'n', 's', 'J', 'a', 'v', 'a'}, n.getLabel (1)));
    assertEquals ("DnsJava", n.getLabelString (1));
    assertTrue (Arrays.equals (new byte [] {3, 'o', 'r', 'g'}, n.getLabel (2)));
    assertEquals ("org", n.getLabelString (2));
    assertTrue (Arrays.equals (new byte [] {0}, n.getLabel (3)));
    assertEquals ("", n.getLabelString (3));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="248" endline="267">
public void test_ctor_rel_abs_origin () throws TextParseException {
    Name n = new Name (m_rel, m_abs_origin);
    assertTrue (n.isAbsolute ());
    assertFalse (n.isWild ());
    assertEquals (4, n.labels ());
    assertEquals (18, n.length ());
    assertTrue (Arrays.equals (new byte [] {3, 'W', 'W', 'W'}, n.getLabel (0)));
    assertEquals ("WWW", n.getLabelString (0));
    assertTrue (Arrays.equals (new byte [] {7, 'D', 'n', 's', 'J', 'a', 'v', 'a'}, n.getLabel (1)));
    assertEquals ("DnsJava", n.getLabelString (1));
    assertTrue (Arrays.equals (new byte [] {4, 'O', 'r', 'i', 'g'}, n.getLabel (2)));
    assertEquals ("Orig", n.getLabelString (2));
    assertTrue (Arrays.equals (new byte [] {0}, n.getLabel (3)));
    assertEquals ("", n.getLabelString (3));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="269" endline="276">
public void test_ctor_invalid_label () {
    try {
        new Name ("junk..junk.");
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="278" endline="295">
public void test_ctor_max_label () throws TextParseException {
    Name n = new Name ("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.b.");
    assertTrue (n.isAbsolute ());
    assertFalse (n.isWild ());
    assertEquals (3, n.labels ());
    assertEquals (67, n.length ());
    assertTrue (Arrays.equals (new byte [] {63, 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'}, n.getLabel (0)));
    assertEquals ("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", n.getLabelString (0));
    assertTrue (Arrays.equals (new byte [] {1, 'b'}, n.getLabel (1)));
    assertEquals ("b", n.getLabelString (1));
    assertTrue (Arrays.equals (new byte [] {0}, n.getLabel (2)));
    assertEquals ("", n.getLabelString (2));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="297" endline="305">
public void test_ctor_toobig_label () {
    try {
        new Name ("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.b.");
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="307" endline="315">
public void test_ctor_max_length_rel () throws TextParseException {
    Name n = new Name ("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc.dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd");
    assertFalse (n.isAbsolute ());
    assertFalse (n.isWild ());
    assertEquals (4, n.labels ());
    assertEquals (255, n.length ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="317" endline="325">
public void test_ctor_max_length_abs () throws TextParseException {
    Name n = new Name ("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc.ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd.");
    assertTrue (n.isAbsolute ());
    assertFalse (n.isWild ());
    assertEquals (5, n.labels ());
    assertEquals (255, n.length ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="327" endline="335">
public void test_ctor_escaped () throws TextParseException {
    Name n = new Name ("ab\\123cd");
    assertFalse (n.isAbsolute ());
    assertFalse (n.isWild ());
    assertEquals (1, n.labels ());
    assertEquals (6, n.length ());
    assertTrue (Arrays.equals (new byte [] {5, 'a', 'b', (byte) 123, 'c', 'd'}, n.getLabel (0)));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="337" endline="345">
public void test_ctor_escaped_end () throws TextParseException {
    Name n = new Name ("abcd\\123");
    assertFalse (n.isAbsolute ());
    assertFalse (n.isWild ());
    assertEquals (1, n.labels ());
    assertEquals (6, n.length ());
    assertTrue (Arrays.equals (new byte [] {5, 'a', 'b', 'c', 'd', (byte) 123}, n.getLabel (0)));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="347" endline="354">
public void test_ctor_short_escaped () throws TextParseException {
    try {
        new Name ("ab\\12cd");
        fail ("TextParseException not throw");
    } catch (TextParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="356" endline="363">
public void test_ctor_short_escaped_end () throws TextParseException {
    try {
        new Name ("ab\\12");
        fail ("TextParseException not throw");
    } catch (TextParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="365" endline="372">
public void test_ctor_empty_escaped_end () throws TextParseException {
    try {
        new Name ("ab\\");
        fail ("TextParseException not throw");
    } catch (TextParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="374" endline="381">
public void test_ctor_toobig_escaped () throws TextParseException {
    try {
        new Name ("ab\\256cd");
        fail ("TextParseException not throw");
    } catch (TextParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="383" endline="390">
public void test_ctor_toobig_escaped_end () throws TextParseException {
    try {
        new Name ("ab\\256");
        fail ("TextParseException not throw");
    } catch (TextParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="392" endline="408">
public void test_ctor_max_label_escaped () throws TextParseException {
    Name n = new Name ("aaaa\\100aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.b.");
    assertTrue (n.isAbsolute ());
    assertFalse (n.isWild ());
    assertEquals (3, n.labels ());
    assertEquals (67, n.length ());
    assertTrue (Arrays.equals (new byte [] {63, 'a', 'a', 'a', 'a', (byte) 100, 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'}, n.getLabel (0)));
    assertTrue (Arrays.equals (new byte [] {1, 'b'}, n.getLabel (1)));
    assertEquals ("b", n.getLabelString (1));
    assertTrue (Arrays.equals (new byte [] {0}, n.getLabel (2)));
    assertEquals ("", n.getLabelString (2));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="410" endline="427">
public void test_ctor_max_labels () throws TextParseException {
    StringBuffer sb = new StringBuffer ();
    for (int i = 0;
    i < 127; ++ i) {
        sb.append ("a.");
    }
    Name n = new Name (sb.toString ());
    assertTrue (n.isAbsolute ());
    assertFalse (n.isWild ());
    assertEquals (128, n.labels ());
    assertEquals (255, n.length ());
    for (int i = 0;
    i < 127; ++ i) {
        assertTrue (Arrays.equals (new byte [] {1, 'a'}, n.getLabel (i)));
        assertEquals ("a", n.getLabelString (i));
    }
    assertTrue (Arrays.equals (new byte [] {0}, n.getLabel (127)));
    assertEquals ("", n.getLabelString (127));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="429" endline="437">
public void test_ctor_toobig_label_escaped_end () throws TextParseException {
    try {
        new Name ("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\090.b.");
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="439" endline="447">
public void test_ctor_toobig_label_escaped () throws TextParseException {
    try {
        new Name ("aaaaaaaaaaaaaaaaaaaaaaaaaaaa\\001aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.b.");
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="449" endline="454">
public void test_fromString () throws TextParseException {
    Name n = new Name (m_rel, m_abs_origin);
    Name n2 = Name.fromString (m_rel, m_abs_origin);
    assertEquals (n, n2);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="456" endline="460">
public void test_fromString_at () throws TextParseException {
    Name n = Name.fromString ("@", m_rel_origin);
    assertSame (m_rel_origin, n);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="462" endline="466">
public void test_fromString_dot () throws TextParseException {
    Name n = Name.fromString (".");
    assertSame (Name.root, n);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="468" endline="473">
public void test_fromConstantString () throws TextParseException {
    Name n = new Name (m_abs);
    Name n2 = Name.fromConstantString (m_abs);
    assertEquals (n, n2);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="475" endline="482">
public void test_fromConstantString_invalid () {
    try {
        Name.fromConstantString ("junk..junk");
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="487" endline="496">
public void test_basic () throws IOException, TextParseException, WireParseException {
    final byte [] raw = new byte [] {3, 'W', 'w', 'w', 7, 'D', 'n', 's', 'J', 'a', 'v', 'a', 3, 'o', 'r', 'g', 0};
    Name e = Name.fromString ("Www.DnsJava.org.");
    Name n = new Name (raw);
    assertEquals (e, n);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="498" endline="505">
public void test_incomplete () throws IOException {
    try {
        new Name (new byte [] {3, 'W', 'w', 'w'});
        fail ("WireParseException not thrown");
    } catch (WireParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="507" endline="512">
public void test_root () throws WireParseException {
    final byte [] raw = new byte [] {0};
    Name n = new Name (new DNSInput (raw));
    assertEquals (Name.root, n);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="514" endline="521">
public void test_invalid_length () throws IOException {
    try {
        new Name (new byte [] {4, 'W', 'w', 'w'});
        fail ("WireParseException not thrown");
    } catch (WireParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="523" endline="530">
public void test_max_label_length () throws TextParseException, WireParseException {
    byte [] raw = new byte [] {63, 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 0};
    Name e = Name.fromString ("bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.");
    Name n = new Name (new DNSInput (raw));
    assertEquals (e, n);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="532" endline="540">
public void test_max_name () throws TextParseException, WireParseException {
    Name e = new Name ("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc.ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd.");
    byte [] raw = new byte [] {63, 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 63, 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 63, 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 61, 'd', 'd', 'd', 'd', 'd', 'd',
      'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 0};
    Name n = new Name (new DNSInput (raw));
    assertEquals (e, n);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="542" endline="552">
public void test_toolong_name () throws TextParseException, WireParseException {
    byte [] raw = new byte [] {63, 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 63, 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 63, 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 62, 'd', 'd', 'd', 'd', 'd', 'd',
      'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 0};
    try {
        new Name (new DNSInput (raw));
        fail ("WireParseException not thrown");
    } catch (WireParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="554" endline="561">
public void test_max_labels () throws TextParseException, WireParseException {
    byte [] raw = new byte [] {1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1
      , 'a', 1, 'a', 1, 'a', 0};
    Name e = Name.fromString ("a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.");
    Name n = new Name (new DNSInput (raw));
    assertEquals (128, n.labels ());
    assertEquals (e, n);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="563" endline="571">
public void test_toomany_labels () throws TextParseException, WireParseException {
    byte [] raw = new byte [] {1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1, 'a', 1
      , 'a', 1, 'a', 1, 'a', 1, 'a', 0};
    try {
        new Name (new DNSInput (raw));
        fail ("WireParseException not thrown");
    } catch (WireParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="573" endline="585">
public void test_basic_compression () throws TextParseException, WireParseException {
    byte [] raw = new byte [] {10, 3, 'a', 'b', 'c', 0, (byte) 0xC0, 1};
    Name e = Name.fromString ("abc.");
    DNSInput in = new DNSInput (raw);
    in.jump (6);
    Options.set ("verbosecompression");
    Name n = new Name (in);
    Options.unset ("verbosecompression");
    assertEquals (e, n);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="587" endline="597">
public void test_two_pointer_compression () throws TextParseException, WireParseException {
    byte [] raw = new byte [] {10, 3, 'a', 'b', 'c', 0, (byte) 0xC0, 1, (byte) 0xC0, 6};
    Name e = Name.fromString ("abc.");
    DNSInput in = new DNSInput (raw);
    in.jump (8);
    Name n = new Name (in);
    assertEquals (e, n);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="599" endline="609">
public void test_two_part_compression () throws TextParseException, WireParseException {
    byte [] raw = new byte [] {10, 3, 'a', 'b', 'c', 0, 1, 'B', (byte) 0xC0, 1};
    Name e = Name.fromString ("B.abc.");
    DNSInput in = new DNSInput (raw);
    in.jump (6);
    Name n = new Name (in);
    assertEquals (e, n);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="611" endline="621">
public void test_long_jump_compression () throws TextParseException, WireParseException {
    byte [] raw = new byte [] {12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
      12, 12, 12, 12, 12, 12, 12, 12, 3, 'a', 'b', 'c', 0, (byte) 0xC1, 0};
    Name e = Name.fromString ("abc.");
    DNSInput in = new DNSInput (raw);
    in.jump (261);
    Name n = new Name (in);
    assertEquals (e, n);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="623" endline="631">
public void test_bad_compression () throws TextParseException, WireParseException {
    byte [] raw = new byte [] {(byte) 0xC0, 2, 0};
    try {
        new Name (new DNSInput (raw));
        fail ("WireParseException not thrown");
    } catch (WireParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="633" endline="647">
public void test_basic_compression_state_restore () throws TextParseException, WireParseException {
    byte [] raw = new byte [] {10, 3, 'a', 'b', 'c', 0, (byte) 0xC0, 1, 3, 'd', 'e', 'f', 0};
    Name e = Name.fromString ("abc.");
    Name e2 = Name.fromString ("def.");
    DNSInput in = new DNSInput (raw);
    in.jump (6);
    Name n = new Name (in);
    assertEquals (e, n);
    n = new Name (in);
    assertEquals (e2, n);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="649" endline="663">
public void test_two_part_compression_state_restore () throws TextParseException, WireParseException {
    byte [] raw = new byte [] {10, 3, 'a', 'b', 'c', 0, 1, 'B', (byte) 0xC0, 1, 3, 'd', 'e', 'f', 0};
    Name e = Name.fromString ("B.abc.");
    Name e2 = Name.fromString ("def.");
    DNSInput in = new DNSInput (raw);
    in.jump (6);
    Name n = new Name (in);
    assertEquals (e, n);
    n = new Name (in);
    assertEquals (e2, n);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="666" endline="672">
public void test_init_from_name () throws TextParseException {
    Name n = new Name ("A.B.c.d.");
    Name e = new Name ("B.c.d.");
    Name o = new Name (n, 1);
    assertEquals (e, o);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="674" endline="679">
public void test_init_from_name_root () throws TextParseException {
    Name n = new Name ("A.B.c.d.");
    Name o = new Name (n, 4);
    assertEquals (Name.root, o);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="681" endline="690">
public void test_init_from_name_empty () throws TextParseException {
    Name n = new Name ("A.B.c.d.");
    Name n2 = new Name (n, 5);
    assertFalse (n2.isAbsolute ());
    assertFalse (n2.isWild ());
    assertEquals (0, n2.labels ());
    assertEquals (0, n2.length ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="692" endline="700">
public void test_concatenate_basic () throws NameTooLongException, TextParseException {
    Name p = Name.fromString ("A.B");
    Name s = Name.fromString ("c.d.");
    Name e = Name.fromString ("A.B.c.d.");
    Name n = Name.concatenate (p, s);
    assertEquals (e, n);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="702" endline="710">
public void test_concatenate_abs_prefix () throws NameTooLongException, TextParseException {
    Name p = Name.fromString ("A.B.");
    Name s = Name.fromString ("c.d.");
    Name e = Name.fromString ("A.B.");
    Name n = Name.concatenate (p, s);
    assertEquals (e, n);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="712" endline="722">
public void test_concatenate_too_long () throws TextParseException {
    Name p = Name.fromString ("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb");
    Name s = Name.fromString ("ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc.ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd.");
    try {
        Name.concatenate (p, s);
        fail ("NameTooLongException not thrown");
    } catch (NameTooLongException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="724" endline="732">
public void test_relativize () throws TextParseException {
    Name sub = Name.fromString ("a.b.c.");
    Name dom = Name.fromString ("c.");
    Name exp = Name.fromString ("a.b");
    Name n = sub.relativize (dom);
    assertEquals (exp, n);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="734" endline="741">
public void test_relativize_null_origin () throws TextParseException {
    Name sub = Name.fromString ("a.b.c.");
    Name dom = null;
    Name n = sub.relativize (dom);
    assertEquals (sub, n);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="743" endline="750">
public void test_relativize_disjoint () throws TextParseException {
    Name sub = Name.fromString ("a.b.c.");
    Name dom = Name.fromString ("e.f.");
    Name n = sub.relativize (dom);
    assertEquals (sub, n);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="752" endline="760">
public void test_relativize_root () throws TextParseException {
    Name sub = Name.fromString ("a.b.c.");
    Name dom = Name.fromString (".");
    Name exp = Name.fromString ("a.b.c");
    Name n = sub.relativize (dom);
    assertEquals (exp, n);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="762" endline="769">
public void test_wild () throws TextParseException {
    Name sub = Name.fromString ("a.b.c.");
    Name exp = Name.fromString ("*.b.c.");
    Name n = sub.wild (1);
    assertEquals (exp, n);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="771" endline="778">
public void test_wild_abs () throws TextParseException {
    Name sub = Name.fromString ("a.b.c.");
    Name exp = Name.fromString ("*.");
    Name n = sub.wild (3);
    assertEquals (exp, n);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="780" endline="788">
public void test_wild_toobig () throws TextParseException {
    Name sub = Name.fromString ("a.b.c.");
    try {
        sub.wild (4);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="790" endline="798">
public void test_wild_toosmall () throws TextParseException {
    Name sub = Name.fromString ("a.b.c.");
    try {
        sub.wild (0);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="800" endline="810">
public void test_fromDNAME () throws NameTooLongException, TextParseException {
    Name own = new Name ("the.owner.");
    Name alias = new Name ("the.alias.");
    DNAMERecord dnr = new DNAMERecord (own, DClass.IN, 0xABCD, alias);
    Name sub = new Name ("sub.the.owner.");
    Name exp = new Name ("sub.the.alias.");
    Name n = sub.fromDNAME (dnr);
    assertEquals (exp, n);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="812" endline="824">
public void test_fromDNAME_toobig () throws NameTooLongException, TextParseException {
    Name own = new Name ("the.owner.");
    Name alias = new Name ("the.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc.");
    DNAMERecord dnr = new DNAMERecord (own, DClass.IN, 0xABCD, alias);
    Name sub = new Name ("ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd.the.owner.");
    try {
        sub.fromDNAME (dnr);
        fail ("NameTooLongException not thrown");
    } catch (NameTooLongException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="826" endline="835">
public void test_fromDNAME_disjoint () throws NameTooLongException, TextParseException {
    Name own = new Name ("the.owner.");
    Name alias = new Name ("the.alias.");
    DNAMERecord dnr = new DNAMERecord (own, DClass.IN, 0xABCD, alias);
    Name sub = new Name ("sub.the.other");
    assertNull (sub.fromDNAME (dnr));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="837" endline="843">
public void test_subdomain_abs () throws TextParseException {
    Name dom = new Name ("the.domain.");
    Name sub = new Name ("sub.of.the.domain.");
    assertTrue (sub.subdomain (dom));
    assertFalse (dom.subdomain (sub));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="845" endline="851">
public void test_subdomain_rel () throws TextParseException {
    Name dom = new Name ("the.domain");
    Name sub = new Name ("sub.of.the.domain");
    assertTrue (sub.subdomain (dom));
    assertFalse (dom.subdomain (sub));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="853" endline="859">
public void test_subdomain_equal () throws TextParseException {
    Name dom = new Name ("the.domain");
    Name sub = new Name ("the.domain");
    assertTrue (sub.subdomain (dom));
    assertTrue (dom.subdomain (sub));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="861" endline="867">
public void test_toString_abs () throws TextParseException {
    String in = "This.Is.My.Absolute.Name.";
    Name n = new Name (in);
    assertEquals (in, n.toString ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="869" endline="875">
public void test_toString_rel () throws TextParseException {
    String in = "This.Is.My.Relative.Name";
    Name n = new Name (in);
    assertEquals (in, n.toString ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="877" endline="881">
public void test_toString_at () throws TextParseException {
    Name n = new Name ("@", null);
    assertEquals ("@", n.toString ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="883" endline="886">
public void test_toString_root () throws TextParseException {
    assertEquals (".", Name.root.toString ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="888" endline="893">
public void test_toString_wild () throws TextParseException {
    String in = "*.A.b.c.e";
    Name n = new Name (in);
    assertEquals (in, n.toString ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="895" endline="900">
public void test_toString_escaped () throws TextParseException {
    String in = "my.escaped.junk\\128.label.";
    Name n = new Name (in);
    assertEquals (in, n.toString ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="902" endline="908">
public void test_toString_special_char () throws TextParseException, WireParseException {
    byte [] raw = new byte [] {1, '"', 1, '(', 1, ')', 1, '.', 1, ';', 1, '\\', 1, '@', 1, '$', 0};
    String exp = "\\\".\\(.\\).\\..\\;.\\\\.\\@.\\$.";
    Name n = new Name (new DNSInput (raw));
    assertEquals (exp, n.toString ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="912" endline="920">
public void test_rel () throws TextParseException {
    Name n = new Name ("A.Relative.Name");
    try {
        n.toWire (new DNSOutput (), null);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="922" endline="931">
public void test_null_Compression () throws TextParseException {
    byte [] raw = new byte [] {1, 'A', 5, 'B', 'a', 's', 'i', 'c', 4, 'N', 'a', 'm', 'e', 0};
    Name n = new Name ("A.Basic.Name.");
    DNSOutput o = new DNSOutput ();
    n.toWire (o, null);
    assertTrue (Arrays.equals (raw, o.toByteArray ()));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="933" endline="944">
public void test_empty_Compression () throws TextParseException {
    byte [] raw = new byte [] {1, 'A', 5, 'B', 'a', 's', 'i', 'c', 4, 'N', 'a', 'm', 'e', 0};
    Name n = new Name ("A.Basic.Name.");
    Compression c = new Compression ();
    DNSOutput o = new DNSOutput ();
    n.toWire (o, c);
    assertTrue (Arrays.equals (raw, o.toByteArray ()));
    assertEquals (0, c.get (n));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="946" endline="958">
public void test_with_exact_Compression () throws TextParseException {
    Name n = new Name ("A.Basic.Name.");
    Compression c = new Compression ();
    c.add (256, n);
    byte [] exp = new byte [] {(byte) 0xC1, 0x0};
    DNSOutput o = new DNSOutput ();
    n.toWire (o, c);
    assertTrue (Arrays.equals (exp, o.toByteArray ()));
    assertEquals (256, c.get (n));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="960" endline="974">
public void test_with_partial_Compression () throws TextParseException {
    Name d = new Name ("Basic.Name.");
    Name n = new Name ("A.Basic.Name.");
    Compression c = new Compression ();
    c.add (257, d);
    byte [] exp = new byte [] {1, 'A', (byte) 0xC1, 0x1};
    DNSOutput o = new DNSOutput ();
    n.toWire (o, c);
    assertTrue (Arrays.equals (exp, o.toByteArray ()));
    assertEquals (257, c.get (d));
    assertEquals (0, c.get (n));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="976" endline="984">
public void test_0arg_rel () throws TextParseException {
    Name n = new Name ("A.Relative.Name");
    try {
        n.toWire ();
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="986" endline="994">
public void test_0arg () throws TextParseException {
    byte [] raw = new byte [] {1, 'A', 5, 'B', 'a', 's', 'i', 'c', 4, 'N', 'a', 'm', 'e', 0};
    Name n = new Name ("A.Basic.Name.");
    byte [] out = n.toWire ();
    assertTrue (Arrays.equals (raw, out));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="996" endline="1000">
public void test_root () {
    byte [] out = Name.root.toWire ();
    assertTrue (Arrays.equals (new byte [] {0}, out));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="1002" endline="1016">
public void test_3arg () throws TextParseException {
    Name d = new Name ("Basic.Name.");
    Name n = new Name ("A.Basic.Name.");
    Compression c = new Compression ();
    c.add (257, d);
    byte [] exp = new byte [] {1, 'A', (byte) 0xC1, 0x1};
    DNSOutput o = new DNSOutput ();
    n.toWire (o, c, false);
    assertTrue (Arrays.equals (exp, o.toByteArray ()));
    assertEquals (257, c.get (d));
    assertEquals (0, c.get (n));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="1021" endline="1030">
public void test_basic () throws TextParseException {
    byte [] raw = new byte [] {1, 'a', 5, 'b', 'a', 's', 'i', 'c', 4, 'n', 'a', 'm', 'e', 0};
    Name n = new Name ("A.Basic.Name.");
    DNSOutput o = new DNSOutput ();
    n.toWireCanonical (o);
    assertTrue (Arrays.equals (raw, o.toByteArray ()));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="1032" endline="1040">
public void test_0arg () throws TextParseException {
    byte [] raw = new byte [] {1, 'a', 5, 'b', 'a', 's', 'i', 'c', 4, 'n', 'a', 'm', 'e', 0};
    Name n = new Name ("A.Basic.Name.");
    byte [] out = n.toWireCanonical ();
    assertTrue (Arrays.equals (raw, out));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="1042" endline="1046">
public void test_root () {
    byte [] out = Name.root.toWireCanonical ();
    assertTrue (Arrays.equals (new byte [] {0}, out));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="1048" endline="1053">
public void test_empty () throws TextParseException {
    Name n = new Name ("@", null);
    byte [] out = n.toWireCanonical ();
    assertTrue (Arrays.equals (new byte [0], out));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="1055" endline="1069">
public void test_3arg () throws TextParseException {
    Name d = new Name ("Basic.Name.");
    Name n = new Name ("A.Basic.Name.");
    Compression c = new Compression ();
    c.add (257, d);
    byte [] exp = new byte [] {1, 'a', 5, 'b', 'a', 's', 'i', 'c', 4, 'n', 'a', 'm', 'e', 0};
    DNSOutput o = new DNSOutput ();
    n.toWire (o, c, true);
    assertTrue (Arrays.equals (exp, o.toByteArray ()));
    assertEquals (257, c.get (d));
    assertEquals (- 1, c.get (n));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="1074" endline="1078">
public void test_same () throws TextParseException {
    Name n = new Name ("A.Name.");
    assertTrue (n.equals (n));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="1080" endline="1084">
public void test_null () throws TextParseException {
    Name n = new Name ("A.Name.");
    assertFalse (n.equals (null));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="1086" endline="1090">
public void test_notName () throws TextParseException {
    Name n = new Name ("A.Name.");
    assertFalse (n.equals (new Object ()));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="1092" endline="1099">
public void test_abs () throws TextParseException {
    Name n = new Name ("A.Name.");
    Name n2 = new Name ("a.name.");
    assertTrue (n.equals (n2));
    assertTrue (n2.equals (n));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="1101" endline="1108">
public void test_rel () throws TextParseException {
    Name n1 = new Name ("A.Relative.Name");
    Name n2 = new Name ("a.relative.name");
    assertTrue (n1.equals (n2));
    assertTrue (n2.equals (n1));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="1110" endline="1117">
public void test_mixed () throws TextParseException {
    Name n1 = new Name ("A.Name");
    Name n2 = new Name ("a.name.");
    assertFalse (n1.equals (n2));
    assertFalse (n2.equals (n1));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="1119" endline="1126">
public void test_weird () throws TextParseException {
    Name n1 = new Name ("ab.c");
    Name n2 = new Name ("abc.");
    assertFalse (n1.equals (n2));
    assertFalse (n2.equals (n1));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="1131" endline="1139">
public void test_notName () throws TextParseException {
    Name n = new Name ("A.Name");
    try {
        n.compareTo (new Object ());
        fail ("ClassCastException not thrown");
    } catch (ClassCastException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="1141" endline="1145">
public void test_same () throws TextParseException {
    Name n = new Name ("A.Name");
    assertEquals (0, n.compareTo (n));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="1147" endline="1154">
public void test_equal () throws TextParseException {
    Name n1 = new Name ("A.Name.");
    Name n2 = new Name ("a.name.");
    assertEquals (0, n1.compareTo (n2));
    assertEquals (0, n2.compareTo (n1));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="1156" endline="1163">
public void test_close () throws TextParseException {
    Name n1 = new Name ("a.name");
    Name n2 = new Name ("a.name.");
    assertTrue (n1.compareTo (n2) > 0);
    assertTrue (n2.compareTo (n1) < 0);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="1165" endline="1172">
public void test_disjoint () throws TextParseException {
    Name n1 = new Name ("b");
    Name n2 = new Name ("c");
    assertTrue (n1.compareTo (n2) < 0);
    assertTrue (n2.compareTo (n1) > 0);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="1174" endline="1181">
public void test_label_prefix () throws TextParseException {
    Name n1 = new Name ("thisIs.a.");
    Name n2 = new Name ("thisIsGreater.a.");
    assertTrue (n1.compareTo (n2) < 0);
    assertTrue (n2.compareTo (n1) > 0);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="1183" endline="1190">
public void test_more_labels () throws TextParseException {
    Name n1 = new Name ("c.b.a.");
    Name n2 = new Name ("d.c.b.a.");
    assertTrue (n1.compareTo (n2) < 0);
    assertTrue (n2.compareTo (n1) > 0);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="1193" endline="1210">
public void test_canonicalize () throws TextParseException {
    Name n1 = new Name ("ABC.com");
    Name n2 = new Name ("abc.com");
    Name n3 = new Name ("\\193.com");
    Name cn1 = n1.canonicalize ();
    Name cn2 = n2.canonicalize ();
    Name cn3 = n3.canonicalize ();
    assertNotSame (n1, cn1);
    assertEquals (n1, cn1);
    assertSame (n2, cn2);
    assertSame (n3, cn3);
    assertEquals (cn1.toString (), cn2.toString ());
    assertFalse (n1.toString ().equals (n2.toString ()));
    assertEquals (cn1.toString (), cn2.toString ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="1212" endline="1222">
public void test_to_string () throws TextParseException {
    Name n1 = new Name ("abc.com");
    Name n2 = new Name ("abc.com.");
    assertEquals (n1.toString (true), n1.toString (true));
    assertFalse (n2.toString (true).equals (n2.toString (false)));
    assertEquals (n2.toString (true) + ".", n2.toString (false));
    assertEquals (Name.root.toString (true), Name.root.toString (false));
    assertEquals (Name.empty.toString (true), Name.empty.toString (false));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="1224" endline="1236">
public void test_absolute () throws TextParseException {
    Name n1 = new Name ("abc.com");
    Name n2 = new Name ("abc.com.");
    Name n3 = new Name ("abc.com", Name.root);
    Name n4 = new Name ("abc.com", n1);
    Name n5 = new Name ("abc.com\\000");
    assertFalse (n1.isAbsolute ());
    assertTrue (n2.isAbsolute ());
    assertTrue (n3.isAbsolute ());
    assertFalse (n4.isAbsolute ());
    assertFalse (n5.isAbsolute ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/NameTest.java" startline="1238" endline="1249">
public static Test suite () {
    TestSuite s = new TestSuite ();
    s.addTestSuite (Test_String_init.class);
    s.addTestSuite (Test_DNSInput_init.class);
    s.addTestSuite (NameTest.class);
    s.addTestSuite (Test_toWire.class);
    s.addTestSuite (Test_toWireCanonical.class);
    s.addTestSuite (Test_equals.class);
    s.addTestSuite (Test_compareTo.class);
    return s;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/TypeTest.java" startline="41" endline="55">
public void test_string () {
    assertEquals ("CNAME", Type.string (Type.CNAME));
    assertTrue (Type.string (65535).startsWith ("TYPE"));
    try {
        Type.string (- 1);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/TypeTest.java" startline="57" endline="70">
public void test_value () {
    assertEquals (Type.MAILB, Type.value ("MAILB"));
    assertEquals (300, Type.value ("TYPE300"));
    assertEquals (- 1, Type.value ("THIS IS DEFINITELY UNKNOWN"));
    assertEquals (- 1, Type.value (""));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/TypeTest.java" startline="72" endline="75">
public void test_value_2arg () {
    assertEquals (301, Type.value ("301", true));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/TypeTest.java" startline="77" endline="81">
public void test_isRR () {
    assertTrue (Type.isRR (Type.CNAME));
    assertFalse (Type.isRR (Type.IXFR));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/MBRecordTest.java" startline="41" endline="47">
public void test_ctor_0arg () {
    MBRecord d = new MBRecord ();
    assertNull (d.getName ());
    assertNull (d.getAdditionalName ());
    assertNull (d.getMailbox ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/MBRecordTest.java" startline="49" endline="61">
public void test_ctor_4arg () throws TextParseException {
    Name n = Name.fromString ("my.name.");
    Name a = Name.fromString ("my.alias.");
    MBRecord d = new MBRecord (n, DClass.IN, 0xABCDEL, a);
    assertEquals (n, d.getName ());
    assertEquals (Type.MB, d.getType ());
    assertEquals (DClass.IN, d.getDClass ());
    assertEquals (0xABCDEL, d.getTTL ());
    assertEquals (a, d.getAdditionalName ());
    assertEquals (a, d.getMailbox ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/MBRecordTest.java" startline="63" endline="68">
public void test_getObject () {
    MBRecord d = new MBRecord ();
    Record r = d.getObject ();
    assertTrue (r instanceof MBRecord);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/HINFORecordTest.java" startline="43" endline="50">
public void test_ctor_0arg () {
    HINFORecord dr = new HINFORecord ();
    assertNull (dr.getName ());
    assertEquals (0, dr.getType ());
    assertEquals (0, dr.getDClass ());
    assertEquals (0, dr.getTTL ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/HINFORecordTest.java" startline="52" endline="57">
public void test_getObject () {
    HINFORecord dr = new HINFORecord ();
    Record r = dr.getObject ();
    assertTrue (r instanceof HINFORecord);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/HINFORecordTest.java" startline="59" endline="73">
public void test_ctor_5arg () throws TextParseException {
    Name n = Name.fromString ("The.Name.");
    long ttl = 0xABCDL;
    String cpu = "i686 Intel(R) Pentium(R) M processor 1.70GHz GenuineIntel GNU/Linux";
    String os = "Linux troy 2.6.10-gentoo-r6 #8 Wed Apr 6 21:25:04 MDT 2005";
    HINFORecord dr = new HINFORecord (n, DClass.IN, ttl, cpu, os);
    assertEquals (n, dr.getName ());
    assertEquals (DClass.IN, dr.getDClass ());
    assertEquals (Type.HINFO, dr.getType ());
    assertEquals (ttl, dr.getTTL ());
    assertEquals (cpu, dr.getCPU ());
    assertEquals (os, dr.getOS ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/HINFORecordTest.java" startline="75" endline="87">
public void test_ctor_5arg_invalid_CPU () throws TextParseException {
    Name n = Name.fromString ("The.Name.");
    long ttl = 0xABCDL;
    String cpu = "i686 Intel(R) Pentium(R) M \\256 processor 1.70GHz GenuineIntel GNU/Linux";
    String os = "Linux troy 2.6.10-gentoo-r6 #8 Wed Apr 6 21:25:04 MDT 2005";
    try {
        new HINFORecord (n, DClass.IN, ttl, cpu, os);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/HINFORecordTest.java" startline="89" endline="101">
public void test_ctor_5arg_invalid_OS () throws TextParseException {
    Name n = Name.fromString ("The.Name.");
    long ttl = 0xABCDL;
    String cpu = "i686 Intel(R) Pentium(R) M processor 1.70GHz GenuineIntel GNU/Linux";
    String os = "Linux troy 2.6.10-gentoo-r6 \\1 #8 Wed Apr 6 21:25:04 MDT 2005";
    try {
        new HINFORecord (n, DClass.IN, ttl, cpu, os);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/HINFORecordTest.java" startline="103" endline="117">
public void test_rrFromWire () throws IOException {
    String cpu = "Intel(R) Pentium(R) M processor 1.70GHz";
    String os = "Linux troy 2.6.10-gentoo-r6";
    byte [] raw = new byte [] {39, 'I', 'n', 't', 'e', 'l', '(', 'R', ')', ' ', 'P', 'e', 'n', 't', 'i', 'u', 'm', '(', 'R', ')', ' ', 'M', ' ', 'p', 'r', 'o', 'c', 'e', 's', 's', 'o', 'r', ' ', '1', '.', '7', '0', 'G', 'H', 'z', 27, 'L', 'i', 'n', 'u', 'x', ' ', 't', 'r', 'o', 'y', ' ', '2', '.', '6', '.', '1', '0', '-', 'g', 'e', 'n', 't', 'o', 'o', '-', 'r', '6'};
    DNSInput in = new DNSInput (raw);
    HINFORecord dr = new HINFORecord ();
    dr.rrFromWire (in);
    assertEquals (cpu, dr.getCPU ());
    assertEquals (os, dr.getOS ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/HINFORecordTest.java" startline="119" endline="130">
public void test_rdataFromString () throws IOException {
    String cpu = "Intel(R) Pentium(R) M processor 1.70GHz";
    String os = "Linux troy 2.6.10-gentoo-r6";
    Tokenizer t = new Tokenizer ("\"" + cpu + "\" \"" + os + "\"");
    HINFORecord dr = new HINFORecord ();
    dr.rdataFromString (t, null);
    assertEquals (cpu, dr.getCPU ());
    assertEquals (os, dr.getOS ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/HINFORecordTest.java" startline="132" endline="145">
public void test_rdataFromString_invalid_CPU () throws IOException {
    String cpu = "Intel(R) Pentium(R) \\388 M processor 1.70GHz";
    String os = "Linux troy 2.6.10-gentoo-r6";
    Tokenizer t = new Tokenizer ("\"" + cpu + "\" \"" + os + "\"");
    HINFORecord dr = new HINFORecord ();
    try {
        dr.rdataFromString (t, null);
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/HINFORecordTest.java" startline="147" endline="159">
public void test_rdataFromString_invalid_OS () throws IOException {
    String cpu = "Intel(R) Pentium(R) M processor 1.70GHz";
    Tokenizer t = new Tokenizer ("\"" + cpu + "\"");
    HINFORecord dr = new HINFORecord ();
    try {
        dr.rdataFromString (t, null);
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/HINFORecordTest.java" startline="161" endline="171">
public void test_rrToString () throws TextParseException {
    String cpu = "Intel(R) Pentium(R) M processor 1.70GHz";
    String os = "Linux troy 2.6.10-gentoo-r6";
    String exp = "\"" + cpu + "\" \"" + os + "\"";
    HINFORecord dr = new HINFORecord (Name.fromString ("The.Name."), DClass.IN, 0x123, cpu, os);
    assertEquals (exp, dr.rrToString ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/HINFORecordTest.java" startline="173" endline="187">
public void test_rrToWire () throws TextParseException {
    String cpu = "Intel(R) Pentium(R) M processor 1.70GHz";
    String os = "Linux troy 2.6.10-gentoo-r6";
    byte [] raw = new byte [] {39, 'I', 'n', 't', 'e', 'l', '(', 'R', ')', ' ', 'P', 'e', 'n', 't', 'i', 'u', 'm', '(', 'R', ')', ' ', 'M', ' ', 'p', 'r', 'o', 'c', 'e', 's', 's', 'o', 'r', ' ', '1', '.', '7', '0', 'G', 'H', 'z', 27, 'L', 'i', 'n', 'u', 'x', ' ', 't', 'r', 'o', 'y', ' ', '2', '.', '6', '.', '1', '0', '-', 'g', 'e', 'n', 't', 'o', 'o', '-', 'r', '6'};
    HINFORecord dr = new HINFORecord (Name.fromString ("The.Name."), DClass.IN, 0x123, cpu, os);
    DNSOutput out = new DNSOutput ();
    dr.rrToWire (out, null, true);
    assertTrue (Arrays.equals (raw, out.toByteArray ()));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/CompressionTest.java" startline="43" endline="46">
public void setUp () {
    Options.set ("verbosecompression");
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/CompressionTest.java" startline="48" endline="60">
public void test () throws TextParseException {
    Compression c = new Compression ();
    Name n = Name.fromString ("www.amazon.com.");
    c.add (10, n);
    assertEquals (10, c.get (n));
    Name n2 = Name.fromString ("www.cnn.com.");
    c.add (10, n2);
    assertEquals (10, c.get (n2));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/CNAMERecordTest.java" startline="41" endline="47">
public void test_ctor_0arg () {
    CNAMERecord d = new CNAMERecord ();
    assertNull (d.getName ());
    assertNull (d.getTarget ());
    assertNull (d.getAlias ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/CNAMERecordTest.java" startline="49" endline="61">
public void test_ctor_4arg () throws TextParseException {
    Name n = Name.fromString ("my.name.");
    Name a = Name.fromString ("my.alias.");
    CNAMERecord d = new CNAMERecord (n, DClass.IN, 0xABCDEL, a);
    assertEquals (n, d.getName ());
    assertEquals (Type.CNAME, d.getType ());
    assertEquals (DClass.IN, d.getDClass ());
    assertEquals (0xABCDEL, d.getTTL ());
    assertEquals (a, d.getTarget ());
    assertEquals (a, d.getAlias ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/CNAMERecordTest.java" startline="63" endline="68">
public void test_getObject () {
    CNAMERecord d = new CNAMERecord ();
    Record r = d.getObject ();
    assertTrue (r instanceof CNAMERecord);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/ReverseMapTest.java" startline="43" endline="54">
public void test_fromAddress_ipv4 () throws UnknownHostException, TextParseException {
    Name exp = Name.fromString ("1.0.168.192.in-addr.arpa.");
    String addr = "192.168.0.1";
    assertEquals (exp, ReverseMap.fromAddress (addr));
    assertEquals (exp, ReverseMap.fromAddress (addr, Address.IPv4));
    assertEquals (exp, ReverseMap.fromAddress (InetAddress.getByName (addr)));
    assertEquals (exp, ReverseMap.fromAddress (new byte [] {(byte) 192, (byte) 168, (byte) 0, (byte) 1}));
    assertEquals (exp, ReverseMap.fromAddress (new int [] {192, 168, 0, 1}));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/ReverseMapTest.java" startline="56" endline="73">
public void test_fromAddress_ipv6 () throws UnknownHostException, TextParseException {
    Name exp = Name.fromString ("4.3.3.7.0.7.3.0.E.2.A.8.9.1.3.1.3.D.8.0.3.A.5.8.8.B.D.0.1.0.0.2.ip6.arpa.");
    String addr = "2001:0db8:85a3:08d3:1319:8a2e:0370:7334";
    byte [] dat = new byte [] {(byte) 32, (byte) 1, (byte) 13, (byte) 184, (byte) 133, (byte) 163, (byte) 8, (byte) 211, (byte) 19, (byte) 25, (byte) 138, (byte) 46, (byte) 3, (byte) 112, (byte) 115, (byte) 52};
    int [] idat = new int [] {32, 1, 13, 184, 133, 163, 8, 211, 19, 25, 138, 46, 3, 112, 115, 52};
    assertEquals (exp, ReverseMap.fromAddress (addr, Address.IPv6));
    assertEquals (exp, ReverseMap.fromAddress (InetAddress.getByName (addr)));
    assertEquals (exp, ReverseMap.fromAddress (dat));
    assertEquals (exp, ReverseMap.fromAddress (idat));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/ReverseMapTest.java" startline="75" endline="101">
public void test_fromAddress_invalid () {
    try {
        ReverseMap.fromAddress ("A.B.C.D", Address.IPv4);
        fail ("UnknownHostException not thrown");
    } catch (UnknownHostException e) {
    }
    try {
        ReverseMap.fromAddress (new byte [0]);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
    try {
        ReverseMap.fromAddress (new byte [3]);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
    try {
        ReverseMap.fromAddress (new byte [5]);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
    try {
        ReverseMap.fromAddress (new byte [15]);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
    try {
        ReverseMap.fromAddress (new byte [17]);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
    try {
        int [] dat = new int [] {0, 1, 2, 256};
        ReverseMap.fromAddress (dat);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SetResponseTest.java" startline="44" endline="65">
public void test_ctor_1arg () {
    final int [] types = new int [] {SetResponse.UNKNOWN, SetResponse.NXDOMAIN, SetResponse.NXRRSET, SetResponse.DELEGATION, SetResponse.CNAME, SetResponse.DNAME, SetResponse.SUCCESSFUL};
    for (int i = 0;
    i < types.length; ++ i) {
        SetResponse sr = new SetResponse (types [i]);
        assertNull (sr.getNS ());
        assertEquals (types [i] == SetResponse.UNKNOWN, sr.isUnknown ());
        assertEquals (types [i] == SetResponse.NXDOMAIN, sr.isNXDOMAIN ());
        assertEquals (types [i] == SetResponse.NXRRSET, sr.isNXRRSET ());
        assertEquals (types [i] == SetResponse.DELEGATION, sr.isDelegation ());
        assertEquals (types [i] == SetResponse.CNAME, sr.isCNAME ());
        assertEquals (types [i] == SetResponse.DNAME, sr.isDNAME ());
        assertEquals (types [i] == SetResponse.SUCCESSFUL, sr.isSuccessful ());
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SetResponseTest.java" startline="67" endline="74">
public void test_ctor_1arg_toosmall () {
    try {
        new SetResponse (- 1);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException a) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SetResponseTest.java" startline="76" endline="83">
public void test_ctor_1arg_toobig () {
    try {
        new SetResponse (7);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException a) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SetResponseTest.java" startline="85" endline="107">
public void test_ctor_2arg () {
    final int [] types = new int [] {SetResponse.UNKNOWN, SetResponse.NXDOMAIN, SetResponse.NXRRSET, SetResponse.DELEGATION, SetResponse.CNAME, SetResponse.DNAME, SetResponse.SUCCESSFUL};
    for (int i = 0;
    i < types.length; ++ i) {
        RRset rs = new RRset ();
        SetResponse sr = new SetResponse (types [i], rs);
        assertSame (rs, sr.getNS ());
        assertEquals (types [i] == SetResponse.UNKNOWN, sr.isUnknown ());
        assertEquals (types [i] == SetResponse.NXDOMAIN, sr.isNXDOMAIN ());
        assertEquals (types [i] == SetResponse.NXRRSET, sr.isNXRRSET ());
        assertEquals (types [i] == SetResponse.DELEGATION, sr.isDelegation ());
        assertEquals (types [i] == SetResponse.CNAME, sr.isCNAME ());
        assertEquals (types [i] == SetResponse.DNAME, sr.isDNAME ());
        assertEquals (types [i] == SetResponse.SUCCESSFUL, sr.isSuccessful ());
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SetResponseTest.java" startline="109" endline="116">
public void test_ctor_2arg_toosmall () {
    try {
        new SetResponse (- 1, new RRset ());
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException a) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SetResponseTest.java" startline="118" endline="125">
public void test_ctor_2arg_toobig () {
    try {
        new SetResponse (7, new RRset ());
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException a) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SetResponseTest.java" startline="127" endline="148">
public void test_ofType_basic () {
    final int [] types = new int [] {SetResponse.DELEGATION, SetResponse.CNAME, SetResponse.DNAME, SetResponse.SUCCESSFUL};
    for (int i = 0;
    i < types.length; ++ i) {
        SetResponse sr = SetResponse.ofType (types [i]);
        assertNull (sr.getNS ());
        assertEquals (types [i] == SetResponse.UNKNOWN, sr.isUnknown ());
        assertEquals (types [i] == SetResponse.NXDOMAIN, sr.isNXDOMAIN ());
        assertEquals (types [i] == SetResponse.NXRRSET, sr.isNXRRSET ());
        assertEquals (types [i] == SetResponse.DELEGATION, sr.isDelegation ());
        assertEquals (types [i] == SetResponse.CNAME, sr.isCNAME ());
        assertEquals (types [i] == SetResponse.DNAME, sr.isDNAME ());
        assertEquals (types [i] == SetResponse.SUCCESSFUL, sr.isSuccessful ());
        SetResponse sr2 = SetResponse.ofType (types [i]);
        assertNotSame (sr, sr2);
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SetResponseTest.java" startline="150" endline="170">
public void test_ofType_singleton () {
    final int [] types = new int [] {SetResponse.UNKNOWN, SetResponse.NXDOMAIN, SetResponse.NXRRSET};
    for (int i = 0;
    i < types.length; ++ i) {
        SetResponse sr = SetResponse.ofType (types [i]);
        assertNull (sr.getNS ());
        assertEquals (types [i] == SetResponse.UNKNOWN, sr.isUnknown ());
        assertEquals (types [i] == SetResponse.NXDOMAIN, sr.isNXDOMAIN ());
        assertEquals (types [i] == SetResponse.NXRRSET, sr.isNXRRSET ());
        assertEquals (types [i] == SetResponse.DELEGATION, sr.isDelegation ());
        assertEquals (types [i] == SetResponse.CNAME, sr.isCNAME ());
        assertEquals (types [i] == SetResponse.DNAME, sr.isDNAME ());
        assertEquals (types [i] == SetResponse.SUCCESSFUL, sr.isSuccessful ());
        SetResponse sr2 = SetResponse.ofType (types [i]);
        assertSame (sr, sr2);
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SetResponseTest.java" startline="172" endline="179">
public void test_ofType_toosmall () {
    try {
        SetResponse.ofType (- 1);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SetResponseTest.java" startline="181" endline="188">
public void test_ofType_toobig () {
    try {
        SetResponse.ofType (7);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SetResponseTest.java" startline="190" endline="206">
public void test_addRRset () throws TextParseException, UnknownHostException {
    RRset rrs = new RRset ();
    rrs.addRR (new ARecord (Name.fromString ("The.Name."), DClass.IN, 0xABCD, InetAddress.getByName ("192.168.0.1")));
    rrs.addRR (new ARecord (Name.fromString ("The.Name."), DClass.IN, 0xABCD, InetAddress.getByName ("192.168.0.2")));
    SetResponse sr = new SetResponse (SetResponse.SUCCESSFUL);
    sr.addRRset (rrs);
    RRset [] exp = new RRset [] {rrs};
    assertTrue (Arrays.equals (exp, sr.answers ()));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SetResponseTest.java" startline="208" endline="236">
public void test_addRRset_multiple () throws TextParseException, UnknownHostException {
    RRset rrs = new RRset ();
    rrs.addRR (new ARecord (Name.fromString ("The.Name."), DClass.IN, 0xABCD, InetAddress.getByName ("192.168.0.1")));
    rrs.addRR (new ARecord (Name.fromString ("The.Name."), DClass.IN, 0xABCD, InetAddress.getByName ("192.168.0.2")));
    RRset rrs2 = new RRset ();
    rrs2.addRR (new ARecord (Name.fromString ("The.Other.Name."), DClass.IN, 0xABCE, InetAddress.getByName ("192.168.1.1")));
    rrs2.addRR (new ARecord (Name.fromString ("The.Other.Name."), DClass.IN, 0xABCE, InetAddress.getByName ("192.168.1.2")));
    SetResponse sr = new SetResponse (SetResponse.SUCCESSFUL);
    sr.addRRset (rrs);
    sr.addRRset (rrs2);
    RRset [] exp = new RRset [] {rrs, rrs2};
    assertTrue (Arrays.equals (exp, sr.answers ()));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SetResponseTest.java" startline="238" endline="242">
public void test_answers_nonSUCCESSFUL () {
    SetResponse sr = new SetResponse (SetResponse.UNKNOWN, new RRset ());
    assertNull (sr.answers ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SetResponseTest.java" startline="244" endline="254">
public void test_getCNAME () throws TextParseException, UnknownHostException {
    RRset rrs = new RRset ();
    CNAMERecord cr = new CNAMERecord (Name.fromString ("The.Name."), DClass.IN, 0xABCD, Name.fromString ("The.Alias."));
    rrs.addRR (cr);
    SetResponse sr = new SetResponse (SetResponse.CNAME, rrs);
    assertEquals (cr, sr.getCNAME ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SetResponseTest.java" startline="256" endline="266">
public void test_getDNAME () throws TextParseException, UnknownHostException {
    RRset rrs = new RRset ();
    DNAMERecord dr = new DNAMERecord (Name.fromString ("The.Name."), DClass.IN, 0xABCD, Name.fromString ("The.Alias."));
    rrs.addRR (dr);
    SetResponse sr = new SetResponse (SetResponse.DNAME, rrs);
    assertEquals (dr, sr.getDNAME ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SetResponseTest.java" startline="268" endline="295">
public void test_toString () throws TextParseException, UnknownHostException {
    final int [] types = new int [] {SetResponse.UNKNOWN, SetResponse.NXDOMAIN, SetResponse.NXRRSET, SetResponse.DELEGATION, SetResponse.CNAME, SetResponse.DNAME, SetResponse.SUCCESSFUL};
    RRset rrs = new RRset ();
    rrs.addRR (new ARecord (Name.fromString ("The.Name."), DClass.IN, 0xABCD, InetAddress.getByName ("192.168.0.1")));
    final String [] labels = new String [] {"unknown", "NXDOMAIN", "NXRRSET", "delegation: " + rrs, "CNAME: " + rrs, "DNAME: " + rrs, "successful"};
    for (int i = 0;
    i < types.length; ++ i) {
        SetResponse sr = new SetResponse (types [i], rrs);
        assertEquals (labels [i], sr.toString ());
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/MXRecordTest.java" startline="42" endline="47">
public void test_getObject () {
    MXRecord d = new MXRecord ();
    Record r = d.getObject ();
    assertTrue (r instanceof MXRecord);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/MXRecordTest.java" startline="49" endline="62">
public void test_ctor_5arg () throws TextParseException {
    Name n = Name.fromString ("My.Name.");
    Name m = Name.fromString ("My.OtherName.");
    MXRecord d = new MXRecord (n, DClass.IN, 0xABCDEL, 0xF1, m);
    assertEquals (n, d.getName ());
    assertEquals (Type.MX, d.getType ());
    assertEquals (DClass.IN, d.getDClass ());
    assertEquals (0xABCDEL, d.getTTL ());
    assertEquals (0xF1, d.getPriority ());
    assertEquals (m, d.getTarget ());
    assertEquals (m, d.getAdditionalName ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/MXRecordTest.java" startline="64" endline="84">
public void test_rrToWire () throws TextParseException {
    Name n = Name.fromString ("My.Name.");
    Name m = Name.fromString ("M.O.n.");
    MXRecord mr = new MXRecord (n, DClass.IN, 0xB12FL, 0x1F2B, m);
    DNSOutput dout = new DNSOutput ();
    mr.rrToWire (dout, null, true);
    byte [] out = dout.toByteArray ();
    byte [] exp = new byte [] {0x1F, 0x2B, 1, 'm', 1, 'o', 1, 'n', 0};
    assertTrue (Arrays.equals (exp, out));
    dout = new DNSOutput ();
    mr.rrToWire (dout, null, false);
    out = dout.toByteArray ();
    exp = new byte [] {0x1F, 0x2B, 1, 'M', 1, 'O', 1, 'n', 0};
    assertTrue (Arrays.equals (exp, out));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/MFRecordTest.java" startline="41" endline="47">
public void test_ctor_0arg () {
    MFRecord d = new MFRecord ();
    assertNull (d.getName ());
    assertNull (d.getAdditionalName ());
    assertNull (d.getMailAgent ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/MFRecordTest.java" startline="49" endline="61">
public void test_ctor_4arg () throws TextParseException {
    Name n = Name.fromString ("my.name.");
    Name a = Name.fromString ("my.alias.");
    MFRecord d = new MFRecord (n, DClass.IN, 0xABCDEL, a);
    assertEquals (n, d.getName ());
    assertEquals (Type.MF, d.getType ());
    assertEquals (DClass.IN, d.getDClass ());
    assertEquals (0xABCDEL, d.getTTL ());
    assertEquals (a, d.getAdditionalName ());
    assertEquals (a, d.getMailAgent ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/MFRecordTest.java" startline="63" endline="68">
public void test_getObject () {
    MFRecord d = new MFRecord ();
    Record r = d.getObject ();
    assertTrue (r instanceof MFRecord);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/AAAARecordTest.java" startline="51" endline="60">
protected void setUp () throws TextParseException, UnknownHostException {
    m_an = Name.fromString ("My.Absolute.Name.");
    m_rn = Name.fromString ("My.Relative.Name");
    m_addr_string = "2001:db8:85a3:8d3:1319:8a2e:370:7334";
    m_addr = InetAddress.getByName (m_addr_string);
    m_addr_bytes = m_addr.getAddress ();
    m_ttl = 0x13579;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/AAAARecordTest.java" startline="62" endline="70">
public void test_ctor_0arg () throws UnknownHostException {
    AAAARecord ar = new AAAARecord ();
    assertNull (ar.getName ());
    assertEquals (0, ar.getType ());
    assertEquals (0, ar.getDClass ());
    assertEquals (0, ar.getTTL ());
    assertNull (ar.getAddress ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/AAAARecordTest.java" startline="72" endline="77">
public void test_getObject () {
    AAAARecord ar = new AAAARecord ();
    Record r = ar.getObject ();
    assertTrue (r instanceof AAAARecord);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/AAAARecordTest.java" startline="79" endline="103">
public void test_ctor_4arg () {
    AAAARecord ar = new AAAARecord (m_an, DClass.IN, m_ttl, m_addr);
    assertEquals (m_an, ar.getName ());
    assertEquals (Type.AAAA, ar.getType ());
    assertEquals (DClass.IN, ar.getDClass ());
    assertEquals (m_ttl, ar.getTTL ());
    assertEquals (m_addr, ar.getAddress ());
    try {
        new AAAARecord (m_rn, DClass.IN, m_ttl, m_addr);
        fail ("RelativeNameException not thrown");
    } catch (RelativeNameException e) {
    }
    try {
        new AAAARecord (m_an, DClass.IN, m_ttl, InetAddress.getByName ("192.168.0.1"));
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    } catch (UnknownHostException e) {
        fail (e.getMessage ());
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/AAAARecordTest.java" startline="105" endline="113">
public void test_rrFromWire () throws IOException {
    DNSInput di = new DNSInput (m_addr_bytes);
    AAAARecord ar = new AAAARecord ();
    ar.rrFromWire (di);
    assertEquals (m_addr, ar.getAddress ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/AAAARecordTest.java" startline="115" endline="132">
public void test_rdataFromString () throws IOException {
    Tokenizer t = new Tokenizer (m_addr_string);
    AAAARecord ar = new AAAARecord ();
    ar.rdataFromString (t, null);
    assertEquals (m_addr, ar.getAddress ());
    t = new Tokenizer ("193.160.232.1");
    ar = new AAAARecord ();
    try {
        ar.rdataFromString (t, null);
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/AAAARecordTest.java" startline="134" endline="138">
public void test_rrToString () {
    AAAARecord ar = new AAAARecord (m_an, DClass.IN, m_ttl, m_addr);
    assertEquals (m_addr_string, ar.rrToString ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/AAAARecordTest.java" startline="140" endline="153">
public void test_rrToWire () {
    AAAARecord ar = new AAAARecord (m_an, DClass.IN, m_ttl, m_addr);
    DNSOutput dout = new DNSOutput ();
    ar.rrToWire (dout, null, true);
    assertTrue (Arrays.equals (m_addr_bytes, dout.toByteArray ()));
    dout = new DNSOutput ();
    ar.rrToWire (dout, null, false);
    assertTrue (Arrays.equals (m_addr_bytes, dout.toByteArray ()));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/KEYBaseTest.java" startline="46" endline="46">
public TestClass () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/KEYBaseTest.java" startline="48" endline="52">
public TestClass (Name name, int type, int dclass, long ttl, int flags, int proto, int alg, byte [] key) {
    super (name, type, dclass, ttl, flags, proto, alg, key);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/KEYBaseTest.java" startline="54" endline="57">
public Record getObject () {
    return null;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/KEYBaseTest.java" startline="59" endline="61">
void rdataFromString (Tokenizer st, Name origin) throws IOException {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/KEYBaseTest.java" startline="64" endline="86">
public void test_ctor () throws TextParseException {
    TestClass tc = new TestClass ();
    assertEquals (0, tc.getFlags ());
    assertEquals (0, tc.getProtocol ());
    assertEquals (0, tc.getAlgorithm ());
    assertNull (tc.getKey ());
    Name n = Name.fromString ("my.name.");
    byte [] key = new byte [] {0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF};
    tc = new TestClass (n, Type.KEY, DClass.IN, 100L, 0xFF, 0xF, 0xE, key);
    assertSame (n, tc.getName ());
    assertEquals (Type.KEY, tc.getType ());
    assertEquals (DClass.IN, tc.getDClass ());
    assertEquals (100L, tc.getTTL ());
    assertEquals (0xFF, tc.getFlags ());
    assertEquals (0xF, tc.getProtocol ());
    assertEquals (0xE, tc.getAlgorithm ());
    assertTrue (Arrays.equals (key, tc.getKey ()));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/KEYBaseTest.java" startline="88" endline="112">
public void test_rrFromWire () throws IOException {
    byte [] raw = new byte [] {(byte) 0xAB, (byte) 0xCD, (byte) 0xEF, (byte) 0x19, 1, 2, 3, 4, 5};
    DNSInput in = new DNSInput (raw);
    TestClass tc = new TestClass ();
    tc.rrFromWire (in);
    assertEquals (0xABCD, tc.getFlags ());
    assertEquals (0xEF, tc.getProtocol ());
    assertEquals (0x19, tc.getAlgorithm ());
    assertTrue (Arrays.equals (new byte [] {1, 2, 3, 4, 5}, tc.getKey ()));
    raw = new byte [] {(byte) 0xBA, (byte) 0xDA, (byte) 0xFF, (byte) 0x28};
    in = new DNSInput (raw);
    tc = new TestClass ();
    tc.rrFromWire (in);
    assertEquals (0xBADA, tc.getFlags ());
    assertEquals (0xFF, tc.getProtocol ());
    assertEquals (0x28, tc.getAlgorithm ());
    assertNull (tc.getKey ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/KEYBaseTest.java" startline="114" endline="136">
public void test_rrToString () throws IOException, TextParseException {
    Name n = Name.fromString ("my.name.");
    byte [] key = new byte [] {0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF};
    TestClass tc = new TestClass (n, Type.KEY, DClass.IN, 100L, 0xFF, 0xF, 0xE, null);
    String out = tc.rrToString ();
    assertEquals ("255 15 14", out);
    tc = new TestClass (n, Type.KEY, DClass.IN, 100L, 0xFF, 0xF, 0xE, key);
    out = tc.rrToString ();
    assertEquals ("255 15 14 " + base64.toString (key), out);
    Options.set ("multiline");
    out = tc.rrToString ();
    assertEquals ("255 15 14 (\n\t" + base64.toString (key) + " ) ; key_tag = 18509", out);
    Options.unset ("multiline");
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/KEYBaseTest.java" startline="138" endline="164">
public void test_getFootprint () throws TextParseException {
    Name n = Name.fromString ("my.name.");
    byte [] key = new byte [] {0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF};
    TestClass tc = new TestClass (n, Type.KEY, DClass.IN, 100L, 0xFF, 0xF, DNSSEC.Algorithm.RSAMD5, key);
    int foot = tc.getFootprint ();
    assertEquals (0xD0E, foot);
    assertEquals (foot, tc.getFootprint ());
    tc = new TestClass (n, Type.KEY, DClass.IN, 100L, 0x89AB, 0xCD, 0xEF, new byte [] {0x12, 0x34, 0x56});
    foot = tc.getFootprint ();
    assertEquals (0xBFCF, foot);
    assertEquals (foot, tc.getFootprint ());
    tc = new TestClass ();
    assertEquals (0, tc.getFootprint ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/KEYBaseTest.java" startline="166" endline="186">
public void test_rrToWire () throws IOException, TextParseException {
    Name n = Name.fromString ("my.name.");
    byte [] key = new byte [] {0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF};
    TestClass tc = new TestClass (n, Type.KEY, DClass.IN, 100L, 0x7689, 0xAB, 0xCD, key);
    byte [] exp = new byte [] {(byte) 0x76, (byte) 0x89, (byte) 0xAB, (byte) 0xCD, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
    DNSOutput o = new DNSOutput ();
    tc.rrToWire (o, null, true);
    assertTrue (Arrays.equals (exp, o.toByteArray ()));
    o = new DNSOutput ();
    tc.rrToWire (o, null, false);
    assertTrue (Arrays.equals (exp, o.toByteArray ()));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSInputTest.java" startline="45" endline="48">
private void assertEquals (byte [] exp, byte [] act) {
    assertTrue (Arrays.equals (exp, act));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSInputTest.java" startline="50" endline="54">
public void setUp () {
    m_raw = new byte [] {0, 1, 2, 3, 4, 5, (byte) 255, (byte) 255, (byte) 255, (byte) 255};
    m_di = new DNSInput (m_raw);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSInputTest.java" startline="56" endline="60">
public void test_initial_state () {
    assertEquals (0, m_di.current ());
    assertEquals (10, m_di.remaining ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSInputTest.java" startline="62" endline="67">
public void test_jump1 () {
    m_di.jump (1);
    assertEquals (1, m_di.current ());
    assertEquals (9, m_di.remaining ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSInputTest.java" startline="69" endline="74">
public void test_jump2 () {
    m_di.jump (9);
    assertEquals (9, m_di.current ());
    assertEquals (1, m_di.remaining ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSInputTest.java" startline="76" endline="85">
public void test_jump_invalid () {
    try {
        m_di.jump (10);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSInputTest.java" startline="87" endline="92">
public void test_setActive () {
    m_di.setActive (5);
    assertEquals (0, m_di.current ());
    assertEquals (5, m_di.remaining ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSInputTest.java" startline="94" endline="99">
public void test_setActive_boundary1 () {
    m_di.setActive (10);
    assertEquals (0, m_di.current ());
    assertEquals (10, m_di.remaining ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSInputTest.java" startline="101" endline="106">
public void test_setActive_boundary2 () {
    m_di.setActive (0);
    assertEquals (0, m_di.current ());
    assertEquals (0, m_di.remaining ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSInputTest.java" startline="108" endline="117">
public void test_setActive_invalid () {
    try {
        m_di.setActive (11);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSInputTest.java" startline="119" endline="130">
public void test_clearActive () {
    m_di.clearActive ();
    assertEquals (0, m_di.current ());
    assertEquals (10, m_di.remaining ());
    m_di.setActive (5);
    m_di.clearActive ();
    assertEquals (0, m_di.current ());
    assertEquals (10, m_di.remaining ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSInputTest.java" startline="132" endline="141">
public void test_restore_invalid () {
    try {
        m_di.restore ();
        fail ("IllegalStateException not thrown");
    } catch (IllegalStateException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSInputTest.java" startline="143" endline="157">
public void test_save_restore () {
    m_di.jump (4);
    assertEquals (4, m_di.current ());
    assertEquals (6, m_di.remaining ());
    m_di.save ();
    m_di.jump (0);
    assertEquals (0, m_di.current ());
    assertEquals (10, m_di.remaining ());
    m_di.restore ();
    assertEquals (4, m_di.current ());
    assertEquals (6, m_di.remaining ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSInputTest.java" startline="159" endline="165">
public void test_readU8_basic () throws WireParseException {
    int v1 = m_di.readU8 ();
    assertEquals (1, m_di.current ());
    assertEquals (9, m_di.remaining ());
    assertEquals (0, v1);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSInputTest.java" startline="167" endline="182">
public void test_readU8_maxval () throws WireParseException {
    m_di.jump (9);
    int v1 = m_di.readU8 ();
    assertEquals (10, m_di.current ());
    assertEquals (0, m_di.remaining ());
    assertEquals (255, v1);
    try {
        v1 = m_di.readU8 ();
        fail ("WireParseException not thrown");
    } catch (WireParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSInputTest.java" startline="184" endline="194">
public void test_readU16_basic () throws WireParseException {
    int v1 = m_di.readU16 ();
    assertEquals (2, m_di.current ());
    assertEquals (8, m_di.remaining ());
    assertEquals (1, v1);
    m_di.jump (1);
    v1 = m_di.readU16 ();
    assertEquals (258, v1);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSInputTest.java" startline="196" endline="212">
public void test_readU16_maxval () throws WireParseException {
    m_di.jump (8);
    int v = m_di.readU16 ();
    assertEquals (10, m_di.current ());
    assertEquals (0, m_di.remaining ());
    assertEquals (0xFFFF, v);
    try {
        m_di.jump (9);
        m_di.readU16 ();
        fail ("WireParseException not thrown");
    } catch (WireParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSInputTest.java" startline="214" endline="220">
public void test_readU32_basic () throws WireParseException {
    long v1 = m_di.readU32 ();
    assertEquals (4, m_di.current ());
    assertEquals (6, m_di.remaining ());
    assertEquals (66051, v1);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSInputTest.java" startline="222" endline="238">
public void test_readU32_maxval () throws WireParseException {
    m_di.jump (6);
    long v = m_di.readU32 ();
    assertEquals (10, m_di.current ());
    assertEquals (0, m_di.remaining ());
    assertEquals (0xFFFFFFFFL, v);
    try {
        m_di.jump (7);
        m_di.readU32 ();
        fail ("WireParseException not thrown");
    } catch (WireParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSInputTest.java" startline="240" endline="250">
public void test_readByteArray_0arg () throws WireParseException {
    m_di.jump (1);
    byte [] out = m_di.readByteArray ();
    assertEquals (10, m_di.current ());
    assertEquals (0, m_di.remaining ());
    assertEquals (9, out.length);
    for (int i = 0;
    i < 9; ++ i) {
        assertEquals (m_raw [i + 1], out [i]);
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSInputTest.java" startline="252" endline="258">
public void test_readByteArray_0arg_boundary () throws WireParseException {
    m_di.jump (9);
    m_di.readU8 ();
    byte [] out = m_di.readByteArray ();
    assertEquals (0, out.length);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSInputTest.java" startline="260" endline="268">
public void test_readByteArray_1arg () throws WireParseException {
    byte [] out = m_di.readByteArray (2);
    assertEquals (2, m_di.current ());
    assertEquals (8, m_di.remaining ());
    assertEquals (2, out.length);
    assertEquals (0, out [0]);
    assertEquals (1, out [1]);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSInputTest.java" startline="270" endline="276">
public void test_readByteArray_1arg_boundary () throws WireParseException {
    byte [] out = m_di.readByteArray (10);
    assertEquals (10, m_di.current ());
    assertEquals (0, m_di.remaining ());
    assertEquals (m_raw, out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSInputTest.java" startline="278" endline="287">
public void test_readByteArray_1arg_invalid () {
    try {
        m_di.readByteArray (11);
        fail ("WireParseException not thrown");
    } catch (WireParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSInputTest.java" startline="289" endline="300">
public void test_readByteArray_3arg () throws WireParseException {
    byte [] data = new byte [5];
    m_di.jump (4);
    m_di.readByteArray (data, 1, 4);
    assertEquals (8, m_di.current ());
    assertEquals (0, data [0]);
    for (int i = 0;
    i < 4; ++ i) {
        assertEquals (m_raw [i + 4], data [i + 1]);
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSInputTest.java" startline="302" endline="309">
public void test_readCountedSting () throws WireParseException {
    m_di.jump (1);
    byte [] out = m_di.readCountedString ();
    assertEquals (1, out.length);
    assertEquals (3, m_di.current ());
    assertEquals (out [0], 2);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/OptionsTest.java" startline="41" endline="45">
public void setUp () {
    Options.clear ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/OptionsTest.java" startline="47" endline="58">
public void test_set_1arg () {
    Options.set ("Option1");
    assertEquals ("true", Options.value ("option1"));
    Options.set ("OPTION2");
    assertEquals ("true", Options.value ("option1"));
    assertEquals ("true", Options.value ("OpTIOn2"));
    Options.set ("option2");
    assertEquals ("true", Options.value ("option2"));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/OptionsTest.java" startline="60" endline="72">
public void test_set_2arg () {
    Options.set ("OPTION1", "Value1");
    assertEquals ("value1", Options.value ("Option1"));
    Options.set ("option2", "value2");
    assertEquals ("value1", Options.value ("Option1"));
    assertEquals ("value2", Options.value ("OPTION2"));
    Options.set ("OPTION2", "value2b");
    assertEquals ("value1", Options.value ("Option1"));
    assertEquals ("value2b", Options.value ("option2"));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/OptionsTest.java" startline="74" endline="82">
public void test_check () {
    assertFalse (Options.check ("No Options yet"));
    Options.set ("First Option");
    assertFalse (Options.check ("Not a valid option name"));
    assertTrue (Options.check ("First Option"));
    assertTrue (Options.check ("FIRST option"));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/OptionsTest.java" startline="84" endline="101">
public void test_unset () {
    Options.unset ("Not an option Name");
    Options.set ("Temporary Option");
    assertTrue (Options.check ("Temporary Option"));
    Options.unset ("Temporary Option");
    assertFalse (Options.check ("Temporary Option"));
    Options.set ("Temporary Option");
    assertTrue (Options.check ("Temporary Option"));
    Options.unset ("temporary option");
    assertFalse (Options.check ("Temporary Option"));
    Options.unset ("Still Not an Option Name");
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/OptionsTest.java" startline="103" endline="111">
public void test_value () {
    assertNull (Options.value ("Table is Null"));
    Options.set ("Testing Option");
    assertNull (Options.value ("Not an Option Name"));
    assertEquals ("true", Options.value ("Testing OPTION"));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/OptionsTest.java" startline="113" endline="127">
public void test_intValue () {
    assertEquals (- 1, Options.intValue ("Table is Null"));
    Options.set ("A Boolean Option");
    Options.set ("An Int Option", "13");
    Options.set ("Not An Int Option", "NotAnInt");
    Options.set ("A Negative Int Value", "-1000");
    assertEquals (- 1, Options.intValue ("A Boolean Option"));
    assertEquals (- 1, Options.intValue ("Not an Option NAME"));
    assertEquals (13, Options.intValue ("an int option"));
    assertEquals (- 1, Options.intValue ("NOT an INT option"));
    assertEquals (- 1, Options.intValue ("A negative int Value"));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/OptionsTest.java" startline="129" endline="146">
public void test_systemProperty () {
    System.setProperty ("dnsjava.options", "booleanOption,valuedOption1=10,valuedOption2=NotAnInteger");
    Options.refresh ();
    assertTrue (Options.check ("booleanOPTION"));
    assertTrue (Options.check ("booleanOption"));
    assertTrue (Options.check ("valuedOption1"));
    assertTrue (Options.check ("ValuedOption2"));
    assertEquals ("true", Options.value ("booleanOption"));
    assertEquals (- 1, Options.intValue ("BOOLEANOPTION"));
    assertEquals ("10", Options.value ("valuedOption1"));
    assertEquals (10, Options.intValue ("valuedOption1"));
    assertEquals ("notaninteger", Options.value ("VALUEDOPTION2"));
    assertEquals (- 1, Options.intValue ("valuedOption2"));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/AddressTest.java" startline="44" endline="47">
private void assertEquals (byte [] exp, byte [] act) {
    assertTrue (Arrays.equals (exp, act));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/AddressTest.java" startline="49" endline="55">
private void assertEquals (int [] exp, int [] act) {
    assertEquals (exp.length, act.length);
    for (int i = 0;
    i < exp.length; ++ i) {
        assertEquals ("i=" + i, exp [i], act [i]);
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/AddressTest.java" startline="57" endline="65">
public void test_toByteArray_invalid () {
    try {
        Address.toByteArray ("doesn't matter", 3);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/AddressTest.java" startline="67" endline="79">
public void test_toByteArray_IPv4 () {
    byte [] exp = new byte [] {(byte) 198, (byte) 121, (byte) 10, (byte) 234};
    byte [] ret = Address.toByteArray ("198.121.10.234", Address.IPv4);
    assertEquals (exp, ret);
    exp = new byte [] {0, 0, 0, 0};
    ret = Address.toByteArray ("0.0.0.0", Address.IPv4);
    assertEquals (exp, ret);
    exp = new byte [] {(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF};
    ret = Address.toByteArray ("255.255.255.255", Address.IPv4);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/AddressTest.java" startline="81" endline="118">
public void test_toByteArray_IPv4_invalid () {
    assertNull (Address.toByteArray ("A.B.C.D", Address.IPv4));
    assertNull (Address.toByteArray ("128...", Address.IPv4));
    assertNull (Address.toByteArray ("128.121", Address.IPv4));
    assertNull (Address.toByteArray ("128.111.8", Address.IPv4));
    assertNull (Address.toByteArray ("128.198.10.", Address.IPv4));
    assertNull (Address.toByteArray ("128.121.90..10", Address.IPv4));
    assertNull (Address.toByteArray ("128.121..90.10", Address.IPv4));
    assertNull (Address.toByteArray ("128..121.90.10", Address.IPv4));
    assertNull (Address.toByteArray (".128.121.90.10", Address.IPv4));
    assertNull (Address.toByteArray ("128.121.90.256", Address.IPv4));
    assertNull (Address.toByteArray ("128.121.256.10", Address.IPv4));
    assertNull (Address.toByteArray ("128.256.90.10", Address.IPv4));
    assertNull (Address.toByteArray ("256.121.90.10", Address.IPv4));
    assertNull (Address.toByteArray ("128.121.90.-1", Address.IPv4));
    assertNull (Address.toByteArray ("128.121.-1.10", Address.IPv4));
    assertNull (Address.toByteArray ("128.-1.90.10", Address.IPv4));
    assertNull (Address.toByteArray ("-1.121.90.10", Address.IPv4));
    assertNull (Address.toByteArray ("120.121.90.10.10", Address.IPv4));
    assertNull (Address.toByteArray ("120.121.90.010", Address.IPv4));
    assertNull (Address.toByteArray ("120.121.090.10", Address.IPv4));
    assertNull (Address.toByteArray ("120.021.90.10", Address.IPv4));
    assertNull (Address.toByteArray ("020.121.90.10", Address.IPv4));
    assertNull (Address.toByteArray ("1120.121.90.10", Address.IPv4));
    assertNull (Address.toByteArray ("120.2121.90.10", Address.IPv4));
    assertNull (Address.toByteArray ("120.121.4190.10", Address.IPv4));
    assertNull (Address.toByteArray ("120.121.190.1000", Address.IPv4));
    assertNull (Address.toByteArray ("", Address.IPv4));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/AddressTest.java" startline="120" endline="200">
public void test_toByteArray_IPv6 () {
    byte [] exp = new byte [] {(byte) 32, (byte) 1, (byte) 13, (byte) 184, (byte) 133, (byte) 163, (byte) 8, (byte) 211, (byte) 19, (byte) 25, (byte) 138, (byte) 46, (byte) 3, (byte) 112, (byte) 115, (byte) 52};
    byte [] ret = Address.toByteArray ("2001:0db8:85a3:08d3:1319:8a2e:0370:7334", Address.IPv6);
    assertEquals (exp, ret);
    ret = Address.toByteArray ("2001:db8:85a3:8d3:1319:8a2e:370:7334", Address.IPv6);
    assertEquals (exp, ret);
    ret = Address.toByteArray ("2001:DB8:85A3:8D3:1319:8A2E:370:7334", Address.IPv6);
    assertEquals (exp, ret);
    exp = new byte [] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    ret = Address.toByteArray ("0:0:0:0:0:0:0:0", Address.IPv6);
    assertEquals (exp, ret);
    exp = new byte [] {(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF};
    ret = Address.toByteArray ("FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF", Address.IPv6);
    assertEquals (exp, ret);
    exp = new byte [] {(byte) 32, (byte) 1, (byte) 13, (byte) 184, (byte) 0, (byte) 0, (byte) 8, (byte) 211, (byte) 19, (byte) 25, (byte) 138, (byte) 46, (byte) 3, (byte) 112, (byte) 115, (byte) 52};
    ret = Address.toByteArray ("2001:0db8:0000:08d3:1319:8a2e:0370:7334", Address.IPv6);
    assertEquals (exp, ret);
    ret = Address.toByteArray ("2001:0db8::08d3:1319:8a2e:0370:7334", Address.IPv6);
    assertEquals (exp, ret);
    exp = new byte [] {(byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 133, (byte) 163, (byte) 8, (byte) 211, (byte) 19, (byte) 25, (byte) 138, (byte) 46, (byte) 3, (byte) 112, (byte) 115, (byte) 52};
    ret = Address.toByteArray ("0000:0000:85a3:08d3:1319:8a2e:0370:7334", Address.IPv6);
    assertEquals (exp, ret);
    ret = Address.toByteArray ("::85a3:08d3:1319:8a2e:0370:7334", Address.IPv6);
    assertEquals (exp, ret);
    exp = new byte [] {(byte) 32, (byte) 1, (byte) 13, (byte) 184, (byte) 133, (byte) 163, (byte) 8, (byte) 211, (byte) 19, (byte) 25, (byte) 138, (byte) 46, (byte) 0, (byte) 0, (byte) 0, (byte) 0};
    ret = Address.toByteArray ("2001:0db8:85a3:08d3:1319:8a2e:0:0", Address.IPv6);
    assertEquals (exp, ret);
    ret = Address.toByteArray ("2001:0db8:85a3:08d3:1319:8a2e::", Address.IPv6);
    assertEquals (exp, ret);
    exp = new byte [] {(byte) 32, (byte) 1, (byte) 13, (byte) 184, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 3, (byte) 112, (byte) 115, (byte) 52};
    ret = Address.toByteArray ("2001:0db8:0000:0000:0000:0000:0370:7334", Address.IPv6);
    assertEquals (exp, ret);
    ret = Address.toByteArray ("2001:0db8:0:0:0:0:0370:7334", Address.IPv6);
    assertEquals (exp, ret);
    ret = Address.toByteArray ("2001:0db8::0:0370:7334", Address.IPv6);
    assertEquals (exp, ret);
    ret = Address.toByteArray ("2001:db8::370:7334", Address.IPv6);
    assertEquals (exp, ret);
    exp = new byte [] {(byte) 32, (byte) 1, (byte) 13, (byte) 184, (byte) 133, (byte) 163, (byte) 8, (byte) 211, (byte) 19, (byte) 25, (byte) 138, (byte) 46, (byte) 0xC0, (byte) 0xA8, (byte) 0x59, (byte) 0x09};
    ret = Address.toByteArray ("2001:0db8:85a3:08d3:1319:8a2e:192.168.89.9", Address.IPv6);
    assertEquals (exp, ret);
    exp = new byte [] {(byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0xC0, (byte) 0xA8, (byte) 0x59, (byte) 0x09};
    ret = Address.toByteArray ("::192.168.89.9", Address.IPv6);
    assertEquals (exp, ret);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/AddressTest.java" startline="202" endline="221">
public void test_toByteArray_IPv6_invalid () {
    assertNull (Address.toByteArray ("2001:0db8:85a3:08d3:1319:8a2e:0370", Address.IPv6));
    assertNull (Address.toByteArray ("2001:0db8:85a3:08d3:1319:8a2e:0370:193A:BCdE", Address.IPv6));
    assertNull (Address.toByteArray ("2001:0gb8:85a3:08d3:1319:8a2e:0370:9819", Address.IPv6));
    assertNull (Address.toByteArray ("lmno:0bb8:85a3:08d3:1319:8a2e:0370:9819", Address.IPv6));
    assertNull (Address.toByteArray ("11ab:0ab8:85a3:08d3:1319:8a2e:0370:qrst", Address.IPv6));
    assertNull (Address.toByteArray ("11ab:0ab8:85a3:08d3:::", Address.IPv6));
    assertNull (Address.toByteArray ("2001:0ab8:192.168.0.1:1319:8a2e:0370:9819", Address.IPv6));
    assertNull (Address.toByteArray ("2001:0ab8:1212:AbAb:8a2e:345.12.22.1", Address.IPv6));
    assertNull (Address.toByteArray ("2001:0ab8:85a3:128d3:1319:8a2e:0370:9819", Address.IPv6));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/AddressTest.java" startline="223" endline="236">
public void test_toArray () {
    int [] exp = new int [] {1, 2, 3, 4};
    int [] ret = Address.toArray ("1.2.3.4", Address.IPv4);
    assertEquals (exp, ret);
    exp = new int [] {0, 0, 0, 0};
    ret = Address.toArray ("0.0.0.0", Address.IPv4);
    assertEquals (exp, ret);
    exp = new int [] {255, 255, 255, 255};
    ret = Address.toArray ("255.255.255.255", Address.IPv4);
    assertEquals (exp, ret);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/AddressTest.java" startline="238" endline="243">
public void test_toArray_invalid () {
    assertNull (Address.toArray ("128.121.1", Address.IPv4));
    assertNull (Address.toArray (""));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/AddressTest.java" startline="245" endline="249">
public void test_isDottedQuad () {
    assertTrue (Address.isDottedQuad ("1.2.3.4"));
    assertFalse (Address.isDottedQuad ("256.2.3.4"));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/AddressTest.java" startline="251" endline="258">
public void test_toDottedQuad () {
    assertEquals ("128.176.201.1", Address.toDottedQuad (new byte [] {(byte) 128, (byte) 176, (byte) 201, (byte) 1}));
    assertEquals ("200.1.255.128", Address.toDottedQuad (new int [] {200, 1, 255, 128}));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/AddressTest.java" startline="260" endline="271">
public void test_addressLength () {
    assertEquals (4, Address.addressLength (Address.IPv4));
    assertEquals (16, Address.addressLength (Address.IPv6));
    try {
        Address.addressLength (3);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/AddressTest.java" startline="273" endline="280">
public void test_getByName () throws UnknownHostException {
    InetAddress out = Address.getByName ("128.145.198.231");
    assertEquals ("128.145.198.231", out.getHostAddress ());
    out = Address.getByName ("a.root-servers.net");
    assertEquals ("198.41.0.4", out.getHostAddress ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/AddressTest.java" startline="282" endline="296">
public void test_getByName_invalid () throws UnknownHostException {
    try {
        Address.getByName ("example.invalid");
        fail ("UnknownHostException not thrown");
    } catch (UnknownHostException e) {
    }
    try {
        Address.getByName ("");
        fail ("UnknownHostException not thrown");
    } catch (UnknownHostException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/AddressTest.java" startline="298" endline="314">
public void test_getAllByName () throws UnknownHostException {
    InetAddress [] out = Address.getAllByName ("128.145.198.231");
    assertEquals (1, out.length);
    assertEquals ("128.145.198.231", out [0].getHostAddress ());
    out = Address.getAllByName ("a.root-servers.net");
    assertTrue (out.length == 2);
    assertEquals ("198.41.0.4", out [0].getHostAddress ());
    assertEquals ("2001:503:ba3e:0:0:0:2:30", out [1].getHostAddress ());
    out = Address.getAllByName ("cnn.com");
    assertTrue (out.length > 1);
    for (int i = 0;
    i < out.length; ++ i) {
        assertTrue (out [i].getHostName ().endsWith ("cnn.com"));
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/AddressTest.java" startline="316" endline="330">
public void test_getAllByName_invalid () throws UnknownHostException {
    try {
        Address.getAllByName ("example.invalid");
        fail ("UnknownHostException not thrown");
    } catch (UnknownHostException e) {
    }
    try {
        Address.getAllByName ("");
        fail ("UnknownHostException not thrown");
    } catch (UnknownHostException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/AddressTest.java" startline="332" endline="342">
public void test_familyOf () throws UnknownHostException {
    assertEquals (Address.IPv4, Address.familyOf (InetAddress.getByName ("192.168.0.1")));
    assertEquals (Address.IPv6, Address.familyOf (InetAddress.getByName ("1:2:3:4:5:6:7:8")));
    try {
        Address.familyOf (null);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/AddressTest.java" startline="344" endline="355">
public void test_getHostName () throws UnknownHostException {
    String out = Address.getHostName (InetAddress.getByName ("198.41.0.4"));
    assertEquals ("a.root-servers.net.", out);
    try {
        Address.getHostName (InetAddress.getByName ("192.168.1.1"));
        fail ("UnknownHostException not thrown");
    } catch (UnknownHostException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/ARecordTest.java" startline="51" endline="60">
protected void setUp () throws TextParseException, UnknownHostException {
    m_an = Name.fromString ("My.Absolute.Name.");
    m_rn = Name.fromString ("My.Relative.Name");
    m_addr_string = "193.160.232.5";
    m_addr = InetAddress.getByName (m_addr_string);
    m_addr_bytes = m_addr.getAddress ();
    m_ttl = 0x13579;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/ARecordTest.java" startline="62" endline="70">
public void test_ctor_0arg () throws UnknownHostException {
    ARecord ar = new ARecord ();
    assertNull (ar.getName ());
    assertEquals (0, ar.getType ());
    assertEquals (0, ar.getDClass ());
    assertEquals (0, ar.getTTL ());
    assertEquals (InetAddress.getByName ("0.0.0.0"), ar.getAddress ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/ARecordTest.java" startline="72" endline="77">
public void test_getObject () {
    ARecord ar = new ARecord ();
    Record r = ar.getObject ();
    assertTrue (r instanceof ARecord);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/ARecordTest.java" startline="79" endline="103">
public void test_ctor_4arg () {
    ARecord ar = new ARecord (m_an, DClass.IN, m_ttl, m_addr);
    assertEquals (m_an, ar.getName ());
    assertEquals (Type.A, ar.getType ());
    assertEquals (DClass.IN, ar.getDClass ());
    assertEquals (m_ttl, ar.getTTL ());
    assertEquals (m_addr, ar.getAddress ());
    try {
        new ARecord (m_rn, DClass.IN, m_ttl, m_addr);
        fail ("RelativeNameException not thrown");
    } catch (RelativeNameException e) {
    }
    try {
        new ARecord (m_an, DClass.IN, m_ttl, InetAddress.getByName ("2001:0db8:85a3:08d3:1319:8a2e:0370:7334"));
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    } catch (UnknownHostException e) {
        fail (e.getMessage ());
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/ARecordTest.java" startline="105" endline="113">
public void test_rrFromWire () throws IOException {
    DNSInput di = new DNSInput (m_addr_bytes);
    ARecord ar = new ARecord ();
    ar.rrFromWire (di);
    assertEquals (m_addr, ar.getAddress ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/ARecordTest.java" startline="115" endline="132">
public void test_rdataFromString () throws IOException {
    Tokenizer t = new Tokenizer (m_addr_string);
    ARecord ar = new ARecord ();
    ar.rdataFromString (t, null);
    assertEquals (m_addr, ar.getAddress ());
    t = new Tokenizer ("193.160.232");
    ar = new ARecord ();
    try {
        ar.rdataFromString (t, null);
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/ARecordTest.java" startline="134" endline="138">
public void test_rrToString () {
    ARecord ar = new ARecord (m_an, DClass.IN, m_ttl, m_addr);
    assertEquals (m_addr_string, ar.rrToString ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/ARecordTest.java" startline="140" endline="151">
public void test_rrToWire () {
    ARecord ar = new ARecord (m_an, DClass.IN, m_ttl, m_addr);
    DNSOutput dout = new DNSOutput ();
    ar.rrToWire (dout, null, true);
    assertTrue (Arrays.equals (m_addr_bytes, dout.toByteArray ()));
    dout = new DNSOutput ();
    ar.rrToWire (dout, null, false);
    assertTrue (Arrays.equals (m_addr_bytes, dout.toByteArray ()));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SerialTest.java" startline="41" endline="52">
public void test_compare_NegativeArg1 () {
    long arg1 = - 1;
    long arg2 = 1;
    try {
        Serial.compare (arg1, arg2);
        fail ("compare accepted negative argument 1");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SerialTest.java" startline="54" endline="65">
public void test_compare_OOBArg1 () {
    long arg1 = 0xFFFFFFFFL + 1;
    long arg2 = 1;
    try {
        Serial.compare (arg1, arg2);
        fail ("compare accepted out-of-bounds argument 1");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SerialTest.java" startline="67" endline="78">
public void test_compare_NegativeArg2 () {
    long arg1 = 1;
    long arg2 = - 1;
    try {
        Serial.compare (arg1, arg2);
        fail ("compare accepted negative argument 2");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SerialTest.java" startline="80" endline="91">
public void test_compare_OOBArg2 () {
    long arg1 = 1;
    long arg2 = 0xFFFFFFFFL + 1;
    try {
        Serial.compare (arg1, arg2);
        fail ("compare accepted out-of-bounds argument 1");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SerialTest.java" startline="93" endline="99">
public void test_compare_Arg1Greater () {
    long arg1 = 10;
    long arg2 = 9;
    int ret = Serial.compare (arg1, arg2);
    assertTrue (ret > 0);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SerialTest.java" startline="101" endline="107">
public void test_compare_Arg2Greater () {
    long arg1 = 9;
    long arg2 = 10;
    int ret = Serial.compare (arg1, arg2);
    assertTrue (ret < 0);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SerialTest.java" startline="109" endline="115">
public void test_compare_ArgsEqual () {
    long arg1 = 10;
    long arg2 = 10;
    int ret = Serial.compare (arg1, arg2);
    assertEquals (ret, 0);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SerialTest.java" startline="117" endline="125">
public void test_compare_boundary () {
    long arg1 = 0xFFFFFFFFL;
    long arg2 = 0;
    int ret = Serial.compare (arg1, arg2);
    assertEquals (- 1, ret);
    ret = Serial.compare (arg2, arg1);
    assertEquals (1, ret);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SerialTest.java" startline="127" endline="137">
public void test_increment_NegativeArg () {
    long arg = - 1;
    try {
        Serial.increment (arg);
        fail ("increment accepted negative argument");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SerialTest.java" startline="139" endline="149">
public void test_increment_OOBArg () {
    long arg = 0xFFFFFFFFL + 1;
    try {
        Serial.increment (arg);
        fail ("increment accepted out-of-bounds argument");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SerialTest.java" startline="151" endline="156">
public void test_increment_reset () {
    long arg = 0xFFFFFFFFL;
    long ret = Serial.increment (arg);
    assertEquals (0, ret);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SerialTest.java" startline="158" endline="163">
public void test_increment_normal () {
    long arg = 10;
    long ret = Serial.increment (arg);
    assertEquals (arg + 1, ret);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DClassTest.java" startline="41" endline="66">
public void test_string () {
    assertEquals ("IN", DClass.string (DClass.IN));
    assertEquals ("CH", DClass.string (DClass.CH));
    assertTrue (DClass.string (20).startsWith ("CLASS"));
    try {
        DClass.string (- 1);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
    try {
        DClass.string (0x10000);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DClassTest.java" startline="68" endline="85">
public void test_value () {
    assertEquals (DClass.NONE, DClass.value ("NONE"));
    assertEquals (DClass.HS, DClass.value ("HS"));
    assertEquals (DClass.HS, DClass.value ("HESIOD"));
    assertEquals (21, DClass.value ("CLASS21"));
    assertEquals (- 1, DClass.value ("THIS IS DEFINITELY UNKNOWN"));
    assertEquals (- 1, DClass.value (""));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/TSIGTest.java" startline="8" endline="23">
public void test_TSIG_query () throws TextParseException, IOException {
    TSIG key = new TSIG (TSIG.HMAC_SHA256, "example.", "12345678");
    Name qname = Name.fromString ("www.example.");
    Record rec = Record.newRecord (qname, Type.A, DClass.IN);
    Message msg = Message.newQuery (rec);
    msg.setTSIG (key, Rcode.NOERROR, null);
    byte [] bytes = msg.toWire (512);
    assertEquals (bytes [11], 1);
    Message parsed = new Message (bytes);
    int result = key.verify (parsed, bytes, null);
    assertEquals (result, Rcode.NOERROR);
    assertTrue (parsed.isSigned ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/TSIGTest.java" startline="25" endline="49">
public void test_TSIG_response () throws TextParseException, IOException {
    TSIG key = new TSIG (TSIG.HMAC_SHA256, "example.", "12345678");
    Name qname = Name.fromString ("www.example.");
    Record question = Record.newRecord (qname, Type.A, DClass.IN);
    Message query = Message.newQuery (question);
    query.setTSIG (key, Rcode.NOERROR, null);
    byte [] qbytes = query.toWire ();
    Message qparsed = new Message (qbytes);
    Message response = new Message (query.getHeader ().getID ());
    response.setTSIG (key, Rcode.NOERROR, qparsed.getTSIG ());
    response.getHeader ().setFlag (Flags.QR);
    response.addRecord (question, Section.QUESTION);
    Record answer = Record.fromString (qname, Type.A, DClass.IN, 300, "1.2.3.4", null);
    response.addRecord (answer, Section.ANSWER);
    byte [] bytes = response.toWire (512);
    Message parsed = new Message (bytes);
    int result = key.verify (parsed, bytes, qparsed.getTSIG ());
    assertEquals (result, Rcode.NOERROR);
    assertTrue (parsed.isSigned ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/TSIGTest.java" startline="51" endline="78">
public void test_TSIG_truncated () throws TextParseException, IOException {
    TSIG key = new TSIG (TSIG.HMAC_SHA256, "example.", "12345678");
    Name qname = Name.fromString ("www.example.");
    Record question = Record.newRecord (qname, Type.A, DClass.IN);
    Message query = Message.newQuery (question);
    query.setTSIG (key, Rcode.NOERROR, null);
    byte [] qbytes = query.toWire ();
    Message qparsed = new Message (qbytes);
    Message response = new Message (query.getHeader ().getID ());
    response.setTSIG (key, Rcode.NOERROR, qparsed.getTSIG ());
    response.getHeader ().setFlag (Flags.QR);
    response.addRecord (question, Section.QUESTION);
    for (int i = 0;
    i < 40; i ++) {
        Record answer = Record.fromString (qname, Type.TXT, DClass.IN, 300, "foo" + i, null);
        response.addRecord (answer, Section.ANSWER);
    }
    byte [] bytes = response.toWire (512);
    Message parsed = new Message (bytes);
    assertTrue (parsed.getHeader ().getFlag (Flags.TC));
    int result = key.verify (parsed, bytes, qparsed.getTSIG ());
    assertEquals (result, Rcode.NOERROR);
    assertTrue (parsed.isSigned ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RRsetTest.java" startline="60" endline="77">
public void setUp () throws TextParseException, UnknownHostException {
    m_rs = new RRset ();
    m_name = Name.fromString ("this.is.a.test.");
    m_name2 = Name.fromString ("this.is.another.test.");
    m_ttl = 0xABCDL;
    m_a1 = new ARecord (m_name, DClass.IN, m_ttl, InetAddress.getByName ("192.169.232.11"));
    m_a2 = new ARecord (m_name, DClass.IN, m_ttl + 1, InetAddress.getByName ("192.169.232.12"));
    m_s1 = new RRSIGRecord (m_name, DClass.IN, m_ttl, Type.A, 0xF, 0xABCDEL, new Date (), new Date (), 0xA, m_name, new byte [0]);
    m_s2 = new RRSIGRecord (m_name, DClass.IN, m_ttl, Type.A, 0xF, 0xABCDEL, new Date (), new Date (), 0xA, m_name2, new byte [0]);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RRsetTest.java" startline="79" endline="102">
public void test_ctor_0arg () {
    assertEquals (0, m_rs.size ());
    try {
        m_rs.getDClass ();
        fail ("IllegalStateException not thrown");
    } catch (IllegalStateException e) {
    }
    try {
        m_rs.getType ();
        fail ("IllegalStateException not thrown");
    } catch (IllegalStateException e) {
    }
    try {
        m_rs.getTTL ();
        fail ("IllegalStateException not thrown");
    } catch (IllegalStateException e) {
    }
    try {
        m_rs.getName ();
        fail ("IllegalStateException not thrown");
    } catch (IllegalStateException e) {
    }
    try {
        m_rs.first ();
        fail ("IllegalStateException not thrown");
    } catch (IllegalStateException e) {
    }
    assertEquals ("{empty}", m_rs.toString ());
    Iterator itr = m_rs.rrs ();
    assertNotNull (itr);
    assertFalse (itr.hasNext ());
    itr = m_rs.sigs ();
    assertNotNull (itr);
    assertFalse (itr.hasNext ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RRsetTest.java" startline="104" endline="186">
public void test_basics () throws TextParseException, UnknownHostException {
    m_rs.addRR (m_a1);
    assertEquals (1, m_rs.size ());
    assertEquals (DClass.IN, m_rs.getDClass ());
    assertEquals (m_a1, m_rs.first ());
    assertEquals (m_name, m_rs.getName ());
    assertEquals (m_ttl, m_rs.getTTL ());
    assertEquals (Type.A, m_rs.getType ());
    m_rs.addRR (m_a1);
    assertEquals (1, m_rs.size ());
    assertEquals (DClass.IN, m_rs.getDClass ());
    assertEquals (m_a1, m_rs.first ());
    assertEquals (m_name, m_rs.getName ());
    assertEquals (m_ttl, m_rs.getTTL ());
    assertEquals (Type.A, m_rs.getType ());
    m_rs.addRR (m_a2);
    assertEquals (2, m_rs.size ());
    assertEquals (DClass.IN, m_rs.getDClass ());
    Record r = m_rs.first ();
    assertEquals (m_a1, r);
    assertEquals (m_name, m_rs.getName ());
    assertEquals (m_ttl, m_rs.getTTL ());
    assertEquals (Type.A, m_rs.getType ());
    Iterator itr = m_rs.rrs ();
    assertEquals (m_a1, itr.next ());
    assertEquals (m_a2, itr.next ());
    itr = m_rs.rrs ();
    assertEquals (m_a2, itr.next ());
    assertEquals (m_a1, itr.next ());
    itr = m_rs.rrs ();
    assertEquals (m_a1, itr.next ());
    assertEquals (m_a2, itr.next ());
    m_rs.deleteRR (m_a1);
    assertEquals (1, m_rs.size ());
    assertEquals (DClass.IN, m_rs.getDClass ());
    assertEquals (m_a2, m_rs.first ());
    assertEquals (m_name, m_rs.getName ());
    assertEquals (m_ttl, m_rs.getTTL ());
    assertEquals (Type.A, m_rs.getType ());
    m_rs.addRR (m_s1);
    assertEquals (1, m_rs.size ());
    itr = m_rs.sigs ();
    assertEquals (m_s1, itr.next ());
    assertFalse (itr.hasNext ());
    m_rs.addRR (m_s1);
    itr = m_rs.sigs ();
    assertEquals (m_s1, itr.next ());
    assertFalse (itr.hasNext ());
    m_rs.addRR (m_s2);
    itr = m_rs.sigs ();
    assertEquals (m_s1, itr.next ());
    assertEquals (m_s2, itr.next ());
    assertFalse (itr.hasNext ());
    m_rs.deleteRR (m_s1);
    itr = m_rs.sigs ();
    assertEquals (m_s2, itr.next ());
    assertFalse (itr.hasNext ());
    m_rs.clear ();
    assertEquals (0, m_rs.size ());
    assertFalse (m_rs.rrs ().hasNext ());
    assertFalse (m_rs.sigs ().hasNext ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RRsetTest.java" startline="188" endline="210">
public void test_ctor_1arg () {
    m_rs.addRR (m_a1);
    m_rs.addRR (m_a2);
    m_rs.addRR (m_s1);
    m_rs.addRR (m_s2);
    RRset rs2 = new RRset (m_rs);
    assertEquals (2, rs2.size ());
    assertEquals (m_a1, rs2.first ());
    Iterator itr = rs2.rrs ();
    assertEquals (m_a1, itr.next ());
    assertEquals (m_a2, itr.next ());
    assertFalse (itr.hasNext ());
    itr = rs2.sigs ();
    assertTrue (itr.hasNext ());
    assertEquals (m_s1, itr.next ());
    assertTrue (itr.hasNext ());
    assertEquals (m_s2, itr.next ());
    assertFalse (itr.hasNext ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RRsetTest.java" startline="212" endline="225">
public void test_toString () {
    m_rs.addRR (m_a1);
    m_rs.addRR (m_a2);
    m_rs.addRR (m_s1);
    m_rs.addRR (m_s2);
    String out = m_rs.toString ();
    assertTrue (out.indexOf (m_name.toString ()) != - 1);
    assertTrue (out.indexOf (" IN A ") != - 1);
    assertTrue (out.indexOf ("[192.169.232.11]") != - 1);
    assertTrue (out.indexOf ("[192.169.232.12]") != - 1);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RRsetTest.java" startline="227" endline="239">
public void test_addRR_invalidType () throws TextParseException {
    m_rs.addRR (m_a1);
    CNAMERecord c = new CNAMERecord (m_name, DClass.IN, m_ttl, Name.fromString ("an.alias."));
    try {
        m_rs.addRR (c);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RRsetTest.java" startline="241" endline="254">
public void test_addRR_invalidName () throws TextParseException, UnknownHostException {
    m_rs.addRR (m_a1);
    m_a2 = new ARecord (m_name2, DClass.IN, m_ttl, InetAddress.getByName ("192.169.232.11"));
    try {
        m_rs.addRR (m_a2);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RRsetTest.java" startline="256" endline="269">
public void test_addRR_invalidDClass () throws TextParseException, UnknownHostException {
    m_rs.addRR (m_a1);
    m_a2 = new ARecord (m_name, DClass.CHAOS, m_ttl, InetAddress.getByName ("192.169.232.11"));
    try {
        m_rs.addRR (m_a2);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RRsetTest.java" startline="271" endline="283">
public void test_TTLcalculation () {
    m_rs.addRR (m_a2);
    assertEquals (m_a2.getTTL (), m_rs.getTTL ());
    m_rs.addRR (m_a1);
    assertEquals (m_a1.getTTL (), m_rs.getTTL ());
    Iterator itr = m_rs.rrs ();
    while (itr.hasNext ()) {
        Record r = (Record) itr.next ();
        assertEquals (m_a1.getTTL (), r.getTTL ());
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RRsetTest.java" startline="285" endline="302">
public void test_Record_placement () {
    m_rs.addRR (m_a1);
    m_rs.addRR (m_s1);
    m_rs.addRR (m_a2);
    Iterator itr = m_rs.rrs ();
    assertTrue (itr.hasNext ());
    assertEquals (m_a1, itr.next ());
    assertTrue (itr.hasNext ());
    assertEquals (m_a2, itr.next ());
    assertFalse (itr.hasNext ());
    itr = m_rs.sigs ();
    assertTrue (itr.hasNext ());
    assertEquals (m_s1, itr.next ());
    assertFalse (itr.hasNext ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/RRsetTest.java" startline="304" endline="320">
public void test_noncycling_iterator () {
    m_rs.addRR (m_a1);
    m_rs.addRR (m_a2);
    Iterator itr = m_rs.rrs (false);
    assertTrue (itr.hasNext ());
    assertEquals (m_a1, itr.next ());
    assertTrue (itr.hasNext ());
    assertEquals (m_a2, itr.next ());
    itr = m_rs.rrs (false);
    assertTrue (itr.hasNext ());
    assertEquals (m_a1, itr.next ());
    assertTrue (itr.hasNext ());
    assertEquals (m_a2, itr.next ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSSECSIG0Test.java" startline="21" endline="22">
public void setUp () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSSECSIG0Test.java" startline="24" endline="25">
public void tearDown () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNSSECSIG0Test.java" startline="27" endline="49">
public void testSIG0 () throws Exception {
    Name sig0zoneName = new Name ("sig0.invalid.");
    Name sig0hostName = new Name ("sometext.sig0.invalid.");
    KeyPairGenerator rsagen = KeyPairGenerator.getInstance ("RSA");
    KeyPair rsapair = rsagen.generateKeyPair ();
    PrivateKey privKey = rsapair.getPrivate ();
    PublicKey pubKey = rsapair.getPublic ();
    KEYRecord keyRecord = new KEYRecord (sig0zoneName, DClass.IN, 0, KEYRecord.Flags.HOST, KEYRecord.Protocol.DNSSEC, DNSSEC.Algorithm.RSASHA1, pubKey);
    TXTRecord txtRecord = new TXTRecord (sig0hostName, DClass.IN, 0, "Hello World!");
    Update updateMessage = new Update (sig0zoneName);
    updateMessage.add (txtRecord);
    SIG0.signMessage (updateMessage, keyRecord, privKey, null);
    Message message = new Message (updateMessage.toWire ());
    SIG0.verifyMessage (message, message.toWire (), keyRecord, null);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SingleNameBaseTest.java" startline="42" endline="45">
private void assertEquals (byte [] exp, byte [] act) {
    assertTrue (java.util.Arrays.equals (exp, act));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SingleNameBaseTest.java" startline="49" endline="49">
public TestClass () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SingleNameBaseTest.java" startline="51" endline="54">
public TestClass (Name name, int type, int dclass, long ttl) {
    super (name, type, dclass, ttl);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SingleNameBaseTest.java" startline="56" endline="59">
public TestClass (Name name, int type, int dclass, long ttl, Name singleName, String desc) {
    super (name, type, dclass, ttl, singleName, desc);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SingleNameBaseTest.java" startline="61" endline="64">
public Name getSingleName () {
    return super.getSingleName ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SingleNameBaseTest.java" startline="66" endline="69">
public Record getObject () {
    return null;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SingleNameBaseTest.java" startline="72" endline="94">
public void test_ctor () throws TextParseException {
    TestClass tc = new TestClass ();
    assertNull (tc.getSingleName ());
    Name n = Name.fromString ("my.name.");
    Name sn = Name.fromString ("my.single.name.");
    tc = new TestClass (n, Type.A, DClass.IN, 100L);
    assertSame (n, tc.getName ());
    assertEquals (Type.A, tc.getType ());
    assertEquals (DClass.IN, tc.getDClass ());
    assertEquals (100L, tc.getTTL ());
    tc = new TestClass (n, Type.A, DClass.IN, 100L, sn, "The Description");
    assertSame (n, tc.getName ());
    assertEquals (Type.A, tc.getType ());
    assertEquals (DClass.IN, tc.getDClass ());
    assertEquals (100L, tc.getTTL ());
    assertSame (sn, tc.getSingleName ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SingleNameBaseTest.java" startline="96" endline="106">
public void test_rrFromWire () throws IOException {
    byte [] raw = new byte [] {2, 'm', 'y', 6, 's', 'i', 'n', 'g', 'l', 'e', 4, 'n', 'a', 'm', 'e', 0};
    DNSInput in = new DNSInput (raw);
    TestClass tc = new TestClass ();
    tc.rrFromWire (in);
    Name exp = Name.fromString ("my.single.name.");
    assertEquals (exp, tc.getSingleName ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SingleNameBaseTest.java" startline="108" endline="124">
public void test_rdataFromString () throws IOException {
    Name exp = Name.fromString ("my.single.name.");
    Tokenizer t = new Tokenizer ("my.single.name.");
    TestClass tc = new TestClass ();
    tc.rdataFromString (t, null);
    assertEquals (exp, tc.getSingleName ());
    t = new Tokenizer ("my.relative.name");
    tc = new TestClass ();
    try {
        tc.rdataFromString (t, null);
        fail ("RelativeNameException not thrown");
    } catch (RelativeNameException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SingleNameBaseTest.java" startline="126" endline="137">
public void test_rrToString () throws IOException, TextParseException {
    Name exp = Name.fromString ("my.single.name.");
    Tokenizer t = new Tokenizer ("my.single.name.");
    TestClass tc = new TestClass ();
    tc.rdataFromString (t, null);
    assertEquals (exp, tc.getSingleName ());
    String out = tc.rrToString ();
    assertEquals (out, exp.toString ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SingleNameBaseTest.java" startline="139" endline="163">
public void test_rrToWire () throws IOException, TextParseException {
    Name n = Name.fromString ("my.name.");
    Name sn = Name.fromString ("My.Single.Name.");
    TestClass tc = new TestClass (n, Type.A, DClass.IN, 100L, sn, "The Description");
    byte [] exp = new byte [] {2, 'M', 'y', 6, 'S', 'i', 'n', 'g', 'l', 'e', 4, 'N', 'a', 'm', 'e', 0};
    DNSOutput dout = new DNSOutput ();
    tc.rrToWire (dout, null, false);
    byte [] out = dout.toByteArray ();
    assertEquals (exp, out);
    tc = new TestClass (n, Type.A, DClass.IN, 100L, sn, "The Description");
    exp = new byte [] {2, 'm', 'y', 6, 's', 'i', 'n', 'g', 'l', 'e', 4, 'n', 'a', 'm', 'e', 0};
    dout = new DNSOutput ();
    tc.rrToWire (dout, null, true);
    out = dout.toByteArray ();
    assertEquals (exp, out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/FormattedTimeTest.java" startline="46" endline="52">
public void test_format () {
    GregorianCalendar cal = new GregorianCalendar (TimeZone.getTimeZone ("UTC"));
    cal.set (2005, 2, 19, 4, 4, 5);
    String out = FormattedTime.format (cal.getTime ());
    assertEquals ("20050319040405", out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/FormattedTimeTest.java" startline="54" endline="68">
public void test_parse () throws TextParseException {
    GregorianCalendar cal = new GregorianCalendar (TimeZone.getTimeZone ("UTC"));
    cal.set (2005, 2, 19, 4, 4, 5);
    cal.set (Calendar.MILLISECOND, 0);
    Date out = FormattedTime.parse ("20050319040405");
    GregorianCalendar cal2 = new GregorianCalendar (TimeZone.getTimeZone ("UTC"));
    cal2.setTimeInMillis (out.getTime ());
    cal2.set (Calendar.MILLISECOND, 0);
    assertEquals (cal, cal2);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/FormattedTimeTest.java" startline="70" endline="90">
public void test_parse_invalid () {
    try {
        FormattedTime.parse ("2004010101010");
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
    try {
        FormattedTime.parse ("200401010101010");
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
    try {
        FormattedTime.parse ("2004010101010A");
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/MessageTest.java" startline="48" endline="65">
public void test_0arg () {
    Message m = new Message ();
    assertTrue (Arrays.equals (new Record [0], m.getSectionArray (0)));
    assertTrue (Arrays.equals (new Record [0], m.getSectionArray (1)));
    assertTrue (Arrays.equals (new Record [0], m.getSectionArray (2)));
    assertTrue (Arrays.equals (new Record [0], m.getSectionArray (3)));
    try {
        m.getSectionArray (4);
        fail ("IndexOutOfBoundsException not thrown");
    } catch (IndexOutOfBoundsException e) {
    }
    Header h = m.getHeader ();
    assertEquals (0, h.getCount (0));
    assertEquals (0, h.getCount (1));
    assertEquals (0, h.getCount (2));
    assertEquals (0, h.getCount (3));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/MessageTest.java" startline="67" endline="85">
public void test_1arg () {
    Message m = new Message (10);
    assertEquals (new Header (10).toString (), m.getHeader ().toString ());
    assertTrue (Arrays.equals (new Record [0], m.getSectionArray (0)));
    assertTrue (Arrays.equals (new Record [0], m.getSectionArray (1)));
    assertTrue (Arrays.equals (new Record [0], m.getSectionArray (2)));
    assertTrue (Arrays.equals (new Record [0], m.getSectionArray (3)));
    try {
        m.getSectionArray (4);
        fail ("IndexOutOfBoundsException not thrown");
    } catch (IndexOutOfBoundsException e) {
    }
    Header h = m.getHeader ();
    assertEquals (0, h.getCount (0));
    assertEquals (0, h.getCount (1));
    assertEquals (0, h.getCount (2));
    assertEquals (0, h.getCount (3));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/MessageTest.java" startline="87" endline="107">
public void test_newQuery () throws TextParseException, UnknownHostException {
    Name n = Name.fromString ("The.Name.");
    ARecord ar = new ARecord (n, DClass.IN, 1, InetAddress.getByName ("192.168.101.110"));
    Message m = Message.newQuery (ar);
    assertTrue (Arrays.equals (new Record [] {ar}, m.getSectionArray (0)));
    assertTrue (Arrays.equals (new Record [0], m.getSectionArray (1)));
    assertTrue (Arrays.equals (new Record [0], m.getSectionArray (2)));
    assertTrue (Arrays.equals (new Record [0], m.getSectionArray (3)));
    Header h = m.getHeader ();
    assertEquals (1, h.getCount (0));
    assertEquals (0, h.getCount (1));
    assertEquals (0, h.getCount (2));
    assertEquals (0, h.getCount (3));
    assertEquals (Opcode.QUERY, h.getOpcode ());
    assertEquals (true, h.getFlag (Flags.RD));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/MessageTest.java" startline="111" endline="116">
public static Test suite () {
    TestSuite s = new TestSuite ();
    s.addTestSuite (Test_init.class);
    return s;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/ExceptionTest.java" startline="42" endline="46">
public void test_InvalidDClassException () {
    IllegalArgumentException e = new InvalidDClassException (10);
    assertEquals ("Invalid DNS class: 10", e.getMessage ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/ExceptionTest.java" startline="48" endline="52">
public void test_InvalidTTLException () {
    IllegalArgumentException e = new InvalidTTLException (32345);
    assertEquals ("Invalid DNS TTL: 32345", e.getMessage ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/ExceptionTest.java" startline="54" endline="58">
public void test_InvalidTypeException () {
    IllegalArgumentException e = new InvalidTypeException (32345);
    assertEquals ("Invalid DNS type: 32345", e.getMessage ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/ExceptionTest.java" startline="60" endline="67">
public void test_NameTooLongException () {
    WireParseException e = new NameTooLongException ();
    assertNull (e.getMessage ());
    e = new NameTooLongException ("This is my too long name");
    assertEquals ("This is my too long name", e.getMessage ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/ExceptionTest.java" startline="69" endline="76">
public void test_RelativeNameException () throws TextParseException {
    IllegalArgumentException e = new RelativeNameException ("This is my relative name");
    assertEquals ("This is my relative name", e.getMessage ());
    e = new RelativeNameException (Name.fromString ("relative"));
    assertEquals ("'relative' is not an absolute name", e.getMessage ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/ExceptionTest.java" startline="78" endline="85">
public void test_TextParseException () {
    IOException e = new TextParseException ();
    assertNull (e.getMessage ());
    e = new TextParseException ("This is my message");
    assertEquals ("This is my message", e.getMessage ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/ExceptionTest.java" startline="87" endline="94">
public void test_WireParseException () {
    IOException e = new WireParseException ();
    assertNull (e.getMessage ());
    e = new WireParseException ("This is my message");
    assertEquals ("This is my message", e.getMessage ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/ExceptionTest.java" startline="96" endline="103">
public void test_ZoneTransferException () {
    Exception e = new ZoneTransferException ();
    assertNull (e.getMessage ());
    e = new ZoneTransferException ("This is my message");
    assertEquals ("This is my message", e.getMessage ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/FlagsTest.java" startline="41" endline="63">
public void test_string () {
    assertEquals ("aa", Flags.string (Flags.AA));
    assertTrue (Flags.string (12).startsWith ("flag"));
    try {
        Flags.string (- 1);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
    try {
        Flags.string (0x10);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/FlagsTest.java" startline="65" endline="81">
public void test_value () {
    assertEquals (Flags.CD, Flags.value ("cd"));
    assertEquals (13, Flags.value ("FLAG13"));
    assertEquals (- 1, Flags.value ("FLAG" + 0x10));
    assertEquals (- 1, Flags.value ("THIS IS DEFINITELY UNKNOWN"));
    assertEquals (- 1, Flags.value (""));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/FlagsTest.java" startline="83" endline="113">
public void test_isFlag () {
    try {
        Flags.isFlag (- 1);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
    assertTrue (Flags.isFlag (0));
    assertFalse (Flags.isFlag (1));
    assertFalse (Flags.isFlag (2));
    assertFalse (Flags.isFlag (3));
    assertFalse (Flags.isFlag (4));
    assertTrue (Flags.isFlag (5));
    assertTrue (Flags.isFlag (6));
    assertTrue (Flags.isFlag (7));
    assertTrue (Flags.isFlag (8));
    assertTrue (Flags.isFlag (9));
    assertTrue (Flags.isFlag (10));
    assertTrue (Flags.isFlag (11));
    assertFalse (Flags.isFlag (12));
    assertFalse (Flags.isFlag (13));
    assertFalse (Flags.isFlag (14));
    assertFalse (Flags.isFlag (14));
    try {
        Flags.isFlag (16);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/URIRecordTest.java" startline="10" endline="20">
public void test_ctor_0arg () {
    URIRecord r = new URIRecord ();
    assertNull (r.getName ());
    assertEquals (0, r.getType ());
    assertEquals (0, r.getDClass ());
    assertEquals (0, r.getTTL ());
    assertEquals (0, r.getPriority ());
    assertEquals (0, r.getWeight ());
    assertTrue ("".equals (r.getTarget ()));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/URIRecordTest.java" startline="22" endline="27">
public void test_getObject () {
    URIRecord dr = new URIRecord ();
    Record r = dr.getObject ();
    assertTrue (r instanceof URIRecord);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/URIRecordTest.java" startline="29" endline="42">
public void test_ctor_6arg () throws TextParseException {
    Name n = Name.fromString ("my.name.");
    String target = ("http://foo");
    URIRecord r = new URIRecord (n, DClass.IN, 0xABCDEL, 42, 69, target);
    assertEquals (n, r.getName ());
    assertEquals (Type.URI, r.getType ());
    assertEquals (DClass.IN, r.getDClass ());
    assertEquals (0xABCDEL, r.getTTL ());
    assertEquals (42, r.getPriority ());
    assertEquals (69, r.getWeight ());
    assertEquals (target, r.getTarget ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/URIRecordTest.java" startline="44" endline="53">
public void test_rdataFromString () throws IOException {
    Tokenizer t = new Tokenizer (0xABCD + " " + 0xEF01 + " " + "\"http://foo:1234/bar?baz=bum\"");
    URIRecord r = new URIRecord ();
    r.rdataFromString (t, null);
    assertEquals (0xABCD, r.getPriority ());
    assertEquals (0xEF01, r.getWeight ());
    assertEquals ("http://foo:1234/bar?baz=bum", r.getTarget ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/URIRecordTest.java" startline="55" endline="68">
public void test_rdataToWire () throws TextParseException {
    Name n = Name.fromString ("my.name.");
    String target = ("http://foo");
    byte [] exp = new byte [] {(byte) 0xbe, (byte) 0xef, (byte) 0xde, (byte) 0xad, (byte) 0x68, (byte) 0x74, (byte) 0x74, (byte) 0x70, (byte) 0x3a, (byte) 0x2f, (byte) 0x2f, (byte) 0x66, (byte) 0x6f, (byte) 0x6f};
    URIRecord r = new URIRecord (n, DClass.IN, 0xABCDEL, 0xbeef, 0xdead, target);
    DNSOutput out = new DNSOutput ();
    r.rrToWire (out, null, true);
    assertTrue (Arrays.equals (exp, out.toByteArray ()));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/URIRecordTest.java" startline="70" endline="83">
public void test_rrFromWire () throws IOException {
    byte [] raw = new byte [] {(byte) 0xbe, (byte) 0xef, (byte) 0xde, (byte) 0xad, (byte) 0x68, (byte) 0x74, (byte) 0x74, (byte) 0x70, (byte) 0x3a, (byte) 0x2f, (byte) 0x2f, (byte) 0x66, (byte) 0x6f, (byte) 0x6f};
    DNSInput in = new DNSInput (raw);
    URIRecord r = new URIRecord ();
    r.rrFromWire (in);
    assertEquals (0xBEEF, r.getPriority ());
    assertEquals (0xDEAD, r.getWeight ());
    assertEquals ("http://foo", r.getTarget ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/URIRecordTest.java" startline="85" endline="93">
public void test_toobig_priority () throws TextParseException {
    try {
        new URIRecord (Name.fromString ("the.name"), DClass.IN, 0x1234, 0x10000, 42, "http://foo");
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/URIRecordTest.java" startline="94" endline="102">
public void test_toosmall_priority () throws TextParseException {
    try {
        new URIRecord (Name.fromString ("the.name"), DClass.IN, 0x1234, - 1, 42, "http://foo");
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/URIRecordTest.java" startline="104" endline="112">
public void test_toobig_weight () throws TextParseException {
    try {
        new URIRecord (Name.fromString ("the.name"), DClass.IN, 0x1234, 42, 0x10000, "http://foo");
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/URIRecordTest.java" startline="113" endline="121">
public void test_toosmall_weight () throws TextParseException {
    try {
        new URIRecord (Name.fromString ("the.name"), DClass.IN, 0x1234, 42, - 1, "http://foo");
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base16Test.java" startline="41" endline="44">
public base16Test (String name) {
    super (name);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base16Test.java" startline="46" endline="50">
public void test_toString_emptyArray () {
    String out = base16.toString (new byte [0]);
    assertEquals ("", out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base16Test.java" startline="52" endline="57">
public void test_toString_singleByte1 () {
    byte [] data = {(byte) 1};
    String out = base16.toString (data);
    assertEquals ("01", out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base16Test.java" startline="59" endline="64">
public void test_toString_singleByte2 () {
    byte [] data = {(byte) 16};
    String out = base16.toString (data);
    assertEquals ("10", out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base16Test.java" startline="66" endline="71">
public void test_toString_singleByte3 () {
    byte [] data = {(byte) 255};
    String out = base16.toString (data);
    assertEquals ("FF", out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base16Test.java" startline="73" endline="78">
public void test_toString_array1 () {
    byte [] data = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
    String out = base16.toString (data);
    assertEquals ("0102030405060708090A0B0C0D0E0F", out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base16Test.java" startline="80" endline="85">
public void test_fromString_emptyString () {
    String data = "";
    byte [] out = base16.fromString (data);
    assertEquals (0, out.length);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base16Test.java" startline="87" endline="92">
public void test_fromString_invalidStringLength () {
    String data = "1";
    byte [] out = base16.fromString (data);
    assertNull (out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base16Test.java" startline="94" endline="102">
public void test_fromString_nonHexChars () {
    String data = "GG";
    byte [] out = base16.fromString (data);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base16Test.java" startline="104" endline="113">
public void test_fromString_normal () {
    String data = "0102030405060708090A0B0C0D0E0F";
    byte [] out = base16.fromString (data);
    byte [] exp = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
    assertEquals (exp.length, out.length);
    for (int i = 0;
    i < exp.length; ++ i) {
        assertEquals (exp [i], out [i]);
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/hexdumpTest.java" startline="41" endline="44">
public hexdumpTest (String name) {
    super (name);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/hexdumpTest.java" startline="52" endline="70">
public void test_shortform () {
    byte [] data = new byte [] {1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3,};
    String desc = "This Is My Description";
    String long_out = hexdump.dump (desc, data, 0, data.length);
    String short_out = hexdump.dump (desc, data);
    assertEquals (long_out, short_out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/hexdumpTest.java" startline="72" endline="77">
public void test_0 () {
    byte [] data = new byte [] {1, 0, 2};
    String out = hexdump.dump (null, data, 1, 1);
    assertEquals ("1b:\t00 \n", out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/hexdumpTest.java" startline="79" endline="84">
public void test_1 () {
    byte [] data = new byte [] {2, 1, 3};
    String out = hexdump.dump (null, data, 1, 1);
    assertEquals ("1b:\t01 \n", out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/hexdumpTest.java" startline="86" endline="91">
public void test_2 () {
    byte [] data = new byte [] {1, 2, 3};
    String out = hexdump.dump (null, data, 1, 1);
    assertEquals ("1b:\t02 \n", out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/hexdumpTest.java" startline="93" endline="98">
public void test_3 () {
    byte [] data = new byte [] {1, 3, 2};
    String out = hexdump.dump (null, data, 1, 1);
    assertEquals ("1b:\t03 \n", out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/hexdumpTest.java" startline="100" endline="105">
public void test_4 () {
    byte [] data = new byte [] {1, 4, 2};
    String out = hexdump.dump (null, data, 1, 1);
    assertEquals ("1b:\t04 \n", out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/hexdumpTest.java" startline="107" endline="112">
public void test_5 () {
    byte [] data = new byte [] {1, 5, 2};
    String out = hexdump.dump (null, data, 1, 1);
    assertEquals ("1b:\t05 \n", out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/hexdumpTest.java" startline="114" endline="119">
public void test_6 () {
    byte [] data = new byte [] {1, 6, 2};
    String out = hexdump.dump (null, data, 1, 1);
    assertEquals ("1b:\t06 \n", out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/hexdumpTest.java" startline="121" endline="126">
public void test_7 () {
    byte [] data = new byte [] {1, 7, 2};
    String out = hexdump.dump (null, data, 1, 1);
    assertEquals ("1b:\t07 \n", out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/hexdumpTest.java" startline="128" endline="133">
public void test_8 () {
    byte [] data = new byte [] {1, 8, 2};
    String out = hexdump.dump (null, data, 1, 1);
    assertEquals ("1b:\t08 \n", out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/hexdumpTest.java" startline="135" endline="140">
public void test_9 () {
    byte [] data = new byte [] {1, 9, 2};
    String out = hexdump.dump (null, data, 1, 1);
    assertEquals ("1b:\t09 \n", out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/hexdumpTest.java" startline="142" endline="147">
public void test_10 () {
    byte [] data = new byte [] {1, 10, 2};
    String out = hexdump.dump (null, data, 1, 1);
    assertEquals ("1b:\t0A \n", out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/hexdumpTest.java" startline="149" endline="154">
public void test_11 () {
    byte [] data = new byte [] {1, 11, 2};
    String out = hexdump.dump (null, data, 1, 1);
    assertEquals ("1b:\t0B \n", out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/hexdumpTest.java" startline="156" endline="161">
public void test_12 () {
    byte [] data = new byte [] {1, 12, 2};
    String out = hexdump.dump (null, data, 1, 1);
    assertEquals ("1b:\t0C \n", out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/hexdumpTest.java" startline="163" endline="168">
public void test_13 () {
    byte [] data = new byte [] {1, 13, 2};
    String out = hexdump.dump (null, data, 1, 1);
    assertEquals ("1b:\t0D \n", out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/hexdumpTest.java" startline="170" endline="175">
public void test_14 () {
    byte [] data = new byte [] {1, 14, 2};
    String out = hexdump.dump (null, data, 1, 1);
    assertEquals ("1b:\t0E \n", out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/hexdumpTest.java" startline="177" endline="182">
public void test_15 () {
    byte [] data = new byte [] {1, 15, 2};
    String out = hexdump.dump (null, data, 1, 1);
    assertEquals ("1b:\t0F \n", out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/hexdumpTest.java" startline="185" endline="188">
public void test_default_constructor () {
    new hexdump ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base64Test.java" startline="41" endline="44">
public base64Test (String name) {
    super (name);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base64Test.java" startline="46" endline="51">
public void test_toString_empty () {
    byte [] data = new byte [0];
    String out = base64.toString (data);
    assertEquals ("", out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base64Test.java" startline="53" endline="58">
public void test_toString_basic1 () {
    byte [] data = {0};
    String out = base64.toString (data);
    assertEquals ("AA==", out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base64Test.java" startline="60" endline="65">
public void test_toString_basic2 () {
    byte [] data = {0, 0};
    String out = base64.toString (data);
    assertEquals ("AAA=", out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base64Test.java" startline="67" endline="72">
public void test_toString_basic3 () {
    byte [] data = {0, 0, 1};
    String out = base64.toString (data);
    assertEquals ("AAAB", out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base64Test.java" startline="74" endline="79">
public void test_toString_basic4 () {
    byte [] data = {(byte) 0xFC, 0, 0};
    String out = base64.toString (data);
    assertEquals ("/AAA", out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base64Test.java" startline="81" endline="86">
public void test_toString_basic5 () {
    byte [] data = {(byte) 0xFF, (byte) 0xFF, (byte) 0xFF};
    String out = base64.toString (data);
    assertEquals ("////", out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base64Test.java" startline="88" endline="93">
public void test_toString_basic6 () {
    byte [] data = {1, 2, 3, 4, 5, 6, 7, 8, 9};
    String out = base64.toString (data);
    assertEquals ("AQIDBAUGBwgJ", out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base64Test.java" startline="95" endline="99">
public void test_formatString_empty1 () {
    String out = base64.formatString (new byte [0], 5, "", false);
    assertEquals ("", out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base64Test.java" startline="101" endline="106">
public void test_formatString_shorter () {
    byte [] in = {1, 2, 3, 4, 5, 6, 7, 8, 9};
    String out = base64.formatString (in, 13, "", false);
    assertEquals ("AQIDBAUGBwgJ", out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base64Test.java" startline="108" endline="113">
public void test_formatString_sameLength () {
    byte [] in = {1, 2, 3, 4, 5, 6, 7, 8, 9};
    String out = base64.formatString (in, 12, "", false);
    assertEquals ("AQIDBAUGBwgJ", out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base64Test.java" startline="115" endline="120">
public void test_formatString_oneBreak () {
    byte [] in = {1, 2, 3, 4, 5, 6, 7, 8, 9};
    String out = base64.formatString (in, 10, "", false);
    assertEquals ("AQIDBAUGBw\ngJ", out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base64Test.java" startline="122" endline="127">
public void test_formatString_twoBreaks1 () {
    byte [] in = {1, 2, 3, 4, 5, 6, 7, 8, 9};
    String out = base64.formatString (in, 5, "", false);
    assertEquals ("AQIDB\nAUGBw\ngJ", out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base64Test.java" startline="129" endline="134">
public void test_formatString_twoBreaks2 () {
    byte [] in = {1, 2, 3, 4, 5, 6, 7, 8, 9};
    String out = base64.formatString (in, 4, "", false);
    assertEquals ("AQID\nBAUG\nBwgJ", out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base64Test.java" startline="136" endline="141">
public void test_formatString_shorterWithPrefix () {
    byte [] in = {1, 2, 3, 4, 5, 6, 7, 8, 9};
    String out = base64.formatString (in, 13, "!_", false);
    assertEquals ("!_AQIDBAUGBwgJ", out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base64Test.java" startline="143" endline="148">
public void test_formatString_sameLengthWithPrefix () {
    byte [] in = {1, 2, 3, 4, 5, 6, 7, 8, 9};
    String out = base64.formatString (in, 12, "!_", false);
    assertEquals ("!_AQIDBAUGBwgJ", out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base64Test.java" startline="150" endline="155">
public void test_formatString_oneBreakWithPrefix () {
    byte [] in = {1, 2, 3, 4, 5, 6, 7, 8, 9};
    String out = base64.formatString (in, 10, "!_", false);
    assertEquals ("!_AQIDBAUGBw\n!_gJ", out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base64Test.java" startline="157" endline="162">
public void test_formatString_twoBreaks1WithPrefix () {
    byte [] in = {1, 2, 3, 4, 5, 6, 7, 8, 9};
    String out = base64.formatString (in, 5, "!_", false);
    assertEquals ("!_AQIDB\n!_AUGBw\n!_gJ", out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base64Test.java" startline="164" endline="169">
public void test_formatString_twoBreaks2WithPrefix () {
    byte [] in = {1, 2, 3, 4, 5, 6, 7, 8, 9};
    String out = base64.formatString (in, 4, "!_", false);
    assertEquals ("!_AQID\n!_BAUG\n!_BwgJ", out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base64Test.java" startline="171" endline="176">
public void test_formatString_shorterWithPrefixAndClose () {
    byte [] in = {1, 2, 3, 4, 5, 6, 7, 8, 9};
    String out = base64.formatString (in, 13, "!_", true);
    assertEquals ("!_AQIDBAUGBwgJ )", out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base64Test.java" startline="178" endline="183">
public void test_formatString_sameLengthWithPrefixAndClose () {
    byte [] in = {1, 2, 3, 4, 5, 6, 7, 8, 9};
    String out = base64.formatString (in, 12, "!_", true);
    assertEquals ("!_AQIDBAUGBwgJ )", out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base64Test.java" startline="185" endline="190">
public void test_formatString_oneBreakWithPrefixAndClose () {
    byte [] in = {1, 2, 3, 4, 5, 6, 7, 8, 9};
    String out = base64.formatString (in, 10, "!_", true);
    assertEquals ("!_AQIDBAUGBw\n!_gJ )", out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base64Test.java" startline="192" endline="197">
public void test_formatString_twoBreaks1WithPrefixAndClose () {
    byte [] in = {1, 2, 3, 4, 5, 6, 7, 8, 9};
    String out = base64.formatString (in, 5, "!_", true);
    assertEquals ("!_AQIDB\n!_AUGBw\n!_gJ )", out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base64Test.java" startline="199" endline="204">
public void test_formatString_twoBreaks2WithPrefixAndClose () {
    byte [] in = {1, 2, 3, 4, 5, 6, 7, 8, 9};
    String out = base64.formatString (in, 4, "!_", true);
    assertEquals ("!_AQID\n!_BAUG\n!_BwgJ )", out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base64Test.java" startline="206" endline="212">
private void assertEquals (byte [] exp, byte [] act) {
    assertEquals (exp.length, act.length);
    for (int i = 0;
    i < exp.length; ++ i) {
        assertEquals (exp [i], act [i]);
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base64Test.java" startline="214" endline="219">
public void test_fromString_empty1 () {
    byte [] data = new byte [0];
    byte [] out = base64.fromString ("");
    assertEquals (new byte [0], out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base64Test.java" startline="221" endline="226">
public void test_fromString_basic1 () {
    byte [] exp = {0};
    byte [] out = base64.fromString ("AA==");
    assertEquals (exp, out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base64Test.java" startline="228" endline="233">
public void test_fromString_basic2 () {
    byte [] exp = {0, 0};
    byte [] out = base64.fromString ("AAA=");
    assertEquals (exp, out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base64Test.java" startline="235" endline="240">
public void test_fromString_basic3 () {
    byte [] exp = {0, 0, 1};
    byte [] out = base64.fromString ("AAAB");
    assertEquals (exp, out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base64Test.java" startline="242" endline="247">
public void test_fromString_basic4 () {
    byte [] exp = {(byte) 0xFC, 0, 0};
    byte [] out = base64.fromString ("/AAA");
    assertEquals (exp, out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base64Test.java" startline="249" endline="254">
public void test_fromString_basic5 () {
    byte [] exp = {(byte) 0xFF, (byte) 0xFF, (byte) 0xFF};
    byte [] out = base64.fromString ("////");
    assertEquals (exp, out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base64Test.java" startline="256" endline="261">
public void test_fromString_basic6 () {
    byte [] exp = {1, 2, 3, 4, 5, 6, 7, 8, 9};
    byte [] out = base64.fromString ("AQIDBAUGBwgJ");
    assertEquals (exp, out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base64Test.java" startline="263" endline="267">
public void test_fromString_invalid1 () {
    byte [] out = base64.fromString ("AAA");
    assertNull (out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base64Test.java" startline="269" endline="273">
public void test_fromString_invalid2 () {
    byte [] out = base64.fromString ("AA");
    assertNull (out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base64Test.java" startline="275" endline="279">
public void test_fromString_invalid3 () {
    byte [] out = base64.fromString ("A");
    assertNull (out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base64Test.java" startline="281" endline="285">
public void test_fromString_invalid4 () {
    byte [] out = base64.fromString ("BB==");
    assertNull (out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/utils/base64Test.java" startline="287" endline="291">
public void test_fromString_invalid5 () {
    byte [] out = base64.fromString ("BBB=");
    assertNull (out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/AFSDBRecordTest.java" startline="42" endline="47">
public void test_getObject () {
    AFSDBRecord d = new AFSDBRecord ();
    Record r = d.getObject ();
    assertTrue (r instanceof AFSDBRecord);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/AFSDBRecordTest.java" startline="49" endline="61">
public void test_ctor_5arg () throws TextParseException {
    Name n = Name.fromString ("My.Name.");
    Name m = Name.fromString ("My.OtherName.");
    AFSDBRecord d = new AFSDBRecord (n, DClass.IN, 0xABCDEL, 0xF1, m);
    assertEquals (n, d.getName ());
    assertEquals (Type.AFSDB, d.getType ());
    assertEquals (DClass.IN, d.getDClass ());
    assertEquals (0xABCDEL, d.getTTL ());
    assertEquals (0xF1, d.getSubtype ());
    assertEquals (m, d.getHost ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/MRRecordTest.java" startline="41" endline="46">
public void test_ctor_0arg () {
    MRRecord d = new MRRecord ();
    assertNull (d.getName ());
    assertNull (d.getNewName ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/MRRecordTest.java" startline="48" endline="59">
public void test_ctor_4arg () throws TextParseException {
    Name n = Name.fromString ("my.name.");
    Name a = Name.fromString ("my.alias.");
    MRRecord d = new MRRecord (n, DClass.IN, 0xABCDEL, a);
    assertEquals (n, d.getName ());
    assertEquals (Type.MR, d.getType ());
    assertEquals (DClass.IN, d.getDClass ());
    assertEquals (0xABCDEL, d.getTTL ());
    assertEquals (a, d.getNewName ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/MRRecordTest.java" startline="61" endline="66">
public void test_getObject () {
    MRRecord d = new MRRecord ();
    Record r = d.getObject ();
    assertTrue (r instanceof MRRecord);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNAMERecordTest.java" startline="41" endline="47">
public void test_ctor_0arg () {
    DNAMERecord d = new DNAMERecord ();
    assertNull (d.getName ());
    assertNull (d.getTarget ());
    assertNull (d.getAlias ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNAMERecordTest.java" startline="49" endline="61">
public void test_ctor_4arg () throws TextParseException {
    Name n = Name.fromString ("my.name.");
    Name a = Name.fromString ("my.alias.");
    DNAMERecord d = new DNAMERecord (n, DClass.IN, 0xABCDEL, a);
    assertEquals (n, d.getName ());
    assertEquals (Type.DNAME, d.getType ());
    assertEquals (DClass.IN, d.getDClass ());
    assertEquals (0xABCDEL, d.getTTL ());
    assertEquals (a, d.getTarget ());
    assertEquals (a, d.getAlias ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DNAMERecordTest.java" startline="63" endline="68">
public void test_getObject () {
    DNAMERecord d = new DNAMERecord ();
    Record r = d.getObject ();
    assertTrue (r instanceof DNAMERecord);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SingleCompressedNameBaseTest.java" startline="42" endline="45">
private void assertEquals (byte [] exp, byte [] act) {
    assertTrue (java.util.Arrays.equals (exp, act));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SingleCompressedNameBaseTest.java" startline="49" endline="49">
public TestClass () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SingleCompressedNameBaseTest.java" startline="51" endline="54">
public TestClass (Name name, int type, int dclass, long ttl, Name singleName, String desc) {
    super (name, type, dclass, ttl, singleName, desc);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SingleCompressedNameBaseTest.java" startline="56" endline="59">
public Name getSingleName () {
    return super.getSingleName ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SingleCompressedNameBaseTest.java" startline="61" endline="64">
public Record getObject () {
    return null;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SingleCompressedNameBaseTest.java" startline="67" endline="82">
public void test_ctor () throws TextParseException {
    TestClass tc = new TestClass ();
    assertNull (tc.getSingleName ());
    Name n = Name.fromString ("my.name.");
    Name sn = Name.fromString ("my.single.name.");
    tc = new TestClass (n, Type.A, DClass.IN, 100L, sn, "The Description");
    assertSame (n, tc.getName ());
    assertEquals (Type.A, tc.getType ());
    assertEquals (DClass.IN, tc.getDClass ());
    assertEquals (100L, tc.getTTL ());
    assertSame (sn, tc.getSingleName ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/SingleCompressedNameBaseTest.java" startline="84" endline="108">
public void test_rrToWire () throws IOException, TextParseException {
    Name n = Name.fromString ("my.name.");
    Name sn = Name.fromString ("My.Single.Name.");
    TestClass tc = new TestClass (n, Type.A, DClass.IN, 100L, sn, "The Description");
    byte [] exp = new byte [] {2, 'M', 'y', 6, 'S', 'i', 'n', 'g', 'l', 'e', 4, 'N', 'a', 'm', 'e', 0};
    DNSOutput dout = new DNSOutput ();
    tc.rrToWire (dout, null, false);
    byte [] out = dout.toByteArray ();
    assertEquals (exp, out);
    tc = new TestClass (n, Type.A, DClass.IN, 100L, sn, "The Description");
    exp = new byte [] {2, 'm', 'y', 6, 's', 'i', 'n', 'g', 'l', 'e', 4, 'n', 'a', 'm', 'e', 0};
    dout = new DNSOutput ();
    tc.rrToWire (dout, null, true);
    out = dout.toByteArray ();
    assertEquals (exp, out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/KXRecordTest.java" startline="42" endline="47">
public void test_getObject () {
    KXRecord d = new KXRecord ();
    Record r = d.getObject ();
    assertTrue (r instanceof KXRecord);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/KXRecordTest.java" startline="49" endline="62">
public void test_ctor_5arg () throws TextParseException {
    Name n = Name.fromString ("My.Name.");
    Name m = Name.fromString ("My.OtherName.");
    KXRecord d = new KXRecord (n, DClass.IN, 0xABCDEL, 0xF1, m);
    assertEquals (n, d.getName ());
    assertEquals (Type.KX, d.getType ());
    assertEquals (DClass.IN, d.getDClass ());
    assertEquals (0xABCDEL, d.getTTL ());
    assertEquals (0xF1, d.getPreference ());
    assertEquals (m, d.getTarget ());
    assertEquals (m, d.getAdditionalName ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/KEYRecordTest.java" startline="45" endline="57">
public void test_ctor_0arg () throws UnknownHostException {
    KEYRecord ar = new KEYRecord ();
    assertNull (ar.getName ());
    assertEquals (0, ar.getType ());
    assertEquals (0, ar.getDClass ());
    assertEquals (0, ar.getTTL ());
    assertEquals (0, ar.getAlgorithm ());
    assertEquals (0, ar.getFlags ());
    assertEquals (0, ar.getFootprint ());
    assertEquals (0, ar.getProtocol ());
    assertNull (ar.getKey ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/KEYRecordTest.java" startline="59" endline="64">
public void test_getObject () {
    KEYRecord ar = new KEYRecord ();
    Record r = ar.getObject ();
    assertTrue (r instanceof KEYRecord);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/KEYRecordTest.java" startline="66" endline="88">
public void test_ctor_7arg () throws TextParseException {
    Name n = Name.fromString ("My.Absolute.Name.");
    Name r = Name.fromString ("My.Relative.Name");
    byte [] key = new byte [] {0, 1, 3, 5, 7, 9};
    KEYRecord kr = new KEYRecord (n, DClass.IN, 0x24AC, 0x9832, 0x12, 0x67, key);
    assertEquals (n, kr.getName ());
    assertEquals (Type.KEY, kr.getType ());
    assertEquals (DClass.IN, kr.getDClass ());
    assertEquals (0x24AC, kr.getTTL ());
    assertEquals (0x9832, kr.getFlags ());
    assertEquals (0x12, kr.getProtocol ());
    assertEquals (0x67, kr.getAlgorithm ());
    assertTrue (Arrays.equals (key, kr.getKey ()));
    try {
        new KEYRecord (r, DClass.IN, 0x24AC, 0x9832, 0x12, 0x67, key);
        fail ("RelativeNameException not thrown");
    } catch (RelativeNameException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/KEYRecordTest.java" startline="90" endline="108">
public void test_Protocol_string () {
    assertEquals ("DNSSEC", KEYRecord.Protocol.string (KEYRecord.Protocol.DNSSEC));
    assertEquals ("254", KEYRecord.Protocol.string (0xFE));
    try {
        KEYRecord.Protocol.string (- 1);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
    try {
        KEYRecord.Protocol.string (0x100);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/KEYRecordTest.java" startline="110" endline="120">
public void test_Protocol_value () {
    assertEquals (KEYRecord.Protocol.IPSEC, KEYRecord.Protocol.value ("IPSEC"));
    assertEquals (254, KEYRecord.Protocol.value ("254"));
    assertEquals (- 1, KEYRecord.Protocol.value ("-2"));
    assertEquals (- 1, KEYRecord.Protocol.value ("256"));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/KEYRecordTest.java" startline="122" endline="148">
public void test_Flags_value () {
    assertEquals (- 1, KEYRecord.Flags.value ("-2"));
    assertEquals (0, KEYRecord.Flags.value ("0"));
    assertEquals (0xAB35, KEYRecord.Flags.value (0xAB35 + ""));
    assertEquals (0xFFFF, KEYRecord.Flags.value (0xFFFF + ""));
    assertEquals (- 1, KEYRecord.Flags.value (0x10000 + ""));
    assertEquals (KEYRecord.Flags.EXTEND, KEYRecord.Flags.value ("EXTEND"));
    assertEquals (- 1, KEYRecord.Flags.value ("NOT_A_VALID_NAME"));
    assertEquals (KEYRecord.Flags.NOAUTH | KEYRecord.Flags.FLAG10 | KEYRecord.Flags.ZONE, KEYRecord.Flags.value ("NOAUTH|ZONE|FLAG10"));
    assertEquals (- 1, KEYRecord.Flags.value ("NOAUTH|INVALID_NAME|FLAG10"));
    assertEquals (0, KEYRecord.Flags.value ("|"));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/KEYRecordTest.java" startline="150" endline="198">
public void test_rdataFromString () throws IOException, TextParseException {
    KEYRecord kr = new KEYRecord ();
    Tokenizer st = new Tokenizer ("NOAUTH|ZONE|FLAG10 EMAIL RSASHA1 AQIDBAUGBwgJ");
    kr.rdataFromString (st, null);
    assertEquals (KEYRecord.Flags.NOAUTH | KEYRecord.Flags.FLAG10 | KEYRecord.Flags.ZONE, kr.getFlags ());
    assertEquals (KEYRecord.Protocol.EMAIL, kr.getProtocol ());
    assertEquals (DNSSEC.Algorithm.RSASHA1, kr.getAlgorithm ());
    assertTrue (Arrays.equals (new byte [] {1, 2, 3, 4, 5, 6, 7, 8, 9}, kr.getKey ()));
    kr = new KEYRecord ();
    st = new Tokenizer ("NOAUTH|NOKEY|FLAG10 TLS 3");
    kr.rdataFromString (st, null);
    assertEquals (KEYRecord.Flags.NOAUTH | KEYRecord.Flags.FLAG10 | KEYRecord.Flags.NOKEY, kr.getFlags ());
    assertEquals (KEYRecord.Protocol.TLS, kr.getProtocol ());
    assertEquals (3, kr.getAlgorithm ());
    assertNull (kr.getKey ());
    kr = new KEYRecord ();
    st = new Tokenizer ("NOAUTH|ZONE|JUNK EMAIL RSASHA1 AQIDBAUGBwgJ");
    try {
        kr.rdataFromString (st, null);
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
    kr = new KEYRecord ();
    st = new Tokenizer ("NOAUTH|ZONE RSASHA1 3 AQIDBAUGBwgJ");
    try {
        kr.rdataFromString (st, null);
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
    kr = new KEYRecord ();
    st = new Tokenizer ("NOAUTH|ZONE EMAIL ZONE AQIDBAUGBwgJ");
    try {
        kr.rdataFromString (st, null);
        fail ("TextParseException not thrown");
    } catch (TextParseException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DSRecordTest.java" startline="45" endline="56">
public void test_ctor_0arg () {
    DSRecord dr = new DSRecord ();
    assertNull (dr.getName ());
    assertEquals (0, dr.getType ());
    assertEquals (0, dr.getDClass ());
    assertEquals (0, dr.getTTL ());
    assertEquals (0, dr.getAlgorithm ());
    assertEquals (0, dr.getDigestID ());
    assertNull (dr.getDigest ());
    assertEquals (0, dr.getFootprint ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DSRecordTest.java" startline="58" endline="63">
public void test_getObject () {
    DSRecord dr = new DSRecord ();
    Record r = dr.getObject ();
    assertTrue (r instanceof DSRecord);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DSRecordTest.java" startline="74" endline="82">
protected void setUp () throws TextParseException {
    m_n = Name.fromString ("The.Name.");
    m_ttl = 0xABCDL;
    m_footprint = 0xEF01;
    m_algorithm = 0x23;
    m_digestid = 0x45;
    m_digest = new byte [] {(byte) 0x67, (byte) 0x89, (byte) 0xAB, (byte) 0xCD, (byte) 0xEF};
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DSRecordTest.java" startline="84" endline="96">
public void test_basic () throws TextParseException {
    DSRecord dr = new DSRecord (m_n, DClass.IN, m_ttl, m_footprint, m_algorithm, m_digestid, m_digest);
    assertEquals (m_n, dr.getName ());
    assertEquals (DClass.IN, dr.getDClass ());
    assertEquals (Type.DS, dr.getType ());
    assertEquals (m_ttl, dr.getTTL ());
    assertEquals (m_footprint, dr.getFootprint ());
    assertEquals (m_algorithm, dr.getAlgorithm ());
    assertEquals (m_digestid, dr.getDigestID ());
    assertTrue (Arrays.equals (m_digest, dr.getDigest ()));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DSRecordTest.java" startline="98" endline="106">
public void test_toosmall_footprint () throws TextParseException {
    try {
        new DSRecord (m_n, DClass.IN, m_ttl, - 1, m_algorithm, m_digestid, m_digest);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DSRecordTest.java" startline="108" endline="116">
public void test_toobig_footprint () throws TextParseException {
    try {
        new DSRecord (m_n, DClass.IN, m_ttl, 0x10000, m_algorithm, m_digestid, m_digest);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DSRecordTest.java" startline="118" endline="126">
public void test_toosmall_algorithm () throws TextParseException {
    try {
        new DSRecord (m_n, DClass.IN, m_ttl, m_footprint, - 1, m_digestid, m_digest);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DSRecordTest.java" startline="128" endline="136">
public void test_toobig_algorithm () throws TextParseException {
    try {
        new DSRecord (m_n, DClass.IN, m_ttl, m_footprint, 0x10000, m_digestid, m_digest);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DSRecordTest.java" startline="138" endline="146">
public void test_toosmall_digestid () throws TextParseException {
    try {
        new DSRecord (m_n, DClass.IN, m_ttl, m_footprint, m_algorithm, - 1, m_digest);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DSRecordTest.java" startline="148" endline="156">
public void test_toobig_digestid () throws TextParseException {
    try {
        new DSRecord (m_n, DClass.IN, m_ttl, m_footprint, m_algorithm, 0x10000, m_digest);
        fail ("IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DSRecordTest.java" startline="158" endline="170">
public void test_null_digest () {
    DSRecord dr = new DSRecord (m_n, DClass.IN, m_ttl, m_footprint, m_algorithm, m_digestid, null);
    assertEquals (m_n, dr.getName ());
    assertEquals (DClass.IN, dr.getDClass ());
    assertEquals (Type.DS, dr.getType ());
    assertEquals (m_ttl, dr.getTTL ());
    assertEquals (m_footprint, dr.getFootprint ());
    assertEquals (m_algorithm, dr.getAlgorithm ());
    assertEquals (m_digestid, dr.getDigestID ());
    assertNull (dr.getDigest ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DSRecordTest.java" startline="173" endline="187">
public void test_rrFromWire () throws IOException {
    byte [] raw = new byte [] {(byte) 0xAB, (byte) 0xCD, (byte) 0xEF, (byte) 0x01, (byte) 0x23, (byte) 0x45, (byte) 0x67, (byte) 0x89};
    DNSInput in = new DNSInput (raw);
    DSRecord dr = new DSRecord ();
    dr.rrFromWire (in);
    assertEquals (0xABCD, dr.getFootprint ());
    assertEquals (0xEF, dr.getAlgorithm ());
    assertEquals (0x01, dr.getDigestID ());
    assertTrue (Arrays.equals (new byte [] {(byte) 0x23, (byte) 0x45, (byte) 0x67, (byte) 0x89}, dr.getDigest ()));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DSRecordTest.java" startline="189" endline="203">
public void test_rdataFromString () throws IOException {
    byte [] raw = new byte [] {(byte) 0xAB, (byte) 0xCD, (byte) 0xEF, (byte) 0x01, (byte) 0x23, (byte) 0x45, (byte) 0x67, (byte) 0x89};
    Tokenizer t = new Tokenizer (0xABCD + " " + 0xEF + " " + 0x01 + " 23456789AB");
    DSRecord dr = new DSRecord ();
    dr.rdataFromString (t, null);
    assertEquals (0xABCD, dr.getFootprint ());
    assertEquals (0xEF, dr.getAlgorithm ());
    assertEquals (0x01, dr.getDigestID ());
    assertTrue (Arrays.equals (new byte [] {(byte) 0x23, (byte) 0x45, (byte) 0x67, (byte) 0x89, (byte) 0xAB}, dr.getDigest ()));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DSRecordTest.java" startline="205" endline="214">
public void test_rrToString () throws TextParseException {
    String exp = 0xABCD + " " + 0xEF + " " + 0x01 + " 23456789AB";
    DSRecord dr = new DSRecord (Name.fromString ("The.Name."), DClass.IN, 0x123, 0xABCD, 0xEF, 0x01, new byte [] {(byte) 0x23, (byte) 0x45, (byte) 0x67, (byte) 0x89, (byte) 0xAB});
    assertEquals (exp, dr.rrToString ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DSRecordTest.java" startline="216" endline="231">
public void test_rrToWire () throws TextParseException {
    DSRecord dr = new DSRecord (Name.fromString ("The.Name."), DClass.IN, 0x123, 0xABCD, 0xEF, 0x01, new byte [] {(byte) 0x23, (byte) 0x45, (byte) 0x67, (byte) 0x89, (byte) 0xAB});
    byte [] exp = new byte [] {(byte) 0xAB, (byte) 0xCD, (byte) 0xEF, (byte) 0x01, (byte) 0x23, (byte) 0x45, (byte) 0x67, (byte) 0x89, (byte) 0xAB};
    DNSOutput out = new DNSOutput ();
    dr.rrToWire (out, null, true);
    assertTrue (Arrays.equals (exp, out.toByteArray ()));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/tests/org/xbill/DNS/DSRecordTest.java" startline="233" endline="239">
public static Test suite () {
    TestSuite s = new TestSuite ();
    s.addTestSuite (Test_Ctor_7arg.class);
    s.addTestSuite (DSRecordTest.class);
    return s;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Address.java" startline="20" endline="21">
private Address () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Address.java" startline="23" endline="70">
private static byte [] parseV4 (String s) {
    int numDigits;
    int currentOctet;
    byte [] values = new byte [4];
    int currentValue;
    int length = s.length ();
    currentOctet = 0;
    currentValue = 0;
    numDigits = 0;
    for (int i = 0;
    i < length; i ++) {
        char c = s.charAt (i);
        if (c >= '0' && c <= '9') {
            if (numDigits == 3) return null;

            if (numDigits > 0 && currentValue == 0) return null;

            numDigits ++;
            currentValue *= 10;
            currentValue += (c - '0');
            if (currentValue > 255) return null;

        } else if (c == '.') {
            if (currentOctet == 3) return null;

            if (numDigits == 0) return null;

            values [currentOctet ++] = (byte) currentValue;
            currentValue = 0;
            numDigits = 0;
        } else return null;

    }
    if (currentOctet != 3) return null;

    if (numDigits == 0) return null;

    values [currentOctet] = (byte) currentValue;
    return values;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Address.java" startline="72" endline="157">
private static byte [] parseV6 (String s) {
    int range = - 1;
    byte [] data = new byte [16];
    String [] tokens = s.split (":", - 1);
    int first = 0;
    int last = tokens.length - 1;
    if (tokens [0].length () == 0) {
        if (last - first > 0 && tokens [1].length () == 0) first ++;
        else return null;

    }
    if (tokens [last].length () == 0) {
        if (last - first > 0 && tokens [last - 1].length () == 0) last --;
        else return null;

    }
    if (last - first + 1 > 8) return null;

    int i, j;
    for (i = first, j = 0; i <= last; i ++) {
        if (tokens [i].length () == 0) {
            if (range >= 0) return null;

            range = j;
            continue;
        }
        if (tokens [i].indexOf ('.') >= 0) {
            if (i < last) return null;

            if (i > 6) return null;

            byte [] v4addr = Address.toByteArray (tokens [i], IPv4);
            if (v4addr == null) return null;

            for (int k = 0;
            k < 4; k ++) data [j ++] = v4addr [k];

            break;
        }
        try {
            for (int k = 0;
            k < tokens [i].length (); k ++) {
                char c = tokens [i].charAt (k);
                if (Character.digit (c, 16) < 0) return null;

            }
            int x = Integer.parseInt (tokens [i], 16);
            if (x > 0xFFFF || x < 0) return null;

            data [j ++] = (byte) (x>>> 8);
            data [j ++] = (byte) (x & 0xFF);
        } catch (NumberFormatException e) {
            return null;
        }
    }
    if (j < 16 && range < 0) return null;

    if (range >= 0) {
        int empty = 16 - j;
        System.arraycopy (data, range, data, range + empty, j - range);
        for (i = range; i < range + empty; i ++) data [i] = 0;

    }
    return data;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Address.java" startline="165" endline="174">
public static int [] toArray (String s, int family) {
    byte [] byteArray = toByteArray (s, family);
    if (byteArray == null) return null;

    int [] intArray = new int [byteArray.length];
    for (int i = 0;
    i < byteArray.length; i ++) intArray [i] = byteArray [i] & 0xFF;

    return intArray;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Address.java" startline="181" endline="184">
public static int [] toArray (String s) {
    return toArray (s, IPv4);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Address.java" startline="192" endline="200">
public static byte [] toByteArray (String s, int family) {
    if (family == IPv4) return parseV4 (s);
    else if (family == IPv6) return parseV6 (s);
    else throw new IllegalArgumentException ("unknown address family");

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Address.java" startline="207" endline="211">
public static boolean isDottedQuad (String s) {
    byte [] address = Address.toByteArray (s, IPv4);
    return (address != null);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Address.java" startline="218" endline="222">
public static String toDottedQuad (byte [] addr) {
    return ((addr [0] & 0xFF) + "." + (addr [1] & 0xFF) + "." + (addr [2] & 0xFF) + "." + (addr [3] & 0xFF));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Address.java" startline="229" endline="232">
public static String toDottedQuad (int [] addr) {
    return (addr [0] + "." + addr [1] + "." + addr [2] + "." + addr [3]);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Address.java" startline="234" endline="260">
private static Record [] lookupHostName (String name, boolean all) throws UnknownHostException {
    try {
        Lookup lookup = new Lookup (name, Type.A);
        Record [] a = lookup.run ();
        if (a == null) {
            if (lookup.getResult () == Lookup.TYPE_NOT_FOUND) {
                Record [] aaaa = new Lookup (name, Type.AAAA).run ();
                if (aaaa != null) return aaaa;

            }
            throw new UnknownHostException ("unknown host");
        }
        if (! all) return a;

        Record [] aaaa = new Lookup (name, Type.AAAA).run ();
        if (aaaa == null) return a;

        Record [] merged = new Record [a.length + aaaa.length];
        System.arraycopy (a, 0, merged, 0, a.length);
        System.arraycopy (aaaa, 0, merged, a.length, aaaa.length);
        return merged;
    } catch (TextParseException e) {
        throw new UnknownHostException ("invalid name");
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Address.java" startline="262" endline="271">
private static InetAddress addrFromRecord (String name, Record r) throws UnknownHostException {
    InetAddress addr;
    if (r instanceof ARecord) {
        addr = ((ARecord) r).getAddress ();
    } else {
        addr = ((AAAARecord) r).getAddress ();
    }
    return InetAddress.getByAddress (name, addr.getAddress ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Address.java" startline="279" endline="287">
public static InetAddress getByName (String name) throws UnknownHostException {
    try {
        return getByAddress (name);
    } catch (UnknownHostException e) {
        Record [] records = lookupHostName (name, false);
        return addrFromRecord (name, records [0]);
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Address.java" startline="295" endline="307">
public static InetAddress [] getAllByName (String name) throws UnknownHostException {
    try {
        InetAddress addr = getByAddress (name);
        return new InetAddress [] {addr};
    } catch (UnknownHostException e) {
        Record [] records = lookupHostName (name, true);
        InetAddress [] addrs = new InetAddress [records.length];
        for (int i = 0;
        i < records.length; i ++) addrs [i] = addrFromRecord (name, records [i]);

        return addrs;
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Address.java" startline="316" endline="326">
public static InetAddress getByAddress (String addr) throws UnknownHostException {
    byte [] bytes;
    bytes = toByteArray (addr, IPv4);
    if (bytes != null) return InetAddress.getByAddress (addr, bytes);

    bytes = toByteArray (addr, IPv6);
    if (bytes != null) return InetAddress.getByAddress (addr, bytes);

    throw new UnknownHostException ("Invalid address: " + addr);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Address.java" startline="337" endline="346">
public static InetAddress getByAddress (String addr, int family) throws UnknownHostException {
    if (family != IPv4 && family != IPv6) throw new IllegalArgumentException ("unknown address family");

    byte [] bytes;
    bytes = toByteArray (addr, family);
    if (bytes != null) return InetAddress.getByAddress (addr, bytes);

    throw new UnknownHostException ("Invalid address: " + addr);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Address.java" startline="354" endline="362">
public static String getHostName (InetAddress addr) throws UnknownHostException {
    Name name = ReverseMap.fromAddress (addr);
    Record [] records = new Lookup (name, Type.PTR).run ();
    if (records == null) throw new UnknownHostException ("unknown address");

    PTRRecord ptr = (PTRRecord) records [0];
    return ptr.getTarget ().toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Address.java" startline="369" endline="376">
public static int familyOf (InetAddress address) {
    if (address instanceof Inet4Address) return IPv4;

    if (address instanceof Inet6Address) return IPv6;

    throw new IllegalArgumentException ("unknown address family");
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Address.java" startline="383" endline="390">
public static int addressLength (int family) {
    if (family == IPv4) return 4;

    if (family == IPv6) return 16;

    throw new IllegalArgumentException ("unknown address family");
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Address.java" startline="398" endline="420">
public static InetAddress truncate (InetAddress address, int maskLength) {
    int family = familyOf (address);
    int maxMaskLength = addressLength (family) * 8;
    if (maskLength < 0 || maskLength > maxMaskLength) throw new IllegalArgumentException ("invalid mask length");

    if (maskLength == maxMaskLength) return address;

    byte [] bytes = address.getAddress ();
    for (int i = maskLength / 8 + 1;
    i < bytes.length; i ++) bytes [i] = 0;

    int maskBits = maskLength % 8;
    int bitmask = 0;
    for (int i = 0;
    i < maskBits; i ++) bitmask |= (1 << (7 - i));

    bytes [maskLength / 8] &= bitmask;
    try {
        return InetAddress.getByAddress (bytes);
    } catch (UnknownHostException e) {
        throw new IllegalArgumentException ("invalid address");
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/tests/primary.java" startline="10" endline="14">
private static void usage () {
    System.out.println ("usage: primary [-t] [-a | -i] origin file");
    System.exit (1);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/tests/primary.java" startline="16" endline="57">
public static void main (String [] args) throws Exception {
    boolean time = false;
    boolean axfr = false;
    boolean iterator = false;
    int arg = 0;
    if (args.length < 2) usage ();

    while (args.length - arg > 2) {
        if (args [0].equals ("-t")) time = true;
        else if (args [0].equals ("-a")) axfr = true;
        else if (args [0].equals ("-i")) iterator = true;

        arg ++;
    }
    Name origin = Name.fromString (args [arg ++], Name.root);
    String file = args [arg ++];
    long start = System.currentTimeMillis ();
    Zone zone = new Zone (origin, file);
    long end = System.currentTimeMillis ();
    if (axfr) {
        Iterator it = zone.AXFR ();
        while (it.hasNext ()) {
            System.out.println (it.next ());
        }
    } else if (iterator) {
        Iterator it = zone.iterator ();
        while (it.hasNext ()) {
            System.out.println (it.next ());
        }
    } else {
        System.out.println (zone);
    }

    if (time) System.out.println ("; Load time: " + (end - start) + " ms");

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/tests/xfrin.java" startline="10" endline="16">
private static void usage (String s) {
    System.out.println ("Error: " + s);
    System.out.println ("usage: xfrin [-i serial] [-k keyname/secret] " + "[-s server] [-p port] [-f] zone");
    System.exit (1);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/tests/xfrin.java" startline="18" endline="107">
public static void main (String [] args) throws Exception {
    ZoneTransferIn xfrin;
    TSIG key = null;
    int ixfr_serial = - 1;
    String server = null;
    int port = SimpleResolver.DEFAULT_PORT;
    boolean fallback = false;
    Name zname;
    int arg = 0;
    while (arg < args.length) {
        if (args [arg].equals ("-i")) {
            ixfr_serial = Integer.parseInt (args [++ arg]);
            if (ixfr_serial < 0) usage ("invalid serial number");

        } else if (args [arg].equals ("-k")) {
            String s = args [++ arg];
            int index = s.indexOf ('/');
            if (index < 0) usage ("invalid key");

            key = new TSIG (s.substring (0, index), s.substring (index + 1));
        } else if (args [arg].equals ("-s")) {
            server = args [++ arg];
        } else if (args [arg].equals ("-p")) {
            port = Integer.parseInt (args [++ arg]);
            if (port < 0 || port > 0xFFFF) usage ("invalid port");

        } else if (args [arg].equals ("-f")) {
            fallback = true;
        } else if (args [arg].startsWith ("-")) {
            usage ("invalid option");
        } else {
            break;
        }

        arg ++;
    }
    if (arg >= args.length) usage ("no zone name specified");

    zname = Name.fromString (args [arg]);
    if (server == null) {
        Lookup l = new Lookup (zname, Type.NS);
        Record [] ns = l.run ();
        if (ns == null) {
            System.out.println ("failed to look up NS record: " + l.getErrorString ());
            System.exit (1);
        }
        server = ns [0].rdataToString ();
        System.out.println ("sending to server '" + server + "'");
    }
    if (ixfr_serial >= 0) xfrin = ZoneTransferIn.newIXFR (zname, ixfr_serial, fallback, server, port, key);
    else xfrin = ZoneTransferIn.newAXFR (zname, server, port, key);

    List response = xfrin.run ();
    if (xfrin.isAXFR ()) {
        if (ixfr_serial >= 0) System.out.println ("AXFR-like IXFR response");
        else System.out.println ("AXFR response");

        Iterator it = response.iterator ();
        while (it.hasNext ()) System.out.println (it.next ());

    } else if (xfrin.isIXFR ()) {
        System.out.println ("IXFR response");
        Iterator it = response.iterator ();
        while (it.hasNext ()) {
            ZoneTransferIn.Delta delta;
            delta = (ZoneTransferIn.Delta) it.next ();
            System.out.println ("delta from " + delta.start + " to " + delta.end);
            System.out.println ("deletes");
            Iterator it2 = delta.deletes.iterator ();
            while (it2.hasNext ()) System.out.println (it2.next ());

            System.out.println ("adds");
            it2 = delta.adds.iterator ();
            while (it2.hasNext ()) System.out.println (it2.next ());

        }
    } else if (xfrin.isCurrent ()) {
        System.out.println ("up to date");
    }

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ISDNRecord.java" startline="20" endline="20">
ISDNRecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ISDNRecord.java" startline="22" endline="25">
Record getObject () {
    return new ISDNRecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ISDNRecord.java" startline="33" endline="44">
public ISDNRecord (Name name, int dclass, long ttl, String address, String subAddress) {
    super (name, Type.ISDN, dclass, ttl);
    try {
        this.address = byteArrayFromString (address);
        if (subAddress != null) this.subAddress = byteArrayFromString (subAddress);

    } catch (TextParseException e) {
        throw new IllegalArgumentException (e.getMessage ());
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ISDNRecord.java" startline="46" endline="51">
void rrFromWire (DNSInput in) throws IOException {
    address = in.readCountedString ();
    if (in.remaining () > 0) subAddress = in.readCountedString ();

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ISDNRecord.java" startline="53" endline="67">
void rdataFromString (Tokenizer st, Name origin) throws IOException {
    try {
        address = byteArrayFromString (st.getString ());
        Tokenizer.Token t = st.get ();
        if (t.isString ()) {
            subAddress = byteArrayFromString (t.value);
        } else {
            st.unget ();
        }
    } catch (TextParseException e) {
        throw st.exception (e.getMessage ());
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ISDNRecord.java" startline="72" endline="75">
public String getAddress () {
    return byteArrayToString (address, false);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ISDNRecord.java" startline="80" endline="85">
public String getSubAddress () {
    if (subAddress == null) return null;

    return byteArrayToString (subAddress, false);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ISDNRecord.java" startline="87" endline="92">
void rrToWire (DNSOutput out, Compression c, boolean canonical) {
    out.writeCountedString (address);
    if (subAddress != null) out.writeCountedString (subAddress);

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ISDNRecord.java" startline="94" endline="103">
String rrToString () {
    StringBuffer sb = new StringBuffer ();
    sb.append (byteArrayToString (address, true));
    if (subAddress != null) {
        sb.append (" ");
        sb.append (byteArrayToString (subAddress, true));
    }
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TextParseException.java" startline="15" endline="18">
public TextParseException () {
    super ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TextParseException.java" startline="20" endline="23">
public TextParseException (String s) {
    super (s);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/MXRecord.java" startline="15" endline="15">
MXRecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/MXRecord.java" startline="17" endline="20">
Record getObject () {
    return new MXRecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/MXRecord.java" startline="28" endline="32">
public MXRecord (Name name, int dclass, long ttl, int priority, Name target) {
    super (name, Type.MX, dclass, ttl, priority, "priority", target, "target");
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/MXRecord.java" startline="35" endline="38">
public Name getTarget () {
    return getNameField ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/MXRecord.java" startline="41" endline="44">
public int getPriority () {
    return getU16Field ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/MXRecord.java" startline="46" endline="50">
void rrToWire (DNSOutput out, Compression c, boolean canonical) {
    out.writeU16 (u16Field);
    nameField.toWire (out, c, canonical);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/MXRecord.java" startline="52" endline="55">
public Name getAdditionalName () {
    return getNameField ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Serial.java" startline="17" endline="19">
private Serial () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Serial.java" startline="30" endline="42">
public static int compare (long serial1, long serial2) {
    if (serial1 < 0 || serial1 > MAX32) throw new IllegalArgumentException (serial1 + " out of range");

    if (serial2 < 0 || serial2 > MAX32) throw new IllegalArgumentException (serial2 + " out of range");

    long diff = serial1 - serial2;
    if (diff >= MAX32) diff -= (MAX32 + 1);
    else if (diff < - MAX32) diff += (MAX32 + 1);

    return (int) diff;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Serial.java" startline="52" endline="59">
public static long increment (long serial) {
    if (serial < 0 || serial > MAX32) throw new IllegalArgumentException (serial + " out of range");

    if (serial == MAX32) return 0;

    return serial + 1;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/RRSIGRecord.java" startline="22" endline="22">
RRSIGRecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/RRSIGRecord.java" startline="24" endline="27">
Record getObject () {
    return new RRSIGRecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/RRSIGRecord.java" startline="41" endline="48">
public RRSIGRecord (Name name, int dclass, long ttl, int covered, int alg, long origttl, Date expire, Date timeSigned, int footprint, Name signer, byte [] signature) {
    super (name, Type.RRSIG, dclass, ttl, covered, alg, origttl, expire, timeSigned, footprint, signer, signature);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Compression.java" startline="29" endline="32">
public Compression () {
    table = new Entry [TABLE_SIZE];
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Compression.java" startline="39" endline="51">
public void add (int pos, Name name) {
    if (pos > MAX_POINTER) return;

    int row = (name.hashCode () & 0x7FFFFFFF) % TABLE_SIZE;
    Entry entry = new Entry ();
    entry.name = name;
    entry.pos = pos;
    entry.next = table [row];
    table [row] = entry;
    if (verbose) System.err.println ("Adding " + name + " at " + pos);

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Compression.java" startline="59" endline="70">
public int get (Name name) {
    int row = (name.hashCode () & 0x7FFFFFFF) % TABLE_SIZE;
    int pos = - 1;
    for (Entry entry = table [row];
    entry != null; entry = entry.next) {
        if (entry.name.equals (name)) pos = entry.pos;

    }
    if (verbose) System.err.println ("Looking for " + name + ", found " + pos);

    return pos;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/InvalidTTLException.java" startline="13" endline="16">
public InvalidTTLException (long ttl) {
    super ("Invalid DNS TTL: " + ttl);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Record.java" startline="31" endline="32">
protected Record () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Record.java" startline="34" endline="44">
Record (Name name, int type, int dclass, long ttl) {
    if (! name.isAbsolute ()) throw new RelativeNameException (name);

    Type.check (type);
    DClass.check (dclass);
    TTL.check (ttl);
    this.name = name;
    this.type = type;
    this.dclass = dclass;
    this.ttl = ttl;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Record.java" startline="52" endline="69">
private static final Record getEmptyRecord (Name name, int type, int dclass, long ttl, boolean hasData) {
    Record proto, rec;
    if (hasData) {
        proto = Type.getProto (type);
        if (proto != null) rec = proto.getObject ();
        else rec = new UNKRecord ();

    } else rec = new EmptyRecord ();

    rec.name = name;
    rec.type = type;
    rec.dclass = dclass;
    rec.ttl = ttl;
    return rec;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Record.java" startline="77" endline="95">
private static Record newRecord (Name name, int type, int dclass, long ttl, int length, DNSInput in) throws IOException {
    Record rec;
    rec = getEmptyRecord (name, type, dclass, ttl, in != null);
    if (in != null) {
        if (in.remaining () < length) throw new WireParseException ("truncated record");

        in.setActive (length);
        rec.rrFromWire (in);
        if (in.remaining () > 0) throw new WireParseException ("invalid record length");

        in.clearActive ();
    }
    return rec;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Record.java" startline="107" endline="126">
public static Record newRecord (Name name, int type, int dclass, long ttl, int length, byte [] data) {
    if (! name.isAbsolute ()) throw new RelativeNameException (name);

    Type.check (type);
    DClass.check (dclass);
    TTL.check (ttl);
    DNSInput in;
    if (data != null) in = new DNSInput (data);
    else in = null;

    try {
        return newRecord (name, type, dclass, ttl, length, in);
    } catch (IOException e) {
        return null;
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Record.java" startline="137" endline="140">
public static Record newRecord (Name name, int type, int dclass, long ttl, byte [] data) {
    return newRecord (name, type, dclass, ttl, data.length, data);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Record.java" startline="150" endline="159">
public static Record newRecord (Name name, int type, int dclass, long ttl) {
    if (! name.isAbsolute ()) throw new RelativeNameException (name);

    Type.check (type);
    DClass.check (dclass);
    TTL.check (ttl);
    return getEmptyRecord (name, type, dclass, ttl, false);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Record.java" startline="170" endline="173">
public static Record newRecord (Name name, int type, int dclass) {
    return newRecord (name, type, dclass, 0);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Record.java" startline="175" endline="197">
static Record fromWire (DNSInput in, int section, boolean isUpdate) throws IOException {
    int type, dclass;
    long ttl;
    int length;
    Name name;
    Record rec;
    name = new Name (in);
    type = in.readU16 ();
    dclass = in.readU16 ();
    if (section == Section.QUESTION) return newRecord (name, type, dclass);

    ttl = in.readU32 ();
    length = in.readU16 ();
    if (length == 0 && isUpdate && (section == Section.PREREQ || section == Section.UPDATE)) return newRecord (name, type, dclass, ttl);

    rec = newRecord (name, type, dclass, ttl, length, in);
    return rec;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Record.java" startline="199" endline="202">
static Record fromWire (DNSInput in, int section) throws IOException {
    return fromWire (in, section, false);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Record.java" startline="207" endline="210">
public static Record fromWire (byte [] b, int section) throws IOException {
    return fromWire (new DNSInput (b), section, false);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Record.java" startline="212" endline="225">
void toWire (DNSOutput out, int section, Compression c) {
    name.toWire (out, c);
    out.writeU16 (type);
    out.writeU16 (dclass);
    if (section == Section.QUESTION) return;

    out.writeU32 (ttl);
    int lengthPosition = out.current ();
    out.writeU16 (0);
    rrToWire (out, c, false);
    int rrlength = out.current () - lengthPosition - 2;
    out.writeU16At (rrlength, lengthPosition);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Record.java" startline="230" endline="235">
public byte [] toWire (int section) {
    DNSOutput out = new DNSOutput ();
    toWire (out, section, null);
    return out.toByteArray ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Record.java" startline="237" endline="252">
private void toWireCanonical (DNSOutput out, boolean noTTL) {
    name.toWireCanonical (out);
    out.writeU16 (type);
    out.writeU16 (dclass);
    if (noTTL) {
        out.writeU32 (0);
    } else {
        out.writeU32 (ttl);
    }
    int lengthPosition = out.current ();
    out.writeU16 (0);
    rrToWire (out, null, true);
    int rrlength = out.current () - lengthPosition - 2;
    out.writeU16At (rrlength, lengthPosition);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Record.java" startline="258" endline="263">
private byte [] toWireCanonical (boolean noTTL) {
    DNSOutput out = new DNSOutput ();
    toWireCanonical (out, noTTL);
    return out.toByteArray ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Record.java" startline="269" endline="272">
public byte [] toWireCanonical () {
    return toWireCanonical (false);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Record.java" startline="278" endline="283">
public byte [] rdataToWireCanonical () {
    DNSOutput out = new DNSOutput ();
    rrToWire (out, null, true);
    return out.toByteArray ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Record.java" startline="293" endline="296">
public String rdataToString () {
    return rrToString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Record.java" startline="301" endline="326">
public String toString () {
    StringBuffer sb = new StringBuffer ();
    sb.append (name);
    if (sb.length () < 8) sb.append ("\t");

    if (sb.length () < 16) sb.append ("\t");

    sb.append ("\t");
    if (Options.check ("BINDTTL")) sb.append (TTL.format (ttl));
    else sb.append (ttl);

    sb.append ("\t");
    if (dclass != DClass.IN || ! Options.check ("noPrintIN")) {
        sb.append (DClass.string (dclass));
        sb.append ("\t");
    }
    sb.append (Type.string (type));
    String rdata = rrToString ();
    if (! rdata.equals ("")) {
        sb.append ("\t");
        sb.append (rdata);
    }
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Record.java" startline="337" endline="395">
protected static byte [] byteArrayFromString (String s) throws TextParseException {
    byte [] array = s.getBytes ();
    boolean escaped = false;
    boolean hasEscapes = false;
    for (int i = 0;
    i < array.length; i ++) {
        if (array [i] == '\\') {
            hasEscapes = true;
            break;
        }
    }
    if (! hasEscapes) {
        if (array.length > 255) {
            throw new TextParseException ("text string too long");
        }
        return array;
    }
    ByteArrayOutputStream os = new ByteArrayOutputStream ();
    int digits = 0;
    int intval = 0;
    for (int i = 0;
    i < array.length; i ++) {
        byte b = array [i];
        if (escaped) {
            if (b >= '0' && b <= '9' && digits < 3) {
                digits ++;
                intval *= 10;
                intval += (b - '0');
                if (intval > 255) throw new TextParseException ("bad escape");

                if (digits < 3) continue;

                b = (byte) intval;
            } else if (digits > 0 && digits < 3) throw new TextParseException ("bad escape");

            os.write (b);
            escaped = false;
        } else if (array [i] == '\\') {
            escaped = true;
            digits = 0;
            intval = 0;
        } else os.write (array [i]);

    }
    if (digits > 0 && digits < 3) throw new TextParseException ("bad escape");

    array = os.toByteArray ();
    if (array.length > 255) {
        throw new TextParseException ("text string too long");
    }
    return os.toByteArray ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Record.java" startline="400" endline="419">
protected static String byteArrayToString (byte [] array, boolean quote) {
    StringBuffer sb = new StringBuffer ();
    if (quote) sb.append ('"');

    for (int i = 0;
    i < array.length; i ++) {
        int b = array [i] & 0xFF;
        if (b < 0x20 || b >= 0x7f) {
            sb.append ('\\');
            sb.append (byteFormat.format (b));
        } else if (b == '"' || b == '\\') {
            sb.append ('\\');
            sb.append ((char) b);
        } else sb.append ((char) b);

    }
    if (quote) sb.append ('"');

    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Record.java" startline="424" endline="432">
protected static String unknownToString (byte [] data) {
    StringBuffer sb = new StringBuffer ();
    sb.append ("\\# ");
    sb.append (data.length);
    sb.append (" ");
    sb.append (base16.toString (data));
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Record.java" startline="445" endline="478">
public static Record fromString (Name name, int type, int dclass, long ttl, Tokenizer st, Name origin) throws IOException {
    Record rec;
    if (! name.isAbsolute ()) throw new RelativeNameException (name);

    Type.check (type);
    DClass.check (dclass);
    TTL.check (ttl);
    Tokenizer.Token t = st.get ();
    if (t.type == Tokenizer.IDENTIFIER && t.value.equals ("\\#")) {
        int length = st.getUInt16 ();
        byte [] data = st.getHex ();
        if (data == null) {
            data = new byte [0];
        }
        if (length != data.length) throw st.exception ("invalid unknown RR encoding: " + "length mismatch");

        DNSInput in = new DNSInput (data);
        return newRecord (name, type, dclass, ttl, length, in);
    }
    st.unget ();
    rec = getEmptyRecord (name, type, dclass, ttl, true);
    rec.rdataFromString (st, origin);
    t = st.get ();
    if (t.type != Tokenizer.EOL && t.type != Tokenizer.EOF) {
        throw st.exception ("unexpected tokens at end of record");
    }
    return rec;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Record.java" startline="491" endline="496">
public static Record fromString (Name name, int type, int dclass, long ttl, String s, Name origin) throws IOException {
    return fromString (name, type, dclass, ttl, new Tokenizer (s), origin);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Record.java" startline="502" endline="505">
public Name getName () {
    return name;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Record.java" startline="511" endline="514">
public int getType () {
    return type;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Record.java" startline="525" endline="532">
public int getRRsetType () {
    if (type == Type.RRSIG) {
        RRSIGRecord sig = (RRSIGRecord) this;
        return sig.getTypeCovered ();
    }
    return type;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Record.java" startline="537" endline="540">
public int getDClass () {
    return dclass;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Record.java" startline="545" endline="548">
public long getTTL () {
    return ttl;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Record.java" startline="561" endline="566">
public boolean sameRRset (Record rec) {
    return (getRRsetType () == rec.getRRsetType () && dclass == rec.dclass && name.equals (rec.name));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Record.java" startline="574" endline="584">
public boolean equals (Object arg) {
    if (arg == null || ! (arg instanceof Record)) return false;

    Record r = (Record) arg;
    if (type != r.type || dclass != r.dclass || ! name.equals (r.name)) return false;

    byte [] array1 = rdataToWireCanonical ();
    byte [] array2 = r.rdataToWireCanonical ();
    return Arrays.equals (array1, array2);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Record.java" startline="589" endline="596">
public int hashCode () {
    byte [] array = toWireCanonical (true);
    int code = 0;
    for (int i = 0;
    i < array.length; i ++) code += ((code << 3) + (array [i] & 0xFF));

    return code;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Record.java" startline="598" endline="606">
Record cloneRecord () {
    try {
        return (Record) clone ();
    } catch (CloneNotSupportedException e) {
        throw new IllegalStateException ();
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Record.java" startline="612" endline="619">
public Record withName (Name name) {
    if (! name.isAbsolute ()) throw new RelativeNameException (name);

    Record rec = cloneRecord ();
    rec.name = name;
    return rec;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Record.java" startline="625" endline="631">
Record withDClass (int dclass, long ttl) {
    Record rec = cloneRecord ();
    rec.dclass = dclass;
    rec.ttl = ttl;
    return rec;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Record.java" startline="634" endline="637">
void setTTL (long ttl) {
    this.ttl = ttl;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Record.java" startline="649" endline="673">
public int compareTo (Object o) {
    Record arg = (Record) o;
    if (this == arg) return (0);

    int n = name.compareTo (arg.name);
    if (n != 0) return (n);

    n = dclass - arg.dclass;
    if (n != 0) return (n);

    n = type - arg.type;
    if (n != 0) return (n);

    byte [] rdata1 = rdataToWireCanonical ();
    byte [] rdata2 = arg.rdataToWireCanonical ();
    for (int i = 0;
    i < rdata1.length && i < rdata2.length; i ++) {
        n = (rdata1 [i] & 0xFF) - (rdata2 [i] & 0xFF);
        if (n != 0) return (n);

    }
    return (rdata1.length - rdata2.length);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Record.java" startline="682" endline="685">
public Name getAdditionalName () {
    return null;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Record.java" startline="688" endline="695">
static int checkU8 (String field, int val) {
    if (val < 0 || val > 0xFF) throw new IllegalArgumentException ("\"" + field + "\" " + val + " must be an unsigned 8 " + "bit value");

    return val;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Record.java" startline="698" endline="705">
static int checkU16 (String field, int val) {
    if (val < 0 || val > 0xFFFF) throw new IllegalArgumentException ("\"" + field + "\" " + val + " must be an unsigned 16 " + "bit value");

    return val;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Record.java" startline="708" endline="715">
static long checkU32 (String field, long val) {
    if (val < 0 || val > 0xFFFFFFFFL) throw new IllegalArgumentException ("\"" + field + "\" " + val + " must be an unsigned 32 " + "bit value");

    return val;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Record.java" startline="718" endline="723">
static Name checkName (String field, Name name) {
    if (! name.isAbsolute ()) throw new RelativeNameException (name);

    return name;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Record.java" startline="725" endline="734">
static byte [] checkByteArrayLength (String field, byte [] array, int maxLength) {
    if (array.length > 0xFFFF) throw new IllegalArgumentException ("\"" + field + "\" array " + "must have no more than " + maxLength + " elements");

    byte [] out = new byte [array.length];
    System.arraycopy (array, 0, out, 0, array.length);
    return out;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/CAARecord.java" startline="19" endline="19">
private Flags () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/CAARecord.java" startline="28" endline="28">
CAARecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/CAARecord.java" startline="30" endline="33">
Record getObject () {
    return new CAARecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/CAARecord.java" startline="41" endline="53">
public CAARecord (Name name, int dclass, long ttl, int flags, String tag, String value) {
    super (name, Type.CAA, dclass, ttl);
    this.flags = checkU8 ("flags", flags);
    try {
        this.tag = byteArrayFromString (tag);
        this.value = byteArrayFromString (value);
    } catch (TextParseException e) {
        throw new IllegalArgumentException (e.getMessage ());
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/CAARecord.java" startline="55" endline="60">
void rrFromWire (DNSInput in) throws IOException {
    flags = in.readU8 ();
    tag = in.readCountedString ();
    value = in.readByteArray ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/CAARecord.java" startline="62" endline="72">
void rdataFromString (Tokenizer st, Name origin) throws IOException {
    flags = st.getUInt8 ();
    try {
        tag = byteArrayFromString (st.getString ());
        value = byteArrayFromString (st.getString ());
    } catch (TextParseException e) {
        throw st.exception (e.getMessage ());
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/CAARecord.java" startline="74" endline="83">
String rrToString () {
    StringBuffer sb = new StringBuffer ();
    sb.append (flags);
    sb.append (" ");
    sb.append (byteArrayToString (tag, false));
    sb.append (" ");
    sb.append (byteArrayToString (value, true));
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/CAARecord.java" startline="86" endline="89">
public int getFlags () {
    return flags;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/CAARecord.java" startline="92" endline="95">
public String getTag () {
    return byteArrayToString (tag, false);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/CAARecord.java" startline="98" endline="101">
public String getValue () {
    return byteArrayToString (value, false);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/CAARecord.java" startline="103" endline="108">
void rrToWire (DNSOutput out, Compression c, boolean canonical) {
    out.writeU8 (flags);
    out.writeCountedString (tag);
    out.writeByteArray (value);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="26" endline="26">
private Algorithm () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="99" endline="102">
public static String string (int alg) {
    return algs.getText (alg);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="110" endline="113">
public static int value (String s) {
    return algs.getValue (s);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="116" endline="117">
private DNSSEC () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="119" endline="129">
private static void digestSIG (DNSOutput out, SIGBase sig) {
    out.writeU16 (sig.getTypeCovered ());
    out.writeU8 (sig.getAlgorithm ());
    out.writeU8 (sig.getLabels ());
    out.writeU32 (sig.getOrigTTL ());
    out.writeU32 (sig.getExpire ().getTime () / 1000);
    out.writeU32 (sig.getTimeSigned ().getTime () / 1000);
    out.writeU16 (sig.getFootprint ());
    sig.getSigner ().toWireCanonical (out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="139" endline="177">
public static byte [] digestRRset (RRSIGRecord rrsig, RRset rrset) {
    DNSOutput out = new DNSOutput ();
    digestSIG (out, rrsig);
    int size = rrset.size ();
    Record [] records = new Record [size];
    Iterator it = rrset.rrs ();
    Name name = rrset.getName ();
    Name wild = null;
    int sigLabels = rrsig.getLabels () + 1;
    if (name.labels () > sigLabels) wild = name.wild (name.labels () - sigLabels);

    while (it.hasNext ()) records [-- size] = (Record) it.next ();

    Arrays.sort (records);
    DNSOutput header = new DNSOutput ();
    if (wild != null) wild.toWireCanonical (header);
    else name.toWireCanonical (header);

    header.writeU16 (rrset.getType ());
    header.writeU16 (rrset.getDClass ());
    header.writeU32 (rrsig.getOrigTTL ());
    for (int i = 0;
    i < records.length; i ++) {
        out.writeByteArray (header.toByteArray ());
        int lengthPosition = out.current ();
        out.writeU16 (0);
        out.writeByteArray (records [i].rdataToWireCanonical ());
        int rrlength = out.current () - lengthPosition - 2;
        out.save ();
        out.jump (lengthPosition);
        out.writeU16 (rrlength);
        out.restore ();
    }
    return out.toByteArray ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="188" endline="198">
public static byte [] digestMessage (SIGRecord sig, Message msg, byte [] previous) {
    DNSOutput out = new DNSOutput ();
    digestSIG (out, sig);
    if (previous != null) out.writeByteArray (previous);

    msg.toWire (out);
    return out.toByteArray ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="204" endline="206">
DNSSECException (String s) {
    super (s);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="213" endline="215">
UnsupportedAlgorithmException (int alg) {
    super ("Unsupported algorithm: " + alg);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="222" endline="224">
MalformedKeyException (KEYBase rec) {
    super ("Invalid key data: " + rec.rdataToString ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="235" endline="244">
KeyMismatchException (KEYBase key, SIGBase sig) {
    super ("key " + key.getName () + "/" + DNSSEC.Algorithm.string (key.getAlgorithm ()) + "/" + key.getFootprint () + " " + "does not match signature " + sig.getSigner () + "/" + DNSSEC.Algorithm.string (sig.getAlgorithm ()) + "/" + sig.getFootprint ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="253" endline="257">
SignatureExpiredException (Date when, Date now) {
    super ("signature expired");
    this.when = when;
    this.now = now;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="262" endline="265">
public Date getExpiration () {
    return when;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="270" endline="273">
public Date getVerifyTime () {
    return now;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="282" endline="286">
SignatureNotYetValidException (Date when, Date now) {
    super ("signature is not yet valid");
    this.when = when;
    this.now = now;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="291" endline="294">
public Date getExpiration () {
    return when;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="299" endline="302">
public Date getVerifyTime () {
    return now;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="310" endline="312">
SignatureVerificationException () {
    super ("signature verification failed");
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="319" endline="321">
IncompatibleKeyException () {
    super ("incompatible keys");
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="328" endline="330">
NoSignatureException () {
    super ("no signature found");
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="333" endline="336">
private static int BigIntegerLength (BigInteger i) {
    return (i.bitLength () + 7) / 8;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="338" endline="342">
private static BigInteger readBigInteger (DNSInput in, int len) throws IOException {
    byte [] b = in.readByteArray (len);
    return new BigInteger (1, b);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="344" endline="348">
private static BigInteger readBigInteger (DNSInput in) {
    byte [] b = in.readByteArray ();
    return new BigInteger (1, b);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="350" endline="359">
private static byte [] trimByteArray (byte [] array) {
    if (array [0] == 0) {
        byte trimmedArray [] = new byte [array.length - 1];
        System.arraycopy (array, 1, trimmedArray, 0, array.length - 1);
        return trimmedArray;
    } else {
        return array;
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="361" endline="369">
private static void reverseByteArray (byte [] array) {
    for (int i = 0;
    i < array.length / 2; i ++) {
        int j = array.length - i - 1;
        byte tmp = array [i];
        array [i] = array [j];
        array [j] = tmp;
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="371" endline="376">
private static BigInteger readBigIntegerLittleEndian (DNSInput in, int len) throws IOException {
    byte [] b = in.readByteArray (len);
    reverseByteArray (b);
    return new BigInteger (1, b);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="378" endline="382">
private static void writeBigInteger (DNSOutput out, BigInteger val) {
    byte [] b = trimByteArray (val.toByteArray ());
    out.writeByteArray (b);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="384" endline="397">
private static void writePaddedBigInteger (DNSOutput out, BigInteger val, int len) {
    byte [] b = trimByteArray (val.toByteArray ());
    if (b.length > len) throw new IllegalArgumentException ();

    if (b.length < len) {
        byte [] pad = new byte [len - b.length];
        out.writeByteArray (pad);
    }
    out.writeByteArray (b);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="399" endline="413">
private static void writePaddedBigIntegerLittleEndian (DNSOutput out, BigInteger val, int len) {
    byte [] b = trimByteArray (val.toByteArray ());
    if (b.length > len) throw new IllegalArgumentException ();

    reverseByteArray (b);
    out.writeByteArray (b);
    if (b.length < len) {
        byte [] pad = new byte [len - b.length];
        out.writeByteArray (pad);
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="415" endline="426">
private static PublicKey toRSAPublicKey (KEYBase r) throws IOException, GeneralSecurityException {
    DNSInput in = new DNSInput (r.getKey ());
    int exponentLength = in.readU8 ();
    if (exponentLength == 0) exponentLength = in.readU16 ();

    BigInteger exponent = readBigInteger (in, exponentLength);
    BigInteger modulus = readBigInteger (in);
    KeyFactory factory = KeyFactory.getInstance ("RSA");
    return factory.generatePublic (new RSAPublicKeySpec (modulus, exponent));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="428" endline="445">
private static PublicKey toDSAPublicKey (KEYBase r) throws IOException, GeneralSecurityException, MalformedKeyException {
    DNSInput in = new DNSInput (r.getKey ());
    int t = in.readU8 ();
    if (t > 8) throw new MalformedKeyException (r);

    BigInteger q = readBigInteger (in, 20);
    BigInteger p = readBigInteger (in, 64 + t * 8);
    BigInteger g = readBigInteger (in, 64 + t * 8);
    BigInteger y = readBigInteger (in, 64 + t * 8);
    KeyFactory factory = KeyFactory.getInstance ("DSA");
    return factory.generatePublic (new DSAPublicKeySpec (y, p, q, g));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="453" endline="465">
ECKeyInfo (int length, String p_str, String a_str, String b_str, String gx_str, String gy_str, String n_str) {
    this.length = length;
    p = new BigInteger (p_str, 16);
    a = new BigInteger (a_str, 16);
    b = new BigInteger (b_str, 16);
    gx = new BigInteger (gx_str, 16);
    gy = new BigInteger (gy_str, 16);
    n = new BigInteger (n_str, 16);
    curve = new EllipticCurve (new ECFieldFp (p), a, b);
    spec = new ECParameterSpec (curve, new ECPoint (gx, gy), n, 1);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="495" endline="507">
private static PublicKey toECGOSTPublicKey (KEYBase r, ECKeyInfo keyinfo) throws IOException, GeneralSecurityException, MalformedKeyException {
    DNSInput in = new DNSInput (r.getKey ());
    BigInteger x = readBigIntegerLittleEndian (in, keyinfo.length);
    BigInteger y = readBigIntegerLittleEndian (in, keyinfo.length);
    ECPoint q = new ECPoint (x, y);
    KeyFactory factory = KeyFactory.getInstance ("ECGOST3410");
    return factory.generatePublic (new ECPublicKeySpec (q, keyinfo.spec));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="509" endline="522">
private static PublicKey toECDSAPublicKey (KEYBase r, ECKeyInfo keyinfo) throws IOException, GeneralSecurityException, MalformedKeyException {
    DNSInput in = new DNSInput (r.getKey ());
    BigInteger x = readBigInteger (in, keyinfo.length);
    BigInteger y = readBigInteger (in, keyinfo.length);
    ECPoint q = new ECPoint (x, y);
    KeyFactory factory = KeyFactory.getInstance ("EC");
    return factory.generatePublic (new ECPublicKeySpec (q, keyinfo.spec));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="525" endline="555">
static PublicKey toPublicKey (KEYBase r) throws DNSSECException {
    int alg = r.getAlgorithm ();
    try {
        switch (alg) {
            case Algorithm.RSAMD5 :
            case Algorithm.RSASHA1 :
            case Algorithm.RSA_NSEC3_SHA1 :
            case Algorithm.RSASHA256 :
            case Algorithm.RSASHA512 :
                return toRSAPublicKey (r);
            case Algorithm.DSA :
            case Algorithm.DSA_NSEC3_SHA1 :
                return toDSAPublicKey (r);
            case Algorithm.ECC_GOST :
                return toECGOSTPublicKey (r, GOST);
            case Algorithm.ECDSAP256SHA256 :
                return toECDSAPublicKey (r, ECDSA_P256);
            case Algorithm.ECDSAP384SHA384 :
                return toECDSAPublicKey (r, ECDSA_P384);
            default :
                throw new UnsupportedAlgorithmException (alg);
        }
    } catch (IOException e) {
        throw new MalformedKeyException (r);
    } catch (GeneralSecurityException e) {
        throw new DNSSECException (e.toString ());
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="557" endline="574">
private static byte [] fromRSAPublicKey (RSAPublicKey key) {
    DNSOutput out = new DNSOutput ();
    BigInteger exponent = key.getPublicExponent ();
    BigInteger modulus = key.getModulus ();
    int exponentLength = BigIntegerLength (exponent);
    if (exponentLength < 256) out.writeU8 (exponentLength);
    else {
        out.writeU8 (0);
        out.writeU16 (exponentLength);
    }
    writeBigInteger (out, exponent);
    writeBigInteger (out, modulus);
    return out.toByteArray ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="576" endline="592">
private static byte [] fromDSAPublicKey (DSAPublicKey key) {
    DNSOutput out = new DNSOutput ();
    BigInteger q = key.getParams ().getQ ();
    BigInteger p = key.getParams ().getP ();
    BigInteger g = key.getParams ().getG ();
    BigInteger y = key.getY ();
    int t = (p.toByteArray ().length - 64) / 8;
    out.writeU8 (t);
    writeBigInteger (out, q);
    writeBigInteger (out, p);
    writePaddedBigInteger (out, g, 8 * t + 64);
    writePaddedBigInteger (out, y, 8 * t + 64);
    return out.toByteArray ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="594" endline="605">
private static byte [] fromECGOSTPublicKey (ECPublicKey key, ECKeyInfo keyinfo) {
    DNSOutput out = new DNSOutput ();
    BigInteger x = key.getW ().getAffineX ();
    BigInteger y = key.getW ().getAffineY ();
    writePaddedBigIntegerLittleEndian (out, x, keyinfo.length);
    writePaddedBigIntegerLittleEndian (out, y, keyinfo.length);
    return out.toByteArray ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="607" endline="618">
private static byte [] fromECDSAPublicKey (ECPublicKey key, ECKeyInfo keyinfo) {
    DNSOutput out = new DNSOutput ();
    BigInteger x = key.getW ().getAffineX ();
    BigInteger y = key.getW ().getAffineY ();
    writePaddedBigInteger (out, x, keyinfo.length);
    writePaddedBigInteger (out, y, keyinfo.length);
    return out.toByteArray ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="621" endline="653">
static byte [] fromPublicKey (PublicKey key, int alg) throws DNSSECException {
    switch (alg) {
        case Algorithm.RSAMD5 :
        case Algorithm.RSASHA1 :
        case Algorithm.RSA_NSEC3_SHA1 :
        case Algorithm.RSASHA256 :
        case Algorithm.RSASHA512 :
            if (! (key instanceof RSAPublicKey)) throw new IncompatibleKeyException ();

            return fromRSAPublicKey ((RSAPublicKey) key);
        case Algorithm.DSA :
        case Algorithm.DSA_NSEC3_SHA1 :
            if (! (key instanceof DSAPublicKey)) throw new IncompatibleKeyException ();

            return fromDSAPublicKey ((DSAPublicKey) key);
        case Algorithm.ECC_GOST :
            if (! (key instanceof ECPublicKey)) throw new IncompatibleKeyException ();

            return fromECGOSTPublicKey ((ECPublicKey) key, GOST);
        case Algorithm.ECDSAP256SHA256 :
            if (! (key instanceof ECPublicKey)) throw new IncompatibleKeyException ();

            return fromECDSAPublicKey ((ECPublicKey) key, ECDSA_P256);
        case Algorithm.ECDSAP384SHA384 :
            if (! (key instanceof ECPublicKey)) throw new IncompatibleKeyException ();

            return fromECDSAPublicKey ((ECPublicKey) key, ECDSA_P384);
        default :
            throw new UnsupportedAlgorithmException (alg);
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="660" endline="684">
public static String algString (int alg) throws UnsupportedAlgorithmException {
    switch (alg) {
        case Algorithm.RSAMD5 :
            return "MD5withRSA";
        case Algorithm.DSA :
        case Algorithm.DSA_NSEC3_SHA1 :
            return "SHA1withDSA";
        case Algorithm.RSASHA1 :
        case Algorithm.RSA_NSEC3_SHA1 :
            return "SHA1withRSA";
        case Algorithm.RSASHA256 :
            return "SHA256withRSA";
        case Algorithm.RSASHA512 :
            return "SHA512withRSA";
        case Algorithm.ECC_GOST :
            return "GOST3411withECGOST3410";
        case Algorithm.ECDSAP256SHA256 :
            return "SHA256withECDSA";
        case Algorithm.ECDSAP384SHA384 :
            return "SHA384withECDSA";
        default :
            throw new UnsupportedAlgorithmException (alg);
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="691" endline="727">
private static byte [] DSASignaturefromDNS (byte [] dns) throws DNSSECException, IOException {
    if (dns.length != 1 + DSA_LEN * 2) throw new SignatureVerificationException ();

    DNSInput in = new DNSInput (dns);
    DNSOutput out = new DNSOutput ();
    int t = in.readU8 ();
    byte [] r = in.readByteArray (DSA_LEN);
    int rlen = DSA_LEN;
    if (r [0] < 0) rlen ++;

    byte [] s = in.readByteArray (DSA_LEN);
    int slen = DSA_LEN;
    if (s [0] < 0) slen ++;

    out.writeU8 (ASN1_SEQ);
    out.writeU8 (rlen + slen + 4);
    out.writeU8 (ASN1_INT);
    out.writeU8 (rlen);
    if (rlen > DSA_LEN) out.writeU8 (0);

    out.writeByteArray (r);
    out.writeU8 (ASN1_INT);
    out.writeU8 (slen);
    if (slen > DSA_LEN) out.writeU8 (0);

    out.writeByteArray (s);
    return out.toByteArray ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="729" endline="766">
private static byte [] DSASignaturetoDNS (byte [] signature, int t) throws IOException {
    DNSInput in = new DNSInput (signature);
    DNSOutput out = new DNSOutput ();
    out.writeU8 (t);
    int tmp = in.readU8 ();
    if (tmp != ASN1_SEQ) throw new IOException ();

    int seqlen = in.readU8 ();
    tmp = in.readU8 ();
    if (tmp != ASN1_INT) throw new IOException ();

    int rlen = in.readU8 ();
    if (rlen == DSA_LEN + 1) {
        if (in.readU8 () != 0) throw new IOException ();

    } else if (rlen != DSA_LEN) throw new IOException ();

    byte [] bytes = in.readByteArray (DSA_LEN);
    out.writeByteArray (bytes);
    tmp = in.readU8 ();
    if (tmp != ASN1_INT) throw new IOException ();

    int slen = in.readU8 ();
    if (slen == DSA_LEN + 1) {
        if (in.readU8 () != 0) throw new IOException ();

    } else if (slen != DSA_LEN) throw new IOException ();

    bytes = in.readByteArray (DSA_LEN);
    out.writeByteArray (bytes);
    return out.toByteArray ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="768" endline="776">
private static byte [] ECGOSTSignaturefromDNS (byte [] signature, ECKeyInfo keyinfo) throws DNSSECException, IOException {
    if (signature.length != keyinfo.length * 2) throw new SignatureVerificationException ();

    return signature;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="778" endline="814">
private static byte [] ECDSASignaturefromDNS (byte [] signature, ECKeyInfo keyinfo) throws DNSSECException, IOException {
    if (signature.length != keyinfo.length * 2) throw new SignatureVerificationException ();

    DNSInput in = new DNSInput (signature);
    DNSOutput out = new DNSOutput ();
    byte [] r = in.readByteArray (keyinfo.length);
    int rlen = keyinfo.length;
    if (r [0] < 0) rlen ++;

    byte [] s = in.readByteArray (keyinfo.length);
    int slen = keyinfo.length;
    if (s [0] < 0) slen ++;

    out.writeU8 (ASN1_SEQ);
    out.writeU8 (rlen + slen + 4);
    out.writeU8 (ASN1_INT);
    out.writeU8 (rlen);
    if (rlen > keyinfo.length) out.writeU8 (0);

    out.writeByteArray (r);
    out.writeU8 (ASN1_INT);
    out.writeU8 (slen);
    if (slen > keyinfo.length) out.writeU8 (0);

    out.writeByteArray (s);
    return out.toByteArray ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="816" endline="851">
private static byte [] ECDSASignaturetoDNS (byte [] signature, ECKeyInfo keyinfo) throws IOException {
    DNSInput in = new DNSInput (signature);
    DNSOutput out = new DNSOutput ();
    int tmp = in.readU8 ();
    if (tmp != ASN1_SEQ) throw new IOException ();

    int seqlen = in.readU8 ();
    tmp = in.readU8 ();
    if (tmp != ASN1_INT) throw new IOException ();

    int rlen = in.readU8 ();
    if (rlen == keyinfo.length + 1) {
        if (in.readU8 () != 0) throw new IOException ();

    } else if (rlen != keyinfo.length) throw new IOException ();

    byte [] bytes = in.readByteArray (keyinfo.length);
    out.writeByteArray (bytes);
    tmp = in.readU8 ();
    if (tmp != ASN1_INT) throw new IOException ();

    int slen = in.readU8 ();
    if (slen == keyinfo.length + 1) {
        if (in.readU8 () != 0) throw new IOException ();

    } else if (slen != keyinfo.length) throw new IOException ();

    bytes = in.readByteArray (keyinfo.length);
    out.writeByteArray (bytes);
    return out.toByteArray ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="853" endline="898">
private static void verify (PublicKey key, int alg, byte [] data, byte [] signature) throws DNSSECException {
    if (key instanceof DSAPublicKey) {
        try {
            signature = DSASignaturefromDNS (signature);
        } catch (IOException e) {
            throw new IllegalStateException ();
        }
    } else if (key instanceof ECPublicKey) {
        try {
            switch (alg) {
                case Algorithm.ECC_GOST :
                    signature = ECGOSTSignaturefromDNS (signature, GOST);
                    break;
                case Algorithm.ECDSAP256SHA256 :
                    signature = ECDSASignaturefromDNS (signature, ECDSA_P256);
                    break;
                case Algorithm.ECDSAP384SHA384 :
                    signature = ECDSASignaturefromDNS (signature, ECDSA_P384);
                    break;
                default :
                    throw new UnsupportedAlgorithmException (alg);
            }
        } catch (IOException e) {
            throw new IllegalStateException ();
        }
    }

    try {
        Signature s = Signature.getInstance (algString (alg));
        s.initVerify (key);
        s.update (data);
        if (! s.verify (signature)) throw new SignatureVerificationException ();

    } catch (GeneralSecurityException e) {
        throw new DNSSECException (e.toString ());
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="900" endline="906">
private static boolean matches (SIGBase sig, KEYBase key) {
    return (key.getAlgorithm () == sig.getAlgorithm () && key.getFootprint () == sig.getFootprint () && key.getName ().equals (sig.getSigner ()));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="921" endline="936">
public static void verify (RRset rrset, RRSIGRecord rrsig, DNSKEYRecord key) throws DNSSECException {
    if (! matches (rrsig, key)) throw new KeyMismatchException (key, rrsig);

    Date now = new Date ();
    if (now.compareTo (rrsig.getExpire ()) > 0) throw new SignatureExpiredException (rrsig.getExpire (), now);

    if (now.compareTo (rrsig.getTimeSigned ()) < 0) throw new SignatureNotYetValidException (rrsig.getTimeSigned (), now);

    verify (key.getPublicKey (), rrsig.getAlgorithm (), digestRRset (rrsig, rrset), rrsig.getSignature ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="938" endline="991">
private static byte [] sign (PrivateKey privkey, PublicKey pubkey, int alg, byte [] data, String provider) throws DNSSECException {
    byte [] signature;
    try {
        Signature s;
        if (provider != null) s = Signature.getInstance (algString (alg), provider);
        else s = Signature.getInstance (algString (alg));

        s.initSign (privkey);
        s.update (data);
        signature = s.sign ();
    } catch (GeneralSecurityException e) {
        throw new DNSSECException (e.toString ());
    }
    if (pubkey instanceof DSAPublicKey) {
        try {
            DSAPublicKey dsa = (DSAPublicKey) pubkey;
            BigInteger P = dsa.getParams ().getP ();
            int t = (BigIntegerLength (P) - 64) / 8;
            signature = DSASignaturetoDNS (signature, t);
        } catch (IOException e) {
            throw new IllegalStateException ();
        }
    } else if (pubkey instanceof ECPublicKey) {
        try {
            switch (alg) {
                case Algorithm.ECC_GOST :
                    break;
                case Algorithm.ECDSAP256SHA256 :
                    signature = ECDSASignaturetoDNS (signature, ECDSA_P256);
                    break;
                case Algorithm.ECDSAP384SHA384 :
                    signature = ECDSASignaturetoDNS (signature, ECDSA_P384);
                    break;
                default :
                    throw new UnsupportedAlgorithmException (alg);
            }
        } catch (IOException e) {
            throw new IllegalStateException ();
        }
    }

    return signature;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="992" endline="1018">
static void checkAlgorithm (PrivateKey key, int alg) throws UnsupportedAlgorithmException {
    switch (alg) {
        case Algorithm.RSAMD5 :
        case Algorithm.RSASHA1 :
        case Algorithm.RSA_NSEC3_SHA1 :
        case Algorithm.RSASHA256 :
        case Algorithm.RSASHA512 :
            if (! (key instanceof RSAPrivateKey)) throw new IncompatibleKeyException ();

            break;
        case Algorithm.DSA :
        case Algorithm.DSA_NSEC3_SHA1 :
            if (! (key instanceof DSAPrivateKey)) throw new IncompatibleKeyException ();

            break;
        case Algorithm.ECC_GOST :
        case Algorithm.ECDSAP256SHA256 :
        case Algorithm.ECDSAP384SHA384 :
            if (! (key instanceof ECPrivateKey)) throw new IncompatibleKeyException ();

            break;
        default :
            throw new UnsupportedAlgorithmException (alg);
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="1033" endline="1038">
public static RRSIGRecord sign (RRset rrset, DNSKEYRecord key, PrivateKey privkey, Date inception, Date expiration) throws DNSSECException {
    return sign (rrset, key, privkey, inception, expiration, null);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="1055" endline="1072">
public static RRSIGRecord sign (RRset rrset, DNSKEYRecord key, PrivateKey privkey, Date inception, Date expiration, String provider) throws DNSSECException {
    int alg = key.getAlgorithm ();
    checkAlgorithm (privkey, alg);
    RRSIGRecord rrsig = new RRSIGRecord (rrset.getName (), rrset.getDClass (), rrset.getTTL (), rrset.getType (), alg, rrset.getTTL (), expiration, inception, key.getFootprint (), key.getName (), null);
    rrsig.setSignature (sign (privkey, key.getPublicKey (), alg, digestRRset (rrsig, rrset), provider));
    return rrsig;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="1074" endline="1095">
static SIGRecord signMessage (Message message, SIGRecord previous, KEYRecord key, PrivateKey privkey, Date inception, Date expiration) throws DNSSECException {
    int alg = key.getAlgorithm ();
    checkAlgorithm (privkey, alg);
    SIGRecord sig = new SIGRecord (Name.root, DClass.ANY, 0, 0, alg, 0, expiration, inception, key.getFootprint (), key.getName (), null);
    DNSOutput out = new DNSOutput ();
    digestSIG (out, sig);
    if (previous != null) out.writeByteArray (previous.getSignature ());

    out.writeByteArray (message.toWire ());
    sig.setSignature (sign (privkey, key.getPublicKey (), alg, out.toByteArray (), null));
    return sig;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="1097" endline="1129">
static void verifyMessage (Message message, byte [] bytes, SIGRecord sig, SIGRecord previous, KEYRecord key) throws DNSSECException {
    if (message.sig0start == 0) throw new NoSignatureException ();

    if (! matches (sig, key)) throw new KeyMismatchException (key, sig);

    Date now = new Date ();
    if (now.compareTo (sig.getExpire ()) > 0) throw new SignatureExpiredException (sig.getExpire (), now);

    if (now.compareTo (sig.getTimeSigned ()) < 0) throw new SignatureNotYetValidException (sig.getTimeSigned (), now);

    DNSOutput out = new DNSOutput ();
    digestSIG (out, sig);
    if (previous != null) out.writeByteArray (previous.getSignature ());

    Header header = (Header) message.getHeader ().clone ();
    header.decCount (Section.ADDITIONAL);
    out.writeByteArray (header.toWire ());
    out.writeByteArray (bytes, Header.LENGTH, message.sig0start - Header.LENGTH);
    verify (key.getPublicKey (), sig.getAlgorithm (), out.toByteArray (), sig.getSignature ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSSEC.java" startline="1137" endline="1166">
static byte [] generateDSDigest (DNSKEYRecord key, int digestid) {
    MessageDigest digest;
    try {
        switch (digestid) {
            case DSRecord.Digest.SHA1 :
                digest = MessageDigest.getInstance ("sha-1");
                break;
            case DSRecord.Digest.SHA256 :
                digest = MessageDigest.getInstance ("sha-256");
                break;
            case DSRecord.Digest.GOST3411 :
                digest = MessageDigest.getInstance ("GOST3411");
                break;
            case DSRecord.Digest.SHA384 :
                digest = MessageDigest.getInstance ("sha-384");
                break;
            default :
                throw new IllegalArgumentException ("unknown DS digest type " + digestid);
        }
    } catch (NoSuchAlgorithmException e) {
        throw new IllegalStateException ("no message digest support");
    }
    digest.update (key.getName ().toWireCanonical ());
    digest.update (key.rdataToWireCanonical ());
    return digest.digest ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SOARecord.java" startline="20" endline="20">
SOARecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SOARecord.java" startline="22" endline="25">
Record getObject () {
    return new SOARecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SOARecord.java" startline="39" endline="51">
public SOARecord (Name name, int dclass, long ttl, Name host, Name admin, long serial, long refresh, long retry, long expire, long minimum) {
    super (name, Type.SOA, dclass, ttl);
    this.host = checkName ("host", host);
    this.admin = checkName ("admin", admin);
    this.serial = checkU32 ("serial", serial);
    this.refresh = checkU32 ("refresh", refresh);
    this.retry = checkU32 ("retry", retry);
    this.expire = checkU32 ("expire", expire);
    this.minimum = checkU32 ("minimum", minimum);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SOARecord.java" startline="53" endline="62">
void rrFromWire (DNSInput in) throws IOException {
    host = new Name (in);
    admin = new Name (in);
    serial = in.readU32 ();
    refresh = in.readU32 ();
    retry = in.readU32 ();
    expire = in.readU32 ();
    minimum = in.readU32 ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SOARecord.java" startline="64" endline="73">
void rdataFromString (Tokenizer st, Name origin) throws IOException {
    host = st.getName (origin);
    admin = st.getName (origin);
    serial = st.getUInt32 ();
    refresh = st.getTTLLike ();
    retry = st.getTTLLike ();
    expire = st.getTTLLike ();
    minimum = st.getTTLLike ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SOARecord.java" startline="76" endline="107">
String rrToString () {
    StringBuffer sb = new StringBuffer ();
    sb.append (host);
    sb.append (" ");
    sb.append (admin);
    if (Options.check ("multiline")) {
        sb.append (" (\n\t\t\t\t\t");
        sb.append (serial);
        sb.append ("\t; serial\n\t\t\t\t\t");
        sb.append (refresh);
        sb.append ("\t; refresh\n\t\t\t\t\t");
        sb.append (retry);
        sb.append ("\t; retry\n\t\t\t\t\t");
        sb.append (expire);
        sb.append ("\t; expire\n\t\t\t\t\t");
        sb.append (minimum);
        sb.append (" )\t; minimum");
    } else {
        sb.append (" ");
        sb.append (serial);
        sb.append (" ");
        sb.append (refresh);
        sb.append (" ");
        sb.append (retry);
        sb.append (" ");
        sb.append (expire);
        sb.append (" ");
        sb.append (minimum);
    }
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SOARecord.java" startline="110" endline="113">
public Name getHost () {
    return host;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SOARecord.java" startline="116" endline="119">
public Name getAdmin () {
    return admin;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SOARecord.java" startline="122" endline="125">
public long getSerial () {
    return serial;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SOARecord.java" startline="128" endline="131">
public long getRefresh () {
    return refresh;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SOARecord.java" startline="134" endline="137">
public long getRetry () {
    return retry;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SOARecord.java" startline="140" endline="143">
public long getExpire () {
    return expire;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SOARecord.java" startline="146" endline="149">
public long getMinimum () {
    return minimum;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SOARecord.java" startline="151" endline="160">
void rrToWire (DNSOutput out, Compression c, boolean canonical) {
    host.toWire (out, c, canonical);
    admin.toWire (out, c, canonical);
    out.writeU32 (serial);
    out.writeU32 (refresh);
    out.writeU32 (retry);
    out.writeU32 (expire);
    out.writeU32 (minimum);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/EmptyRecord.java" startline="18" endline="18">
EmptyRecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/EmptyRecord.java" startline="20" endline="23">
Record getObject () {
    return new EmptyRecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/EmptyRecord.java" startline="25" endline="27">
void rrFromWire (DNSInput in) throws IOException {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/EmptyRecord.java" startline="29" endline="31">
void rdataFromString (Tokenizer st, Name origin) throws IOException {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/EmptyRecord.java" startline="33" endline="36">
String rrToString () {
    return "";
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/EmptyRecord.java" startline="38" endline="40">
void rrToWire (DNSOutput out, Compression c, boolean canonical) {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/GenericEDNSOption.java" startline="18" endline="20">
GenericEDNSOption (int code) {
    super (code);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/GenericEDNSOption.java" startline="26" endline="30">
public GenericEDNSOption (int code, byte [] data) {
    super (code);
    this.data = Record.checkByteArrayLength ("option data", data, 0xFFFF);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/GenericEDNSOption.java" startline="32" endline="35">
void optionFromWire (DNSInput in) throws IOException {
    data = in.readByteArray ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/GenericEDNSOption.java" startline="37" endline="40">
void optionToWire (DNSOutput out) {
    out.writeByteArray (data);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/GenericEDNSOption.java" startline="42" endline="45">
String optionToString () {
    return "<" + base16.toString (data) + ">";
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ResolveThread.java" startline="20" endline="28">
public ResolveThread (Resolver res, Message query, Object id, ResolverListener listener) {
    this.res = res;
    this.query = query;
    this.id = id;
    this.listener = listener;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ResolveThread.java" startline="34" endline="43">
public void run () {
    try {
        Message response = res.send (query);
        listener.receiveMessage (id, response);
    } catch (Exception e) {
        listener.handleException (id, e);
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Client.java" startline="20" endline="37">
protected Client (SelectableChannel channel, long endTime) throws IOException {
    boolean done = false;
    Selector selector = null;
    this.endTime = endTime;
    try {
        selector = Selector.open ();
        channel.configureBlocking (false);
        key = channel.register (selector, SelectionKey.OP_READ);
        done = true;
    } finally {
        if (! done && selector != null) selector.close ();

        if (! done) channel.close ();

    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Client.java" startline="39" endline="49">
static protected void blockUntil (SelectionKey key, long endTime) throws IOException {
    long timeout = endTime - System.currentTimeMillis ();
    int nkeys = 0;
    if (timeout > 0) nkeys = key.selector ().select (timeout);
    else if (timeout == 0) nkeys = key.selector ().selectNow ();

    if (nkeys == 0) throw new SocketTimeoutException ();

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Client.java" startline="51" endline="59">
static protected void verboseLog (String prefix, SocketAddress local, SocketAddress remote, byte [] data) {
    if (Options.check ("verbosemsg")) System.err.println (hexdump.dump (prefix, data));

    if (packetLogger != null) packetLogger.log (prefix, local, remote, data);

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Client.java" startline="61" endline="65">
void cleanup () throws IOException {
    key.selector ().close ();
    key.channel ().close ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Client.java" startline="67" endline="70">
static void setPacketLogger (PacketLogger logger) {
    packetLogger = logger;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/GPOSRecord.java" startline="19" endline="19">
GPOSRecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/GPOSRecord.java" startline="21" endline="24">
Record getObject () {
    return new GPOSRecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/GPOSRecord.java" startline="26" endline="37">
private void validate (double longitude, double latitude) throws IllegalArgumentException {
    if (longitude < - 90.0 || longitude > 90.0) {
        throw new IllegalArgumentException ("illegal longitude " + longitude);
    }
    if (latitude < - 180.0 || latitude > 180.0) {
        throw new IllegalArgumentException ("illegal latitude " + latitude);
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/GPOSRecord.java" startline="46" endline="55">
public GPOSRecord (Name name, int dclass, long ttl, double longitude, double latitude, double altitude) {
    super (name, Type.GPOS, dclass, ttl);
    validate (longitude, latitude);
    this.longitude = Double.toString (longitude).getBytes ();
    this.latitude = Double.toString (latitude).getBytes ();
    this.altitude = Double.toString (altitude).getBytes ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/GPOSRecord.java" startline="64" endline="78">
public GPOSRecord (Name name, int dclass, long ttl, String longitude, String latitude, String altitude) {
    super (name, Type.GPOS, dclass, ttl);
    try {
        this.longitude = byteArrayFromString (longitude);
        this.latitude = byteArrayFromString (latitude);
        validate (getLongitude (), getLatitude ());
        this.altitude = byteArrayFromString (altitude);
    } catch (TextParseException e) {
        throw new IllegalArgumentException (e.getMessage ());
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/GPOSRecord.java" startline="80" endline="91">
void rrFromWire (DNSInput in) throws IOException {
    longitude = in.readCountedString ();
    latitude = in.readCountedString ();
    altitude = in.readCountedString ();
    try {
        validate (getLongitude (), getLatitude ());
    } catch (IllegalArgumentException e) {
        throw new WireParseException (e.getMessage ());
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/GPOSRecord.java" startline="93" endline="109">
void rdataFromString (Tokenizer st, Name origin) throws IOException {
    try {
        longitude = byteArrayFromString (st.getString ());
        latitude = byteArrayFromString (st.getString ());
        altitude = byteArrayFromString (st.getString ());
    } catch (TextParseException e) {
        throw st.exception (e.getMessage ());
    }
    try {
        validate (getLongitude (), getLatitude ());
    } catch (IllegalArgumentException e) {
        throw new WireParseException (e.getMessage ());
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/GPOSRecord.java" startline="112" endline="121">
String rrToString () {
    StringBuffer sb = new StringBuffer ();
    sb.append (byteArrayToString (longitude, true));
    sb.append (" ");
    sb.append (byteArrayToString (latitude, true));
    sb.append (" ");
    sb.append (byteArrayToString (altitude, true));
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/GPOSRecord.java" startline="124" endline="127">
public String getLongitudeString () {
    return byteArrayToString (longitude, false);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/GPOSRecord.java" startline="134" endline="137">
public double getLongitude () {
    return Double.parseDouble (getLongitudeString ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/GPOSRecord.java" startline="140" endline="143">
public String getLatitudeString () {
    return byteArrayToString (latitude, false);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/GPOSRecord.java" startline="150" endline="153">
public double getLatitude () {
    return Double.parseDouble (getLatitudeString ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/GPOSRecord.java" startline="156" endline="159">
public String getAltitudeString () {
    return byteArrayToString (altitude, false);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/GPOSRecord.java" startline="166" endline="169">
public double getAltitude () {
    return Double.parseDouble (getAltitudeString ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/GPOSRecord.java" startline="171" endline="176">
void rrToWire (DNSOutput out, Compression c, boolean canonical) {
    out.writeCountedString (longitude);
    out.writeCountedString (latitude);
    out.writeCountedString (altitude);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSECRecord.java" startline="26" endline="26">
NSECRecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSECRecord.java" startline="28" endline="31">
Record getObject () {
    return new NSECRecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSECRecord.java" startline="38" endline="46">
public NSECRecord (Name name, int dclass, long ttl, Name next, int [] types) {
    super (name, Type.NSEC, dclass, ttl);
    this.next = checkName ("next", next);
    for (int i = 0;
    i < types.length; i ++) {
        Type.check (types [i]);
    }
    this.types = new TypeBitmap (types);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSECRecord.java" startline="48" endline="52">
void rrFromWire (DNSInput in) throws IOException {
    next = new Name (in);
    types = new TypeBitmap (in);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSECRecord.java" startline="54" endline="59">
void rrToWire (DNSOutput out, Compression c, boolean canonical) {
    next.toWire (out, null, false);
    types.toWire (out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSECRecord.java" startline="61" endline="65">
void rdataFromString (Tokenizer st, Name origin) throws IOException {
    next = st.getName (origin);
    types = new TypeBitmap (st);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSECRecord.java" startline="68" endline="78">
String rrToString () {
    StringBuffer sb = new StringBuffer ();
    sb.append (next);
    if (! types.empty ()) {
        sb.append (' ');
        sb.append (types.toString ());
    }
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSECRecord.java" startline="81" endline="84">
public Name getNext () {
    return next;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSECRecord.java" startline="87" endline="90">
public int [] getTypes () {
    return types.toArray ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSECRecord.java" startline="93" endline="96">
public boolean hasType (int type) {
    return types.contains (type);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SimpleResolver.java" startline="45" endline="58">
public SimpleResolver (String hostname) throws UnknownHostException {
    if (hostname == null) {
        hostname = ResolverConfig.getCurrentConfig ().server ();
        if (hostname == null) hostname = defaultResolver;

    }
    InetAddress addr;
    if (hostname.equals ("0")) addr = InetAddress.getLocalHost ();
    else addr = InetAddress.getByName (hostname);

    address = new InetSocketAddress (addr, DEFAULT_PORT);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SimpleResolver.java" startline="66" endline="69">
public SimpleResolver () throws UnknownHostException {
    this (null);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SimpleResolver.java" startline="76" endline="79">
public InetSocketAddress getAddress () {
    return address;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SimpleResolver.java" startline="82" endline="85">
public static void setDefaultResolver (String hostname) {
    defaultResolver = hostname;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SimpleResolver.java" startline="87" endline="90">
public void setPort (int port) {
    address = new InetSocketAddress (address.getAddress (), port);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SimpleResolver.java" startline="96" endline="99">
public void setAddress (InetSocketAddress addr) {
    address = addr;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SimpleResolver.java" startline="106" endline="109">
public void setAddress (InetAddress addr) {
    address = new InetSocketAddress (addr, address.getPort ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SimpleResolver.java" startline="115" endline="118">
public void setLocalAddress (InetSocketAddress addr) {
    localAddress = addr;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SimpleResolver.java" startline="125" endline="128">
public void setLocalAddress (InetAddress addr) {
    localAddress = new InetSocketAddress (addr, 0);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SimpleResolver.java" startline="130" endline="133">
public void setTCP (boolean flag) {
    this.useTCP = flag;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SimpleResolver.java" startline="135" endline="138">
public void setIgnoreTruncation (boolean flag) {
    this.ignoreTruncation = flag;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SimpleResolver.java" startline="140" endline="148">
public void setEDNS (int level, int payloadSize, int flags, List options) {
    if (level != 0 && level != - 1) throw new IllegalArgumentException ("invalid EDNS level - " + "must be 0 or -1");

    if (payloadSize == 0) payloadSize = DEFAULT_EDNS_PAYLOADSIZE;

    queryOPT = new OPTRecord (payloadSize, 0, level, flags, options);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SimpleResolver.java" startline="150" endline="153">
public void setEDNS (int level) {
    setEDNS (level, 0, 0, null);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SimpleResolver.java" startline="155" endline="158">
public void setTSIGKey (TSIG key) {
    tsig = key;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SimpleResolver.java" startline="160" endline="163">
TSIG getTSIGKey () {
    return tsig;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SimpleResolver.java" startline="165" endline="168">
public void setTimeout (int secs, int msecs) {
    timeoutValue = (long) secs * 1000 + msecs;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SimpleResolver.java" startline="170" endline="173">
public void setTimeout (int secs) {
    setTimeout (secs, 0);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SimpleResolver.java" startline="175" endline="178">
long getTimeout () {
    return timeoutValue;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SimpleResolver.java" startline="180" endline="192">
private Message parseMessage (byte [] b) throws WireParseException {
    try {
        return (new Message (b));
    } catch (IOException e) {
        if (Options.check ("verbose")) e.printStackTrace ();

        if (! (e instanceof WireParseException)) e = new WireParseException ("Error parsing message");

        throw (WireParseException) e;
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SimpleResolver.java" startline="194" endline="201">
private void verifyTSIG (Message query, Message response, byte [] b, TSIG tsig) {
    if (tsig == null) return;

    int error = tsig.verify (response, b, query.getTSIG ());
    if (Options.check ("verbose")) System.err.println ("TSIG verify: " + Rcode.TSIGstring (error));

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SimpleResolver.java" startline="203" endline="208">
private void applyEDNS (Message query) {
    if (queryOPT == null || query.getOPT () != null) return;

    query.addRecord (queryOPT, Section.ADDITIONAL);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SimpleResolver.java" startline="210" endline="217">
private int maxUDPSize (Message query) {
    OPTRecord opt = query.getOPT ();
    if (opt == null) return DEFAULT_UDPSIZE;
    else return opt.getPayloadSize ();

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SimpleResolver.java" startline="226" endline="297">
public Message send (Message query) throws IOException {
    if (Options.check ("verbose")) System.err.println ("Sending to " + address.getAddress ().getHostAddress () + ":" + address.getPort ());

    if (query.getHeader ().getOpcode () == Opcode.QUERY) {
        Record question = query.getQuestion ();
        if (question != null && question.getType () == Type.AXFR) return sendAXFR (query);

    }
    query = (Message) query.clone ();
    applyEDNS (query);
    if (tsig != null) tsig.apply (query, null);

    byte [] out = query.toWire (Message.MAXLENGTH);
    int udpSize = maxUDPSize (query);
    boolean tcp = false;
    long endTime = System.currentTimeMillis () + timeoutValue;
    do {
        byte [] in;
        if (useTCP || out.length > udpSize) tcp = true;

        if (tcp) in = TCPClient.sendrecv (localAddress, address, out, endTime);
        else in = UDPClient.sendrecv (localAddress, address, out, udpSize, endTime);

        if (in.length < Header.LENGTH) {
            throw new WireParseException ("invalid DNS header - " + "too short");
        }
        int id = ((in [0] & 0xFF) << 8) + (in [1] & 0xFF);
        int qid = query.getHeader ().getID ();
        if (id != qid) {
            String error = "invalid message id: expected " + qid + "; got id " + id;
            if (tcp) {
                throw new WireParseException (error);
            } else {
                if (Options.check ("verbose")) {
                    System.err.println (error);
                }
                continue;
            }
        }
        Message response = parseMessage (in);
        verifyTSIG (query, response, in, tsig);
        if (! tcp && ! ignoreTruncation && response.getHeader ().getFlag (Flags.TC)) {
            tcp = true;
            continue;
        }
        return response;
    } while (true);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SimpleResolver.java" startline="308" endline="326">
public Object sendAsync (final Message query, final ResolverListener listener) {
    final Object id;
    synchronized (this) {
        id = new Integer (uniqueID ++);
    }
    Record question = query.getQuestion ();
    String qname;
    if (question != null) qname = question.getName ().toString ();
    else qname = "(none)";

    String name = this.getClass () + ": " + qname;
    Thread thread = new ResolveThread (this, query, id, listener);
    thread.setName (name);
    thread.setDaemon (true);
    thread.start ();
    return id;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SimpleResolver.java" startline="328" endline="349">
private Message sendAXFR (Message query) throws IOException {
    Name qname = query.getQuestion ().getName ();
    ZoneTransferIn xfrin = ZoneTransferIn.newAXFR (qname, address, tsig);
    xfrin.setTimeout ((int) (getTimeout () / 1000));
    xfrin.setLocalAddress (localAddress);
    try {
        xfrin.run ();
    } catch (ZoneTransferException e) {
        throw new WireParseException (e.getMessage ());
    }
    List records = xfrin.getAXFR ();
    Message response = new Message (query.getHeader ().getID ());
    response.getHeader ().setFlag (Flags.AA);
    response.getHeader ().setFlag (Flags.QR);
    response.addRecord (query.getQuestion (), Section.QUESTION);
    Iterator it = records.iterator ();
    while (it.hasNext ()) response.addRecord ((Record) it.next (), Section.ANSWER);

    return response;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NAPTRRecord.java" startline="22" endline="22">
NAPTRRecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NAPTRRecord.java" startline="24" endline="27">
Record getObject () {
    return new NAPTRRecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NAPTRRecord.java" startline="42" endline="58">
public NAPTRRecord (Name name, int dclass, long ttl, int order, int preference, String flags, String service, String regexp, Name replacement) {
    super (name, Type.NAPTR, dclass, ttl);
    this.order = checkU16 ("order", order);
    this.preference = checkU16 ("preference", preference);
    try {
        this.flags = byteArrayFromString (flags);
        this.service = byteArrayFromString (service);
        this.regexp = byteArrayFromString (regexp);
    } catch (TextParseException e) {
        throw new IllegalArgumentException (e.getMessage ());
    }
    this.replacement = checkName ("replacement", replacement);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NAPTRRecord.java" startline="60" endline="68">
void rrFromWire (DNSInput in) throws IOException {
    order = in.readU16 ();
    preference = in.readU16 ();
    flags = in.readCountedString ();
    service = in.readCountedString ();
    regexp = in.readCountedString ();
    replacement = new Name (in);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NAPTRRecord.java" startline="70" endline="83">
void rdataFromString (Tokenizer st, Name origin) throws IOException {
    order = st.getUInt16 ();
    preference = st.getUInt16 ();
    try {
        flags = byteArrayFromString (st.getString ());
        service = byteArrayFromString (st.getString ());
        regexp = byteArrayFromString (st.getString ());
    } catch (TextParseException e) {
        throw st.exception (e.getMessage ());
    }
    replacement = st.getName (origin);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NAPTRRecord.java" startline="86" endline="101">
String rrToString () {
    StringBuffer sb = new StringBuffer ();
    sb.append (order);
    sb.append (" ");
    sb.append (preference);
    sb.append (" ");
    sb.append (byteArrayToString (flags, true));
    sb.append (" ");
    sb.append (byteArrayToString (service, true));
    sb.append (" ");
    sb.append (byteArrayToString (regexp, true));
    sb.append (" ");
    sb.append (replacement);
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NAPTRRecord.java" startline="104" endline="107">
public int getOrder () {
    return order;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NAPTRRecord.java" startline="110" endline="113">
public int getPreference () {
    return preference;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NAPTRRecord.java" startline="116" endline="119">
public String getFlags () {
    return byteArrayToString (flags, false);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NAPTRRecord.java" startline="122" endline="125">
public String getService () {
    return byteArrayToString (service, false);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NAPTRRecord.java" startline="128" endline="131">
public String getRegexp () {
    return byteArrayToString (regexp, false);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NAPTRRecord.java" startline="134" endline="137">
public Name getReplacement () {
    return replacement;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NAPTRRecord.java" startline="139" endline="147">
void rrToWire (DNSOutput out, Compression c, boolean canonical) {
    out.writeU16 (order);
    out.writeU16 (preference);
    out.writeCountedString (flags);
    out.writeCountedString (service);
    out.writeCountedString (regexp);
    replacement.toWire (out, null, canonical);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NAPTRRecord.java" startline="149" endline="152">
public Name getAdditionalName () {
    return replacement;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/RPRecord.java" startline="22" endline="22">
RPRecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/RPRecord.java" startline="24" endline="27">
Record getObject () {
    return new RPRecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/RPRecord.java" startline="34" endline="40">
public RPRecord (Name name, int dclass, long ttl, Name mailbox, Name textDomain) {
    super (name, Type.RP, dclass, ttl);
    this.mailbox = checkName ("mailbox", mailbox);
    this.textDomain = checkName ("textDomain", textDomain);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/RPRecord.java" startline="42" endline="46">
void rrFromWire (DNSInput in) throws IOException {
    mailbox = new Name (in);
    textDomain = new Name (in);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/RPRecord.java" startline="48" endline="52">
void rdataFromString (Tokenizer st, Name origin) throws IOException {
    mailbox = st.getName (origin);
    textDomain = st.getName (origin);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/RPRecord.java" startline="55" endline="62">
String rrToString () {
    StringBuffer sb = new StringBuffer ();
    sb.append (mailbox);
    sb.append (" ");
    sb.append (textDomain);
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/RPRecord.java" startline="65" endline="68">
public Name getMailbox () {
    return mailbox;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/RPRecord.java" startline="71" endline="74">
public Name getTextDomain () {
    return textDomain;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/RPRecord.java" startline="76" endline="80">
void rrToWire (DNSOutput out, Compression c, boolean canonical) {
    mailbox.toWire (out, null, canonical);
    textDomain.toWire (out, null, canonical);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ExtendedFlags.java" startline="27" endline="28">
private ExtendedFlags () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ExtendedFlags.java" startline="31" endline="34">
public static String string (int i) {
    return extflags.getText (i);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ExtendedFlags.java" startline="40" endline="43">
public static int value (String s) {
    return extflags.getValue (s);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TypeBitmap.java" startline="20" endline="23">
private TypeBitmap () {
    types = new TreeSet ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TypeBitmap.java" startline="25" endline="32">
public TypeBitmap (int [] array) {
    this ();
    for (int i = 0;
    i < array.length; i ++) {
        Type.check (array [i]);
        types.add (new Integer (array [i]));
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TypeBitmap.java" startline="34" endline="60">
public TypeBitmap (DNSInput in) throws WireParseException {
    this ();
    int lastbase = - 1;
    while (in.remaining () > 0) {
        if (in.remaining () < 2) throw new WireParseException ("invalid bitmap descriptor");

        int mapbase = in.readU8 ();
        if (mapbase < lastbase) throw new WireParseException ("invalid ordering");

        int maplength = in.readU8 ();
        if (maplength > in.remaining ()) throw new WireParseException ("invalid bitmap");

        for (int i = 0;
        i < maplength; i ++) {
            int current = in.readU8 ();
            if (current == 0) continue;

            for (int j = 0;
            j < 8; j ++) {
                if ((current & (1 << (7 - j))) == 0) continue;

                int typecode = mapbase * 256 + + i * 8 + j;
                types.add (Mnemonic.toInteger (typecode));
            }
        }
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TypeBitmap.java" startline="62" endline="76">
public TypeBitmap (Tokenizer st) throws IOException {
    this ();
    while (true) {
        Tokenizer.Token t = st.get ();
        if (! t.isString ()) break;

        int typecode = Type.value (t.value);
        if (typecode < 0) {
            throw st.exception ("Invalid type: " + t.value);
        }
        types.add (Mnemonic.toInteger (typecode));
    }
    st.unget ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TypeBitmap.java" startline="78" endline="85">
public int [] toArray () {
    int [] array = new int [types.size ()];
    int n = 0;
    for (Iterator it = types.iterator ();
    it.hasNext ();) array [n ++] = ((Integer) it.next ()).intValue ();

    return array;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TypeBitmap.java" startline="87" endline="97">
public String toString () {
    StringBuffer sb = new StringBuffer ();
    for (Iterator it = types.iterator ();
    it.hasNext ();) {
        int t = ((Integer) it.next ()).intValue ();
        sb.append (Type.string (t));
        if (it.hasNext ()) sb.append (' ');

    }
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TypeBitmap.java" startline="99" endline="112">
private static void mapToWire (DNSOutput out, TreeSet map, int mapbase) {
    int arraymax = (((Integer) map.last ()).intValue ()) & 0xFF;
    int arraylength = (arraymax / 8) + 1;
    int [] array = new int [arraylength];
    out.writeU8 (mapbase);
    out.writeU8 (arraylength);
    for (Iterator it = map.iterator ();
    it.hasNext ();) {
        int typecode = ((Integer) it.next ()).intValue ();
        array [(typecode & 0xFF) / 8] |= (1 << (7 - typecode % 8));
    }
    for (int j = 0;
    j < arraylength; j ++) out.writeU8 (array [j]);

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TypeBitmap.java" startline="114" endline="135">
public void toWire (DNSOutput out) {
    if (types.size () == 0) return;

    int mapbase = - 1;
    TreeSet map = new TreeSet ();
    for (Iterator it = types.iterator ();
    it.hasNext ();) {
        int t = ((Integer) it.next ()).intValue ();
        int base = t>> 8;
        if (base != mapbase) {
            if (map.size () > 0) {
                mapToWire (out, map, mapbase);
                map.clear ();
            }
            mapbase = base;
        }
        map.add (new Integer (t));
    }
    mapToWire (out, map, mapbase);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TypeBitmap.java" startline="137" endline="140">
public boolean empty () {
    return types.isEmpty ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TypeBitmap.java" startline="142" endline="145">
public boolean contains (int typecode) {
    return types.contains (Mnemonic.toInteger (typecode));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/WireParseException.java" startline="15" endline="18">
public WireParseException () {
    super ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/WireParseException.java" startline="20" endline="23">
public WireParseException (String s) {
    super (s);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/WireParseException.java" startline="25" endline="29">
public WireParseException (String s, Throwable cause) {
    super (s);
    initCause (cause);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/X25Record.java" startline="20" endline="20">
X25Record () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/X25Record.java" startline="22" endline="25">
Record getObject () {
    return new X25Record ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/X25Record.java" startline="27" endline="38">
private static final byte [] checkAndConvertAddress (String address) {
    int length = address.length ();
    byte [] out = new byte [length];
    for (int i = 0;
    i < length; i ++) {
        char c = address.charAt (i);
        if (! Character.isDigit (c)) return null;

        out [i] = (byte) c;
    }
    return out;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/X25Record.java" startline="45" endline="53">
public X25Record (Name name, int dclass, long ttl, String address) {
    super (name, Type.X25, dclass, ttl);
    this.address = checkAndConvertAddress (address);
    if (this.address == null) {
        throw new IllegalArgumentException ("invalid PSDN address " + address);
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/X25Record.java" startline="55" endline="58">
void rrFromWire (DNSInput in) throws IOException {
    address = in.readCountedString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/X25Record.java" startline="60" endline="66">
void rdataFromString (Tokenizer st, Name origin) throws IOException {
    String addr = st.getString ();
    this.address = checkAndConvertAddress (addr);
    if (this.address == null) throw st.exception ("invalid PSDN address " + addr);

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/X25Record.java" startline="71" endline="74">
public String getAddress () {
    return byteArrayToString (address, false);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/X25Record.java" startline="76" endline="79">
void rrToWire (DNSOutput out, Compression c, boolean canonical) {
    out.writeCountedString (address);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/X25Record.java" startline="81" endline="84">
String rrToString () {
    return byteArrayToString (address, true);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Zone.java" startline="39" endline="55">
ZoneIterator (boolean axfr) {
    synchronized (Zone.this) {
        zentries = data.entrySet ().iterator ();
    }
    wantLastSOA = axfr;
    RRset [] sets = allRRsets (originNode);
    current = new RRset [sets.length];
    for (int i = 0, j = 2;
    i < sets.length; i ++) {
        int type = sets [i].getType ();
        if (type == Type.SOA) current [0] = sets [i];
        else if (type == Type.NS) current [1] = sets [i];
        else current [j ++] = sets [i];

    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Zone.java" startline="57" endline="60">
public boolean hasNext () {
    return (current != null || wantLastSOA);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Zone.java" startline="62" endline="87">
public Object next () {
    if (! hasNext ()) {
        throw new NoSuchElementException ();
    }
    if (current == null) {
        wantLastSOA = false;
        return oneRRset (originNode, Type.SOA);
    }
    Object set = current [count ++];
    if (count == current.length) {
        current = null;
        while (zentries.hasNext ()) {
            Map.Entry entry = (Map.Entry) zentries.next ();
            if (entry.getKey ().equals (origin)) continue;

            RRset [] sets = allRRsets (entry.getValue ());
            if (sets.length == 0) continue;

            current = sets;
            count = 0;
            break;
        }
    }
    return set;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Zone.java" startline="89" endline="92">
public void remove () {
    throw new UnsupportedOperationException ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Zone.java" startline="95" endline="111">
private void validate () throws IOException {
    originNode = exactName (origin);
    if (originNode == null) throw new IOException (origin + ": no data specified");

    RRset rrset = oneRRset (originNode, Type.SOA);
    if (rrset == null || rrset.size () != 1) throw new IOException (origin + ": exactly 1 SOA must be specified");

    Iterator it = rrset.rrs ();
    SOA = (SOARecord) it.next ();
    NS = oneRRset (originNode, Type.NS);
    if (NS == null) throw new IOException (origin + ": no NS set specified");

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Zone.java" startline="113" endline="125">
private final void maybeAddRecord (Record record) throws IOException {
    int rtype = record.getType ();
    Name name = record.getName ();
    if (rtype == Type.SOA && ! name.equals (origin)) {
        throw new IOException ("SOA owner " + name + " does not match zone origin " + origin);
    }
    if (name.subdomain (origin)) addRecord (record);

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Zone.java" startline="133" endline="146">
public Zone (Name zone, String file) throws IOException {
    data = new TreeMap ();
    if (zone == null) throw new IllegalArgumentException ("no zone name specified");

    Master m = new Master (file, zone);
    Record record;
    origin = zone;
    while ((record = m.nextRecord ()) != null) maybeAddRecord (record);

    validate ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Zone.java" startline="154" endline="164">
public Zone (Name zone, Record [] records) throws IOException {
    data = new TreeMap ();
    if (zone == null) throw new IllegalArgumentException ("no zone name specified");

    origin = zone;
    for (int i = 0;
    i < records.length; i ++) maybeAddRecord (records [i]);

    validate ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Zone.java" startline="166" endline="180">
private void fromXFR (ZoneTransferIn xfrin) throws IOException, ZoneTransferException {
    data = new TreeMap ();
    origin = xfrin.getName ();
    List records = xfrin.run ();
    for (Iterator it = records.iterator ();
    it.hasNext ();) {
        Record record = (Record) it.next ();
        maybeAddRecord (record);
    }
    if (! xfrin.isAXFR ()) throw new IllegalArgumentException ("zones can only be " + "created from AXFRs");

    validate ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Zone.java" startline="187" endline="190">
public Zone (ZoneTransferIn xfrin) throws IOException, ZoneTransferException {
    fromXFR (xfrin);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Zone.java" startline="196" endline="203">
public Zone (Name zone, int dclass, String remote) throws IOException, ZoneTransferException {
    ZoneTransferIn xfrin = ZoneTransferIn.newAXFR (zone, remote, null);
    xfrin.setDClass (dclass);
    fromXFR (xfrin);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Zone.java" startline="206" endline="209">
public Name getOrigin () {
    return origin;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Zone.java" startline="212" endline="215">
public RRset getNS () {
    return NS;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Zone.java" startline="218" endline="221">
public SOARecord getSOA () {
    return SOA;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Zone.java" startline="224" endline="227">
public int getDClass () {
    return dclass;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Zone.java" startline="229" endline="232">
private synchronized Object exactName (Name name) {
    return data.get (name);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Zone.java" startline="234" endline="243">
private synchronized RRset [] allRRsets (Object types) {
    if (types instanceof List) {
        List typelist = (List) types;
        return (RRset []) typelist.toArray (new RRset [typelist.size ()]);
    } else {
        RRset set = (RRset) types;
        return new RRset [] {set};
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Zone.java" startline="245" endline="262">
private synchronized RRset oneRRset (Object types, int type) {
    if (type == Type.ANY) throw new IllegalArgumentException ("oneRRset(ANY)");

    if (types instanceof List) {
        List list = (List) types;
        for (int i = 0;
        i < list.size (); i ++) {
            RRset set = (RRset) list.get (i);
            if (set.getType () == type) return set;

        }
    } else {
        RRset set = (RRset) types;
        if (set.getType () == type) return set;

    }
    return null;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Zone.java" startline="264" endline="270">
private synchronized RRset findRRset (Name name, int type) {
    Object types = exactName (name);
    if (types == null) return null;

    return oneRRset (types, type);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Zone.java" startline="272" endline="303">
private synchronized void addRRset (Name name, RRset rrset) {
    if (! hasWild && name.isWild ()) hasWild = true;

    Object types = data.get (name);
    if (types == null) {
        data.put (name, rrset);
        return;
    }
    int rtype = rrset.getType ();
    if (types instanceof List) {
        List list = (List) types;
        for (int i = 0;
        i < list.size (); i ++) {
            RRset set = (RRset) list.get (i);
            if (set.getType () == rtype) {
                list.set (i, rrset);
                return;
            }
        }
        list.add (rrset);
    } else {
        RRset set = (RRset) types;
        if (set.getType () == rtype) data.put (name, rrset);
        else {
            LinkedList list = new LinkedList ();
            list.add (set);
            list.add (rrset);
            data.put (name, list);
        }
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Zone.java" startline="305" endline="328">
private synchronized void removeRRset (Name name, int type) {
    Object types = data.get (name);
    if (types == null) {
        return;
    }
    if (types instanceof List) {
        List list = (List) types;
        for (int i = 0;
        i < list.size (); i ++) {
            RRset set = (RRset) list.get (i);
            if (set.getType () == type) {
                list.remove (i);
                if (list.size () == 0) data.remove (name);

                return;
            }
        }
    } else {
        RRset set = (RRset) types;
        if (set.getType () != type) return;

        data.remove (name);
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Zone.java" startline="330" endline="423">
private synchronized SetResponse lookup (Name name, int type) {
    int labels;
    int olabels;
    int tlabels;
    RRset rrset;
    Name tname;
    Object types;
    SetResponse sr;
    if (! name.subdomain (origin)) return SetResponse.ofType (SetResponse.NXDOMAIN);

    labels = name.labels ();
    olabels = origin.labels ();
    for (tlabels = olabels; tlabels <= labels; tlabels ++) {
        boolean isOrigin = (tlabels == olabels);
        boolean isExact = (tlabels == labels);
        if (isOrigin) tname = origin;
        else if (isExact) tname = name;
        else tname = new Name (name, labels - tlabels);

        types = exactName (tname);
        if (types == null) continue;

        if (! isOrigin) {
            RRset ns = oneRRset (types, Type.NS);
            if (ns != null) return new SetResponse (SetResponse.DELEGATION, ns);

        }
        if (isExact && type == Type.ANY) {
            sr = new SetResponse (SetResponse.SUCCESSFUL);
            RRset [] sets = allRRsets (types);
            for (int i = 0;
            i < sets.length; i ++) sr.addRRset (sets [i]);

            return sr;
        }
        if (isExact) {
            rrset = oneRRset (types, type);
            if (rrset != null) {
                sr = new SetResponse (SetResponse.SUCCESSFUL);
                sr.addRRset (rrset);
                return sr;
            }
            rrset = oneRRset (types, Type.CNAME);
            if (rrset != null) return new SetResponse (SetResponse.CNAME, rrset);

        } else {
            rrset = oneRRset (types, Type.DNAME);
            if (rrset != null) return new SetResponse (SetResponse.DNAME, rrset);

        }
        if (isExact) return SetResponse.ofType (SetResponse.NXRRSET);

    }
    if (hasWild) {
        for (int i = 0;
        i < labels - olabels; i ++) {
            tname = name.wild (i + 1);
            types = exactName (tname);
            if (types == null) continue;

            rrset = oneRRset (types, type);
            if (rrset != null) {
                sr = new SetResponse (SetResponse.SUCCESSFUL);
                sr.addRRset (rrset);
                return sr;
            }
        }
    }
    return SetResponse.ofType (SetResponse.NXDOMAIN);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Zone.java" startline="432" endline="435">
public SetResponse findRecords (Name name, int type) {
    return lookup (name, type);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Zone.java" startline="444" endline="450">
public RRset findExactMatch (Name name, int type) {
    Object types = exactName (name);
    if (types == null) return null;

    return oneRRset (types, type);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Zone.java" startline="457" endline="461">
public void addRRset (RRset rrset) {
    Name name = rrset.getName ();
    addRRset (name, rrset);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Zone.java" startline="468" endline="481">
public void addRecord (Record r) {
    Name name = r.getName ();
    int rtype = r.getRRsetType ();
    synchronized (this) {
        RRset rrset = findRRset (name, rtype);
        if (rrset == null) {
            rrset = new RRset (r);
            addRRset (name, rrset);
        } else {
            rrset.addRR (r);
        }
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Zone.java" startline="488" endline="501">
public void removeRecord (Record r) {
    Name name = r.getName ();
    int rtype = r.getRRsetType ();
    synchronized (this) {
        RRset rrset = findRRset (name, rtype);
        if (rrset == null) return;

        if (rrset.size () == 1 && rrset.first ().equals (r)) removeRRset (name, rtype);
        else rrset.deleteRR (r);

    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Zone.java" startline="506" endline="509">
public Iterator iterator () {
    return new ZoneIterator (false);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Zone.java" startline="516" endline="519">
public Iterator AXFR () {
    return new ZoneIterator (true);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Zone.java" startline="521" endline="533">
private void nodeToString (StringBuffer sb, Object node) {
    RRset [] sets = allRRsets (node);
    for (int i = 0;
    i < sets.length; i ++) {
        RRset rrset = sets [i];
        Iterator it = rrset.rrs ();
        while (it.hasNext ()) sb.append (it.next () + "\n");

        it = rrset.sigs ();
        while (it.hasNext ()) sb.append (it.next () + "\n");

    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Zone.java" startline="538" endline="549">
public synchronized String toMasterFile () {
    Iterator zentries = data.entrySet ().iterator ();
    StringBuffer sb = new StringBuffer ();
    nodeToString (sb, originNode);
    while (zentries.hasNext ()) {
        Map.Entry entry = (Map.Entry) zentries.next ();
        if (! origin.equals (entry.getKey ())) nodeToString (sb, entry.getValue ());

    }
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Zone.java" startline="554" endline="557">
public String toString () {
    return toMasterFile ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/MFRecord.java" startline="16" endline="16">
MFRecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/MFRecord.java" startline="18" endline="21">
Record getObject () {
    return new MFRecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/MFRecord.java" startline="27" endline="30">
public MFRecord (Name name, int dclass, long ttl, Name mailAgent) {
    super (name, Type.MF, dclass, ttl, mailAgent, "mail agent");
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/MFRecord.java" startline="33" endline="36">
public Name getMailAgent () {
    return getSingleName ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/MFRecord.java" startline="38" endline="41">
public Name getAdditionalName () {
    return getSingleName ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSInput.java" startline="23" endline="28">
public DNSInput (byte [] input) {
    byteBuffer = ByteBuffer.wrap (input);
    saved_pos = - 1;
    saved_end = - 1;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSInput.java" startline="34" endline="39">
public DNSInput (ByteBuffer byteBuffer) {
    this.byteBuffer = byteBuffer;
    saved_pos = - 1;
    saved_end = - 1;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSInput.java" startline="44" endline="47">
public int current () {
    return byteBuffer.position ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSInput.java" startline="53" endline="56">
public int remaining () {
    return byteBuffer.remaining ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSInput.java" startline="58" endline="63">
private void require (int n) throws WireParseException {
    if (n > remaining ()) {
        throw new WireParseException ("end of input");
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSInput.java" startline="71" endline="78">
public void setActive (int len) {
    if (len > byteBuffer.capacity () - byteBuffer.position ()) {
        throw new IllegalArgumentException ("cannot set active " + "region past end of input");
    }
    byteBuffer.limit (byteBuffer.position () + len);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSInput.java" startline="84" endline="87">
public void clearActive () {
    byteBuffer.limit (byteBuffer.capacity ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSInput.java" startline="92" endline="95">
public int saveActive () {
    return byteBuffer.limit ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSInput.java" startline="103" endline="110">
public void restoreActive (int pos) {
    if (pos > byteBuffer.capacity ()) {
        throw new IllegalArgumentException ("cannot set active " + "region past end of input");
    }
    byteBuffer.limit (byteBuffer.position ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSInput.java" startline="118" endline="126">
public void jump (int index) {
    if (index >= byteBuffer.capacity ()) {
        throw new IllegalArgumentException ("cannot jump past " + "end of input");
    }
    byteBuffer.position (index);
    byteBuffer.limit (byteBuffer.capacity ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSInput.java" startline="133" endline="137">
public void save () {
    saved_pos = byteBuffer.position ();
    saved_end = byteBuffer.limit ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSInput.java" startline="142" endline="151">
public void restore () {
    if (saved_pos < 0) {
        throw new IllegalStateException ("no previous state");
    }
    byteBuffer.position (saved_pos);
    byteBuffer.limit (saved_end);
    saved_pos = - 1;
    saved_end = - 1;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSInput.java" startline="158" endline="162">
public int readU8 () throws WireParseException {
    require (1);
    return (byteBuffer.get () & 0xFF);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSInput.java" startline="169" endline="173">
public int readU16 () throws WireParseException {
    require (2);
    return (byteBuffer.getShort () & 0xFFFF);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSInput.java" startline="180" endline="184">
public long readU32 () throws WireParseException {
    require (4);
    return (byteBuffer.getInt () & 0xFFFFFFFFL);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSInput.java" startline="194" endline="198">
public void readByteArray (byte [] b, int off, int len) throws WireParseException {
    require (len);
    byteBuffer.get (b, off, len);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSInput.java" startline="205" endline="211">
public byte [] readByteArray (int len) throws WireParseException {
    require (len);
    byte [] out = new byte [len];
    byteBuffer.get (out, 0, len);
    return out;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSInput.java" startline="218" endline="224">
public byte [] readByteArray () {
    int len = remaining ();
    byte [] out = new byte [len];
    byteBuffer.get (out, 0, len);
    return out;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSInput.java" startline="232" endline="236">
public byte [] readCountedString () throws WireParseException {
    int len = readU8 ();
    return readByteArray (len);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DHCIDRecord.java" startline="20" endline="20">
DHCIDRecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DHCIDRecord.java" startline="22" endline="25">
Record getObject () {
    return new DHCIDRecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DHCIDRecord.java" startline="31" endline="35">
public DHCIDRecord (Name name, int dclass, long ttl, byte [] data) {
    super (name, Type.DHCID, dclass, ttl);
    this.data = data;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DHCIDRecord.java" startline="37" endline="40">
void rrFromWire (DNSInput in) throws IOException {
    data = in.readByteArray ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DHCIDRecord.java" startline="42" endline="45">
void rdataFromString (Tokenizer st, Name origin) throws IOException {
    data = st.getBase64 ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DHCIDRecord.java" startline="47" endline="50">
void rrToWire (DNSOutput out, Compression c, boolean canonical) {
    out.writeByteArray (data);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DHCIDRecord.java" startline="52" endline="55">
String rrToString () {
    return base64.toString (data);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DHCIDRecord.java" startline="60" endline="63">
public byte [] getData () {
    return data;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TXTBase.java" startline="21" endline="22">
protected TXTBase () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TXTBase.java" startline="24" endline="27">
protected TXTBase (Name name, int type, int dclass, long ttl) {
    super (name, type, dclass, ttl);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TXTBase.java" startline="29" endline="45">
protected TXTBase (Name name, int type, int dclass, long ttl, List strings) {
    super (name, type, dclass, ttl);
    if (strings == null) throw new IllegalArgumentException ("strings must not be null");

    this.strings = new ArrayList (strings.size ());
    Iterator it = strings.iterator ();
    try {
        while (it.hasNext ()) {
            String s = (String) it.next ();
            this.strings.add (byteArrayFromString (s));
        }
    } catch (TextParseException e) {
        throw new IllegalArgumentException (e.getMessage ());
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TXTBase.java" startline="47" endline="50">
protected TXTBase (Name name, int type, int dclass, long ttl, String string) {
    this (name, type, dclass, ttl, Collections.singletonList (string));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TXTBase.java" startline="52" endline="59">
void rrFromWire (DNSInput in) throws IOException {
    strings = new ArrayList (2);
    while (in.remaining () > 0) {
        byte [] b = in.readCountedString ();
        strings.add (b);
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TXTBase.java" startline="61" endline="77">
void rdataFromString (Tokenizer st, Name origin) throws IOException {
    strings = new ArrayList (2);
    while (true) {
        Tokenizer.Token t = st.get ();
        if (! t.isString ()) break;

        try {
            strings.add (byteArrayFromString (t.value));
        } catch (TextParseException e) {
            throw st.exception (e.getMessage ());
        }
    }
    st.unget ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TXTBase.java" startline="80" endline="91">
String rrToString () {
    StringBuffer sb = new StringBuffer ();
    Iterator it = strings.iterator ();
    while (it.hasNext ()) {
        byte [] array = (byte []) it.next ();
        sb.append (byteArrayToString (array, true));
        if (it.hasNext ()) sb.append (" ");

    }
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TXTBase.java" startline="97" endline="103">
public List getStrings () {
    List list = new ArrayList (strings.size ());
    for (int i = 0;
    i < strings.size (); i ++) list.add (byteArrayToString ((byte []) strings.get (i), false));

    return list;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TXTBase.java" startline="109" endline="112">
public List getStringsAsByteArrays () {
    return strings;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TXTBase.java" startline="114" endline="121">
void rrToWire (DNSOutput out, Compression c, boolean canonical) {
    Iterator it = strings.iterator ();
    while (it.hasNext ()) {
        byte [] b = (byte []) it.next ();
        out.writeCountedString (b);
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ZoneTransferException.java" startline="13" endline="16">
public ZoneTransferException () {
    super ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ZoneTransferException.java" startline="18" endline="21">
public ZoneTransferException (String s) {
    super (s);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Name.java" startline="81" endline="83">
private Name () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Name.java" startline="85" endline="92">
private final void setoffset (int n, int offset) {
    if (n >= MAXOFFSETS) return;

    int shift = 8 * (7 - n);
    offsets &= (~ (0xFFL << shift));
    offsets |= ((long) offset << shift);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Name.java" startline="94" endline="109">
private final int offset (int n) {
    if (n == 0 && getlabels () == 0) return 0;

    if (n < 0 || n >= getlabels ()) throw new IllegalArgumentException ("label out of range");

    if (n < MAXOFFSETS) {
        int shift = 8 * (7 - n);
        return ((int) (offsets>>> shift) & 0xFF);
    } else {
        int pos = offset (MAXOFFSETS - 1);
        for (int i = MAXOFFSETS - 1;
        i < n; i ++) pos += (name [pos] + 1);

        return (pos);
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Name.java" startline="111" endline="115">
private final void setlabels (int labels) {
    offsets &= ~ (0xFF);
    offsets |= labels;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Name.java" startline="117" endline="120">
private final int getlabels () {
    return (int) (offsets & 0xFF);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Name.java" startline="122" endline="137">
private static final void copy (Name src, Name dst) {
    if (src.offset (0) == 0) {
        dst.name = src.name;
        dst.offsets = src.offsets;
    } else {
        int offset0 = src.offset (0);
        int namelen = src.name.length - offset0;
        int labels = src.labels ();
        dst.name = new byte [namelen];
        System.arraycopy (src.name, offset0, dst.name, 0, namelen);
        for (int i = 0;
        i < labels && i < MAXOFFSETS; i ++) dst.setoffset (i, src.offset (i) - offset0);

        dst.setlabels (labels);
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Name.java" startline="139" endline="168">
private final void append (byte [] array, int start, int n) throws NameTooLongException {
    int length = (name == null ? 0 : (name.length - offset (0)));
    int alength = 0;
    for (int i = 0, pos = start;
    i < n; i ++) {
        int len = array [pos];
        if (len > MAXLABEL) throw new IllegalStateException ("invalid label");

        len ++;
        pos += len;
        alength += len;
    }
    int newlength = length + alength;
    if (newlength > MAXNAME) throw new NameTooLongException ();

    int labels = getlabels ();
    int newlabels = labels + n;
    if (newlabels > MAXLABELS) throw new IllegalStateException ("too many labels");

    byte [] newname = new byte [newlength];
    if (length != 0) System.arraycopy (name, offset (0), newname, 0, length);

    System.arraycopy (array, start, newname, length, alength);
    name = newname;
    for (int i = 0, pos = length;
    i < n; i ++) {
        setoffset (labels + i, pos);
        pos += (newname [pos] + 1);
    }
    setlabels (newlabels);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Name.java" startline="170" endline="173">
private static TextParseException parseException (String str, String message) {
    return new TextParseException ("'" + str + "': " + message);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Name.java" startline="175" endline="185">
private final void appendFromString (String fullName, byte [] array, int start, int n) throws TextParseException {
    try {
        append (array, start, n);
    } catch (NameTooLongException e) {
        throw parseException (fullName, "Name too long");
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Name.java" startline="187" endline="194">
private final void appendSafe (byte [] array, int start, int n) {
    try {
        append (array, start, n);
    } catch (NameTooLongException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Name.java" startline="204" endline="278">
public Name (String s, Name origin) throws TextParseException {
    if (s.equals ("")) throw parseException (s, "empty name");
    else if (s.equals ("@")) {
        if (origin == null) copy (empty, this);
        else copy (origin, this);

        return;
    } else if (s.equals (".")) {
        copy (root, this);
        return;
    }

    int labelstart = - 1;
    int pos = 1;
    byte [] label = new byte [MAXLABEL + 1];
    boolean escaped = false;
    int digits = 0;
    int intval = 0;
    boolean absolute = false;
    for (int i = 0;
    i < s.length (); i ++) {
        byte b = (byte) s.charAt (i);
        if (escaped) {
            if (b >= '0' && b <= '9' && digits < 3) {
                digits ++;
                intval *= 10;
                intval += (b - '0');
                if (intval > 255) throw parseException (s, "bad escape");

                if (digits < 3) continue;

                b = (byte) intval;
            } else if (digits > 0 && digits < 3) throw parseException (s, "bad escape");

            if (pos > MAXLABEL) throw parseException (s, "label too long");

            labelstart = pos;
            label [pos ++] = b;
            escaped = false;
        } else if (b == '\\') {
            escaped = true;
            digits = 0;
            intval = 0;
        } else if (b == '.') {
            if (labelstart == - 1) throw parseException (s, "invalid empty label");

            label [0] = (byte) (pos - 1);
            appendFromString (s, label, 0, 1);
            labelstart = - 1;
            pos = 1;
        } else {
            if (labelstart == - 1) labelstart = i;

            if (pos > MAXLABEL) throw parseException (s, "label too long");

            label [pos ++] = b;
        }

    }
    if (digits > 0 && digits < 3) throw parseException (s, "bad escape");

    if (escaped) throw parseException (s, "bad escape");

    if (labelstart == - 1) {
        appendFromString (s, emptyLabel, 0, 1);
        absolute = true;
    } else {
        label [0] = (byte) (pos - 1);
        appendFromString (s, label, 0, 1);
    }
    if (origin != null && ! absolute) appendFromString (s, origin.name, origin.offset (0), origin.getlabels ());

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Name.java" startline="286" endline="289">
public Name (String s) throws TextParseException {
    this (s, null);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Name.java" startline="300" endline="308">
public static Name fromString (String s, Name origin) throws TextParseException {
    if (s.equals ("@") && origin != null) return origin;
    else if (s.equals (".")) return (root);

    return new Name (s, origin);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Name.java" startline="318" endline="321">
public static Name fromString (String s) throws TextParseException {
    return fromString (s, null);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Name.java" startline="329" endline="337">
public static Name fromConstantString (String s) {
    try {
        return fromString (s, null);
    } catch (TextParseException e) {
        throw new IllegalArgumentException ("Invalid name '" + s + "'");
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Name.java" startline="344" endline="391">
public Name (DNSInput in) throws WireParseException {
    int len, pos;
    boolean done = false;
    byte [] label = new byte [MAXLABEL + 1];
    boolean savedState = false;
    while (! done) {
        len = in.readU8 ();
        switch (len & LABEL_MASK) {
            case LABEL_NORMAL :
                if (getlabels () >= MAXLABELS) throw new WireParseException ("too many labels");

                if (len == 0) {
                    append (emptyLabel, 0, 1);
                    done = true;
                } else {
                    label [0] = (byte) len;
                    in.readByteArray (label, 1, len);
                    append (label, 0, 1);
                }
                break;
            case LABEL_COMPRESSION :
                pos = in.readU8 ();
                pos += ((len & ~ LABEL_MASK) << 8);
                if (Options.check ("verbosecompression")) System.err.println ("currently " + in.current () + ", pointer to " + pos);

                if (pos >= in.current () - 2) throw new WireParseException ("bad compression");

                if (! savedState) {
                    in.save ();
                    savedState = true;
                }
                in.jump (pos);
                if (Options.check ("verbosecompression")) System.err.println ("current name '" + this + "', seeking to " + pos);

                break;
            default :
                throw new WireParseException ("bad label type");
        }
    }
    if (savedState) {
        in.restore ();
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Name.java" startline="397" endline="400">
public Name (byte [] b) throws IOException {
    this (new DNSInput (b));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Name.java" startline="407" endline="417">
public Name (Name src, int n) {
    int slabels = src.labels ();
    if (n > slabels) throw new IllegalArgumentException ("attempted to remove too " + "many labels");

    name = src.name;
    setlabels (slabels - n);
    for (int i = 0;
    i < MAXOFFSETS && i < slabels - n; i ++) setoffset (i, src.offset (i + n));

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Name.java" startline="426" endline="434">
public static Name concatenate (Name prefix, Name suffix) throws NameTooLongException {
    if (prefix.isAbsolute ()) return (prefix);

    Name newname = new Name ();
    copy (prefix, newname);
    newname.append (suffix.name, suffix.offset (0), suffix.getlabels ());
    return newname;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Name.java" startline="442" endline="454">
public Name relativize (Name origin) {
    if (origin == null || ! subdomain (origin)) return this;

    Name newname = new Name ();
    copy (this, newname);
    int length = length () - origin.length ();
    int labels = newname.labels () - origin.labels ();
    newname.setlabels (labels);
    newname.name = new byte [length];
    System.arraycopy (name, offset (0), newname.name, 0, length);
    return newname;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Name.java" startline="460" endline="475">
public Name wild (int n) {
    if (n < 1) throw new IllegalArgumentException ("must replace 1 or more " + "labels");

    try {
        Name newname = new Name ();
        copy (wild, newname);
        newname.append (name, offset (n), getlabels () - n);
        return newname;
    } catch (NameTooLongException e) {
        throw new IllegalStateException ("Name.wild: concatenate failed");
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Name.java" startline="481" endline="499">
public Name canonicalize () {
    boolean canonical = true;
    for (int i = 0;
    i < name.length; i ++) {
        if (lowercase [name [i] & 0xFF] != name [i]) {
            canonical = false;
            break;
        }
    }
    if (canonical) return this;

    Name newname = new Name ();
    newname.appendSafe (name, offset (0), getlabels ());
    for (int i = 0;
    i < newname.name.length; i ++) newname.name [i] = lowercase [newname.name [i] & 0xFF];

    return newname;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Name.java" startline="507" endline="535">
public Name fromDNAME (DNAMERecord dname) throws NameTooLongException {
    Name dnameowner = dname.getName ();
    Name dnametarget = dname.getTarget ();
    if (! subdomain (dnameowner)) return null;

    int plabels = labels () - dnameowner.labels ();
    int plength = length () - dnameowner.length ();
    int pstart = offset (0);
    int dlabels = dnametarget.labels ();
    int dlength = dnametarget.length ();
    if (plength + dlength > MAXNAME) throw new NameTooLongException ();

    Name newname = new Name ();
    newname.setlabels (plabels + dlabels);
    newname.name = new byte [plength + dlength];
    System.arraycopy (name, pstart, newname.name, 0, plength);
    System.arraycopy (dnametarget.name, 0, newname.name, plength, dlength);
    for (int i = 0, pos = 0;
    i < MAXOFFSETS && i < plabels + dlabels; i ++) {
        newname.setoffset (i, pos);
        pos += (newname.name [pos] + 1);
    }
    return newname;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Name.java" startline="540" endline="545">
public boolean isWild () {
    if (labels () == 0) return false;

    return (name [0] == (byte) 1 && name [1] == (byte) '*');
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Name.java" startline="550" endline="556">
public boolean isAbsolute () {
    int nlabels = labels ();
    if (nlabels == 0) return false;

    return name [offset (nlabels - 1)] == 0;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Name.java" startline="561" endline="566">
public short length () {
    if (getlabels () == 0) return 0;

    return (short) (name.length - offset (0));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Name.java" startline="571" endline="574">
public int labels () {
    return getlabels ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Name.java" startline="579" endline="588">
public boolean subdomain (Name domain) {
    int labels = labels ();
    int dlabels = domain.labels ();
    if (dlabels > labels) return false;

    if (dlabels == labels) return equals (domain);

    return domain.equals (name, offset (labels - dlabels));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Name.java" startline="590" endline="610">
private String byteString (byte [] array, int pos) {
    StringBuffer sb = new StringBuffer ();
    int len = array [pos ++];
    for (int i = pos;
    i < pos + len; i ++) {
        int b = array [i] & 0xFF;
        if (b <= 0x20 || b >= 0x7f) {
            sb.append ('\\');
            sb.append (byteFormat.format (b));
        } else if (b == '"' || b == '(' || b == ')' || b == '.' || b == ';' || b == '\\' || b == '@' || b == '$') {
            sb.append ('\\');
            sb.append ((char) b);
        } else sb.append ((char) b);

    }
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Name.java" startline="617" endline="640">
public String toString (boolean omitFinalDot) {
    int labels = labels ();
    if (labels == 0) return "@";
    else if (labels == 1 && name [offset (0)] == 0) return ".";

    StringBuffer sb = new StringBuffer ();
    for (int i = 0, pos = offset (0);
    i < labels; i ++) {
        int len = name [pos];
        if (len > MAXLABEL) throw new IllegalStateException ("invalid label");

        if (len == 0) {
            if (! omitFinalDot) sb.append ('.');

            break;
        }
        if (i > 0) sb.append ('.');

        sb.append (byteString (name, pos));
        pos += (1 + len);
    }
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Name.java" startline="646" endline="649">
public String toString () {
    return toString (false);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Name.java" startline="656" endline="663">
public byte [] getLabel (int n) {
    int pos = offset (n);
    byte len = (byte) (name [pos] + 1);
    byte [] label = new byte [len];
    System.arraycopy (name, pos, label, 0, len);
    return label;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Name.java" startline="670" endline="674">
public String getLabelString (int n) {
    int pos = offset (n);
    return byteString (name, pos);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Name.java" startline="682" endline="710">
public void toWire (DNSOutput out, Compression c) {
    if (! isAbsolute ()) throw new IllegalArgumentException ("toWire() called on " + "non-absolute name");

    int labels = labels ();
    for (int i = 0;
    i < labels - 1; i ++) {
        Name tname;
        if (i == 0) tname = this;
        else tname = new Name (this, i);

        int pos = - 1;
        if (c != null) pos = c.get (tname);

        if (pos >= 0) {
            pos |= (LABEL_MASK << 8);
            out.writeU16 (pos);
            return;
        } else {
            if (c != null) c.add (out.current (), tname);

            int off = offset (i);
            out.writeByteArray (name, off, name [off] + 1);
        }
    }
    out.writeU8 (0);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Name.java" startline="716" endline="721">
public byte [] toWire () {
    DNSOutput out = new DNSOutput ();
    toWire (out, null);
    return out.toByteArray ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Name.java" startline="727" endline="731">
public void toWireCanonical (DNSOutput out) {
    byte [] b = toWireCanonical ();
    out.writeByteArray (b);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Name.java" startline="737" endline="752">
public byte [] toWireCanonical () {
    int labels = labels ();
    if (labels == 0) return (new byte [0]);

    byte [] b = new byte [name.length - offset (0)];
    for (int i = 0, spos = offset (0), dpos = 0;
    i < labels; i ++) {
        int len = name [spos];
        if (len > MAXLABEL) throw new IllegalStateException ("invalid label");

        b [dpos ++] = name [spos ++];
        for (int j = 0;
        j < len; j ++) b [dpos ++] = lowercase [(name [spos ++] & 0xFF)];

    }
    return b;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Name.java" startline="762" endline="768">
public void toWire (DNSOutput out, Compression c, boolean canonical) {
    if (canonical) toWireCanonical (out);
    else toWire (out, c);

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Name.java" startline="770" endline="786">
private final boolean equals (byte [] b, int bpos) {
    int labels = labels ();
    for (int i = 0, pos = offset (0);
    i < labels; i ++) {
        if (name [pos] != b [bpos]) return false;

        int len = name [pos ++];
        bpos ++;
        if (len > MAXLABEL) throw new IllegalStateException ("invalid label");

        for (int j = 0;
        j < len; j ++) if (lowercase [(name [pos ++] & 0xFF)] != lowercase [(b [bpos ++] & 0xFF)]) return false;

    }
    return true;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Name.java" startline="791" endline="807">
public boolean equals (Object arg) {
    if (arg == this) return true;

    if (arg == null || ! (arg instanceof Name)) return false;

    Name d = (Name) arg;
    if (d.hashcode == 0) d.hashCode ();

    if (hashcode == 0) hashCode ();

    if (d.hashcode != hashcode) return false;

    if (d.labels () != labels ()) return false;

    return equals (d.name, d.offset (0));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Name.java" startline="812" endline="821">
public int hashCode () {
    if (hashcode != 0) return (hashcode);

    int code = 0;
    for (int i = offset (0);
    i < name.length; i ++) code += ((code << 3) + lowercase [(name [i] & 0xFF)]);

    hashcode = code;
    return hashcode;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Name.java" startline="832" endline="858">
public int compareTo (Object o) {
    Name arg = (Name) o;
    if (this == arg) return (0);

    int labels = labels ();
    int alabels = arg.labels ();
    int compares = labels > alabels ? alabels : labels;
    for (int i = 1;
    i <= compares; i ++) {
        int start = offset (labels - i);
        int astart = arg.offset (alabels - i);
        int length = name [start];
        int alength = arg.name [astart];
        for (int j = 0;
        j < length && j < alength; j ++) {
            int n = lowercase [(name [j + start + 1]) & 0xFF] - lowercase [(arg.name [j + astart + 1]) & 0xFF];
            if (n != 0) return (n);

        }
        if (length != alength) return (length - alength);

    }
    return (labels - alabels);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/EDNSOption.java" startline="17" endline="17">
private Code () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/EDNSOption.java" startline="40" endline="43">
public static String string (int code) {
    return codes.getText (code);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/EDNSOption.java" startline="51" endline="54">
public static int value (String s) {
    return codes.getValue (s);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/EDNSOption.java" startline="63" endline="66">
public EDNSOption (int code) {
    this.code = Record.checkU16 ("code", code);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/EDNSOption.java" startline="68" endline="79">
public String toString () {
    StringBuffer sb = new StringBuffer ();
    sb.append ("{");
    sb.append (EDNSOption.Code.string (code));
    sb.append (": ");
    sb.append (optionToString ());
    sb.append ("}");
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/EDNSOption.java" startline="86" endline="89">
public int getCode () {
    return code;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/EDNSOption.java" startline="96" endline="101">
byte [] getData () {
    DNSOutput out = new DNSOutput ();
    optionToWire (out);
    return out.toByteArray ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/EDNSOption.java" startline="116" endline="142">
static EDNSOption fromWire (DNSInput in) throws IOException {
    int code, length;
    code = in.readU16 ();
    length = in.readU16 ();
    if (in.remaining () < length) throw new WireParseException ("truncated option");

    int save = in.saveActive ();
    in.setActive (length);
    EDNSOption option;
    switch (code) {
        case Code.NSID :
            option = new NSIDOption ();
            break;
        case Code.CLIENT_SUBNET :
            option = new ClientSubnetOption ();
            break;
        default :
            option = new GenericEDNSOption (code);
            break;
    }
    option.optionFromWire (in);
    in.restoreActive (save);
    return option;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/EDNSOption.java" startline="149" endline="152">
public static EDNSOption fromWire (byte [] b) throws IOException {
    return fromWire (new DNSInput (b));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/EDNSOption.java" startline="165" endline="173">
void toWire (DNSOutput out) {
    out.writeU16 (code);
    int lengthPosition = out.current ();
    out.writeU16 (0);
    optionToWire (out);
    int length = out.current () - lengthPosition - 2;
    out.writeU16At (length, lengthPosition);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/EDNSOption.java" startline="179" endline="184">
public byte [] toWire () throws IOException {
    DNSOutput out = new DNSOutput ();
    toWire (out);
    return out.toByteArray ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/EDNSOption.java" startline="191" endline="199">
public boolean equals (Object arg) {
    if (arg == null || ! (arg instanceof EDNSOption)) return false;

    EDNSOption opt = (EDNSOption) arg;
    if (code != opt.code) return false;

    return Arrays.equals (getData (), opt.getData ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/EDNSOption.java" startline="204" endline="211">
public int hashCode () {
    byte [] array = getData ();
    int hashval = 0;
    for (int i = 0;
    i < array.length; i ++) hashval += ((hashval << 3) + (array [i] & 0xFF));

    return hashval;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="28" endline="36">
private static int limitExpire (long ttl, long maxttl) {
    if (maxttl >= 0 && maxttl < ttl) ttl = maxttl;

    long expire = (System.currentTimeMillis () / 1000) + ttl;
    if (expire < 0 || expire > Integer.MAX_VALUE) return Integer.MAX_VALUE;

    return (int) expire;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="44" endline="50">
public CacheRRset (Record rec, int cred, long maxttl) {
    super ();
    this.credibility = cred;
    this.expire = limitExpire (rec.getTTL (), maxttl);
    addRR (rec);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="52" endline="57">
public CacheRRset (RRset rrset, int cred, long maxttl) {
    super (rrset);
    this.credibility = cred;
    this.expire = limitExpire (rrset.getTTL (), maxttl);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="59" endline="63">
public final boolean expired () {
    int now = (int) (System.currentTimeMillis () / 1000);
    return (now >= expire);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="65" endline="68">
public final int compareCredibility (int cred) {
    return credibility - cred;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="70" endline="77">
public String toString () {
    StringBuffer sb = new StringBuffer ();
    sb.append (super.toString ());
    sb.append (" cl = ");
    sb.append (credibility);
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="86" endline="97">
public NegativeElement (Name name, int type, SOARecord soa, int cred, long maxttl) {
    this.name = name;
    this.type = type;
    long cttl = 0;
    if (soa != null) cttl = soa.getMinimum ();

    this.credibility = cred;
    this.expire = limitExpire (cttl, maxttl);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="99" endline="102">
public int getType () {
    return type;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="104" endline="108">
public final boolean expired () {
    int now = (int) (System.currentTimeMillis () / 1000);
    return (now >= expire);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="110" endline="113">
public final int compareCredibility (int cred) {
    return credibility - cred;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="115" endline="125">
public String toString () {
    StringBuffer sb = new StringBuffer ();
    if (type == 0) sb.append ("NXDOMAIN " + name);
    else sb.append ("NXRRSET " + name + " " + Type.string (type));

    sb.append (" cl = ");
    sb.append (credibility);
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="131" endline="134">
CacheMap (int maxsize) {
    super (16, (float) 0.75, true);
    this.maxsize = maxsize;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="136" endline="139">
int getMaxSize () {
    return maxsize;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="141" endline="149">
void setMaxSize (int maxsize) {
    this.maxsize = maxsize;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="151" endline="153">
protected boolean removeEldestEntry (Map.Entry eldest) {
    return maxsize >= 0 && size () > maxsize;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="169" endline="173">
public Cache (int dclass) {
    this.dclass = dclass;
    data = new CacheMap (defaultMaxEntries);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="179" endline="182">
public Cache () {
    this (DClass.IN);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="187" endline="194">
public Cache (String file) throws IOException {
    data = new CacheMap (defaultMaxEntries);
    Master m = new Master (file);
    Record record;
    while ((record = m.nextRecord ()) != null) addRecord (record, Credibility.HINT, m);

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="196" endline="199">
private synchronized Object exactName (Name name) {
    return data.get (name);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="201" endline="204">
private synchronized void removeName (Name name) {
    data.remove (name);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="206" endline="216">
private synchronized Element [] allElements (Object types) {
    if (types instanceof List) {
        List typelist = (List) types;
        int size = typelist.size ();
        return (Element []) typelist.toArray (new Element [size]);
    } else {
        Element set = (Element) types;
        return new Element [] {set};
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="218" endline="247">
private synchronized Element oneElement (Name name, Object types, int type, int minCred) {
    Element found = null;
    if (type == Type.ANY) throw new IllegalArgumentException ("oneElement(ANY)");

    if (types instanceof List) {
        List list = (List) types;
        for (int i = 0;
        i < list.size (); i ++) {
            Element set = (Element) list.get (i);
            if (set.getType () == type) {
                found = set;
                break;
            }
        }
    } else {
        Element set = (Element) types;
        if (set.getType () == type) found = set;

    }
    if (found == null) return null;

    if (found.expired ()) {
        removeElement (name, type);
        return null;
    }
    if (found.compareCredibility (minCred) < 0) return null;

    return found;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="249" endline="255">
private synchronized Element findElement (Name name, int type, int minCred) {
    Object types = exactName (name);
    if (types == null) return null;

    return oneElement (name, types, type, minCred);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="257" endline="286">
private synchronized void addElement (Name name, Element element) {
    Object types = data.get (name);
    if (types == null) {
        data.put (name, element);
        return;
    }
    int type = element.getType ();
    if (types instanceof List) {
        List list = (List) types;
        for (int i = 0;
        i < list.size (); i ++) {
            Element elt = (Element) list.get (i);
            if (elt.getType () == type) {
                list.set (i, element);
                return;
            }
        }
        list.add (element);
    } else {
        Element elt = (Element) types;
        if (elt.getType () == type) data.put (name, element);
        else {
            LinkedList list = new LinkedList ();
            list.add (elt);
            list.add (element);
            data.put (name, list);
        }
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="288" endline="311">
private synchronized void removeElement (Name name, int type) {
    Object types = data.get (name);
    if (types == null) {
        return;
    }
    if (types instanceof List) {
        List list = (List) types;
        for (int i = 0;
        i < list.size (); i ++) {
            Element elt = (Element) list.get (i);
            if (elt.getType () == type) {
                list.remove (i);
                if (list.size () == 0) data.remove (name);

                return;
            }
        }
    } else {
        Element elt = (Element) types;
        if (elt.getType () != type) return;

        data.remove (name);
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="314" endline="317">
public synchronized void clearCache () {
    data.clear ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="326" endline="342">
public synchronized void addRecord (Record r, int cred, Object o) {
    Name name = r.getName ();
    int type = r.getRRsetType ();
    if (! Type.isRR (type)) return;

    Element element = findElement (name, type, cred);
    if (element == null) {
        CacheRRset crrset = new CacheRRset (r, cred, maxcache);
        addRRset (crrset, cred);
    } else if (element.compareCredibility (cred) == 0) {
        if (element instanceof CacheRRset) {
            CacheRRset crrset = (CacheRRset) element;
            crrset.addRR (r);
        }
    }

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="350" endline="371">
public synchronized void addRRset (RRset rrset, int cred) {
    long ttl = rrset.getTTL ();
    Name name = rrset.getName ();
    int type = rrset.getType ();
    Element element = findElement (name, type, 0);
    if (ttl == 0) {
        if (element != null && element.compareCredibility (cred) <= 0) removeElement (name, type);

    } else {
        if (element != null && element.compareCredibility (cred) <= 0) element = null;

        if (element == null) {
            CacheRRset crrset;
            if (rrset instanceof CacheRRset) crrset = (CacheRRset) rrset;
            else crrset = new CacheRRset (rrset, cred, maxcache);

            addElement (name, crrset);
        }
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="381" endline="398">
public synchronized void addNegative (Name name, int type, SOARecord soa, int cred) {
    long ttl = 0;
    if (soa != null) ttl = soa.getTTL ();

    Element element = findElement (name, type, 0);
    if (ttl == 0) {
        if (element != null && element.compareCredibility (cred) <= 0) removeElement (name, type);

    } else {
        if (element != null && element.compareCredibility (cred) <= 0) element = null;

        if (element == null) addElement (name, new NegativeElement (name, type, soa, cred, maxncache));

    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="403" endline="499">
protected synchronized SetResponse lookup (Name name, int type, int minCred) {
    int labels;
    int tlabels;
    Element element;
    Name tname;
    Object types;
    SetResponse sr;
    labels = name.labels ();
    for (tlabels = labels; tlabels >= 1; tlabels --) {
        boolean isRoot = (tlabels == 1);
        boolean isExact = (tlabels == labels);
        if (isRoot) tname = Name.root;
        else if (isExact) tname = name;
        else tname = new Name (name, labels - tlabels);

        types = data.get (tname);
        if (types == null) continue;

        if (isExact && type == Type.ANY) {
            sr = new SetResponse (SetResponse.SUCCESSFUL);
            Element [] elements = allElements (types);
            int added = 0;
            for (int i = 0;
            i < elements.length; i ++) {
                element = elements [i];
                if (element.expired ()) {
                    removeElement (tname, element.getType ());
                    continue;
                }
                if (! (element instanceof CacheRRset)) continue;

                if (element.compareCredibility (minCred) < 0) continue;

                sr.addRRset ((CacheRRset) element);
                added ++;
            }
            if (added > 0) return sr;

        } else if (isExact) {
            element = oneElement (tname, types, type, minCred);
            if (element != null && element instanceof CacheRRset) {
                sr = new SetResponse (SetResponse.SUCCESSFUL);
                sr.addRRset ((CacheRRset) element);
                return sr;
            } else if (element != null) {
                sr = new SetResponse (SetResponse.NXRRSET);
                return sr;
            }

            element = oneElement (tname, types, Type.CNAME, minCred);
            if (element != null && element instanceof CacheRRset) {
                return new SetResponse (SetResponse.CNAME, (CacheRRset) element);
            }
        } else {
            element = oneElement (tname, types, Type.DNAME, minCred);
            if (element != null && element instanceof CacheRRset) {
                return new SetResponse (SetResponse.DNAME, (CacheRRset) element);
            }
        }

        element = oneElement (tname, types, Type.NS, minCred);
        if (element != null && element instanceof CacheRRset) return new SetResponse (SetResponse.DELEGATION, (CacheRRset) element);

        if (isExact) {
            element = oneElement (tname, types, 0, minCred);
            if (element != null) return SetResponse.ofType (SetResponse.NXDOMAIN);

        }
    }
    return SetResponse.ofType (SetResponse.UNKNOWN);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="511" endline="514">
public SetResponse lookupRecords (Name name, int type, int minCred) {
    return lookup (name, type, minCred);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="516" endline="523">
private RRset [] findRecords (Name name, int type, int minCred) {
    SetResponse cr = lookupRecords (name, type, minCred);
    if (cr.isSuccessful ()) return cr.answers ();
    else return null;

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="533" endline="536">
public RRset [] findRecords (Name name, int type) {
    return findRecords (name, type, Credibility.NORMAL);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="546" endline="549">
public RRset [] findAnyRecords (Name name, int type) {
    return findRecords (name, type, Credibility.GLUE);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="551" endline="567">
private final int getCred (int section, boolean isAuth) {
    if (section == Section.ANSWER) {
        if (isAuth) return Credibility.AUTH_ANSWER;
        else return Credibility.NONAUTH_ANSWER;

    } else if (section == Section.AUTHORITY) {
        if (isAuth) return Credibility.AUTH_AUTHORITY;
        else return Credibility.NONAUTH_AUTHORITY;

    } else if (section == Section.ADDITIONAL) {
        return Credibility.ADDITIONAL;
    } else throw new IllegalArgumentException ("getCred: invalid section");

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="569" endline="582">
private static void markAdditional (RRset rrset, Set names) {
    Record first = rrset.first ();
    if (first.getAdditionalName () == null) return;

    Iterator it = rrset.rrs ();
    while (it.hasNext ()) {
        Record r = (Record) it.next ();
        Name name = r.getAdditionalName ();
        if (name != null) names.add (name);

    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="592" endline="723">
public SetResponse addMessage (Message in) {
    boolean isAuth = in.getHeader ().getFlag (Flags.AA);
    Record question = in.getQuestion ();
    Name qname;
    Name curname;
    int qtype;
    int qclass;
    int cred;
    int rcode = in.getHeader ().getRcode ();
    boolean completed = false;
    RRset [] answers, auth, addl;
    SetResponse response = null;
    boolean verbose = Options.check ("verbosecache");
    HashSet additionalNames;
    if ((rcode != Rcode.NOERROR && rcode != Rcode.NXDOMAIN) || question == null) return null;

    qname = question.getName ();
    qtype = question.getType ();
    qclass = question.getDClass ();
    curname = qname;
    additionalNames = new HashSet ();
    answers = in.getSectionRRsets (Section.ANSWER);
    for (int i = 0;
    i < answers.length; i ++) {
        if (answers [i].getDClass () != qclass) continue;

        int type = answers [i].getType ();
        Name name = answers [i].getName ();
        cred = getCred (Section.ANSWER, isAuth);
        if ((type == qtype || qtype == Type.ANY) && name.equals (curname)) {
            addRRset (answers [i], cred);
            completed = true;
            if (curname == qname) {
                if (response == null) response = new SetResponse (SetResponse.SUCCESSFUL);

                response.addRRset (answers [i]);
            }
            markAdditional (answers [i], additionalNames);
        } else if (type == Type.CNAME && name.equals (curname)) {
            CNAMERecord cname;
            addRRset (answers [i], cred);
            if (curname == qname) response = new SetResponse (SetResponse.CNAME, answers [i]);

            cname = (CNAMERecord) answers [i].first ();
            curname = cname.getTarget ();
        } else if (type == Type.DNAME && curname.subdomain (name)) {
            DNAMERecord dname;
            addRRset (answers [i], cred);
            if (curname == qname) response = new SetResponse (SetResponse.DNAME, answers [i]);

            dname = (DNAMERecord) answers [i].first ();
            try {
                curname = curname.fromDNAME (dname);
            } catch (NameTooLongException e) {
                break;
            }
        }

    }
    auth = in.getSectionRRsets (Section.AUTHORITY);
    RRset soa = null, ns = null;
    for (int i = 0;
    i < auth.length; i ++) {
        if (auth [i].getType () == Type.SOA && curname.subdomain (auth [i].getName ())) soa = auth [i];
        else if (auth [i].getType () == Type.NS && curname.subdomain (auth [i].getName ())) ns = auth [i];

    }
    if (! completed) {
        int cachetype = (rcode == Rcode.NXDOMAIN) ? 0 : qtype;
        if (rcode == Rcode.NXDOMAIN || soa != null || ns == null) {
            cred = getCred (Section.AUTHORITY, isAuth);
            SOARecord soarec = null;
            if (soa != null) soarec = (SOARecord) soa.first ();

            addNegative (curname, cachetype, soarec, cred);
            if (response == null) {
                int responseType;
                if (rcode == Rcode.NXDOMAIN) responseType = SetResponse.NXDOMAIN;
                else responseType = SetResponse.NXRRSET;

                response = SetResponse.ofType (responseType);
            }
        } else {
            cred = getCred (Section.AUTHORITY, isAuth);
            addRRset (ns, cred);
            markAdditional (ns, additionalNames);
            if (response == null) response = new SetResponse (SetResponse.DELEGATION, ns);

        }
    } else if (rcode == Rcode.NOERROR && ns != null) {
        cred = getCred (Section.AUTHORITY, isAuth);
        addRRset (ns, cred);
        markAdditional (ns, additionalNames);
    }

    addl = in.getSectionRRsets (Section.ADDITIONAL);
    for (int i = 0;
    i < addl.length; i ++) {
        int type = addl [i].getType ();
        if (type != Type.A && type != Type.AAAA && type != Type.A6) continue;

        Name name = addl [i].getName ();
        if (! additionalNames.contains (name)) continue;

        cred = getCred (Section.ADDITIONAL, isAuth);
        addRRset (addl [i], cred);
    }
    if (verbose) System.out.println ("addMessage: " + response);

    return (response);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="731" endline="734">
public void flushSet (Name name, int type) {
    removeElement (name, type);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="741" endline="744">
public void flushName (Name name) {
    removeName (name);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="751" endline="754">
public void setMaxNCache (int seconds) {
    maxncache = seconds;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="760" endline="763">
public int getMaxNCache () {
    return maxncache;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="769" endline="772">
public void setMaxCache (int seconds) {
    maxcache = seconds;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="778" endline="781">
public int getMaxCache () {
    return maxcache;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="787" endline="790">
public int getSize () {
    return data.size ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="797" endline="800">
public int getMaxEntries () {
    return data.getMaxSize ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="814" endline="817">
public void setMaxEntries (int entries) {
    data.setMaxSize (entries);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="822" endline="825">
public int getDClass () {
    return dclass;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Cache.java" startline="830" endline="844">
public String toString () {
    StringBuffer sb = new StringBuffer ();
    synchronized (this) {
        Iterator it = data.values ().iterator ();
        while (it.hasNext ()) {
            Element [] elements = allElements (it.next ());
            for (int i = 0;
            i < elements.length; i ++) {
                sb.append (elements [i]);
                sb.append ("\n");
            }
        }
    }
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TLSARecord.java" startline="19" endline="19">
private CertificateUsage () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TLSARecord.java" startline="28" endline="28">
private Selector () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TLSARecord.java" startline="44" endline="44">
private MatchingType () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TLSARecord.java" startline="61" endline="61">
TLSARecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TLSARecord.java" startline="63" endline="66">
Record getObject () {
    return new TLSARecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TLSARecord.java" startline="78" endline="91">
public TLSARecord (Name name, int dclass, long ttl, int certificateUsage, int selector, int matchingType, byte [] certificateAssociationData) {
    super (name, Type.TLSA, dclass, ttl);
    this.certificateUsage = checkU8 ("certificateUsage", certificateUsage);
    this.selector = checkU8 ("selector", selector);
    this.matchingType = checkU8 ("matchingType", matchingType);
    this.certificateAssociationData = checkByteArrayLength ("certificateAssociationData", certificateAssociationData, 0xFFFF);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TLSARecord.java" startline="93" endline="99">
void rrFromWire (DNSInput in) throws IOException {
    certificateUsage = in.readU8 ();
    selector = in.readU8 ();
    matchingType = in.readU8 ();
    certificateAssociationData = in.readByteArray ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TLSARecord.java" startline="101" endline="107">
void rdataFromString (Tokenizer st, Name origin) throws IOException {
    certificateUsage = st.getUInt8 ();
    selector = st.getUInt8 ();
    matchingType = st.getUInt8 ();
    certificateAssociationData = st.getHex ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TLSARecord.java" startline="110" endline="122">
String rrToString () {
    StringBuffer sb = new StringBuffer ();
    sb.append (certificateUsage);
    sb.append (" ");
    sb.append (selector);
    sb.append (" ");
    sb.append (matchingType);
    sb.append (" ");
    sb.append (base16.toString (certificateAssociationData));
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TLSARecord.java" startline="124" endline="130">
void rrToWire (DNSOutput out, Compression c, boolean canonical) {
    out.writeU8 (certificateUsage);
    out.writeU8 (selector);
    out.writeU8 (matchingType);
    out.writeByteArray (certificateAssociationData);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TLSARecord.java" startline="133" endline="136">
public int getCertificateUsage () {
    return certificateUsage;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TLSARecord.java" startline="139" endline="142">
public int getSelector () {
    return selector;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TLSARecord.java" startline="145" endline="148">
public int getMatchingType () {
    return matchingType;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TLSARecord.java" startline="151" endline="154">
public final byte [] getCertificateAssociationData () {
    return certificateAssociationData;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/MBRecord.java" startline="15" endline="15">
MBRecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/MBRecord.java" startline="17" endline="20">
Record getObject () {
    return new MBRecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/MBRecord.java" startline="26" endline="29">
public MBRecord (Name name, int dclass, long ttl, Name mailbox) {
    super (name, Type.MB, dclass, ttl, mailbox, "mailbox");
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/MBRecord.java" startline="32" endline="35">
public Name getMailbox () {
    return getSingleName ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/MBRecord.java" startline="37" endline="40">
public Name getAdditionalName () {
    return getSingleName ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SSHFPRecord.java" startline="19" endline="19">
private Algorithm () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SSHFPRecord.java" startline="26" endline="26">
private Digest () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SSHFPRecord.java" startline="35" endline="35">
SSHFPRecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SSHFPRecord.java" startline="37" endline="40">
Record getObject () {
    return new SSHFPRecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SSHFPRecord.java" startline="48" endline="56">
public SSHFPRecord (Name name, int dclass, long ttl, int alg, int digestType, byte [] fingerprint) {
    super (name, Type.SSHFP, dclass, ttl);
    this.alg = checkU8 ("alg", alg);
    this.digestType = checkU8 ("digestType", digestType);
    this.fingerprint = fingerprint;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SSHFPRecord.java" startline="58" endline="63">
void rrFromWire (DNSInput in) throws IOException {
    alg = in.readU8 ();
    digestType = in.readU8 ();
    fingerprint = in.readByteArray ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SSHFPRecord.java" startline="65" endline="70">
void rdataFromString (Tokenizer st, Name origin) throws IOException {
    alg = st.getUInt8 ();
    digestType = st.getUInt8 ();
    fingerprint = st.getHex (true);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SSHFPRecord.java" startline="72" endline="81">
String rrToString () {
    StringBuffer sb = new StringBuffer ();
    sb.append (alg);
    sb.append (" ");
    sb.append (digestType);
    sb.append (" ");
    sb.append (base16.toString (fingerprint));
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SSHFPRecord.java" startline="84" endline="87">
public int getAlgorithm () {
    return alg;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SSHFPRecord.java" startline="90" endline="93">
public int getDigestType () {
    return digestType;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SSHFPRecord.java" startline="96" endline="99">
public byte [] getFingerPrint () {
    return fingerprint;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SSHFPRecord.java" startline="101" endline="106">
void rrToWire (DNSOutput out, Compression c, boolean canonical) {
    out.writeU8 (alg);
    out.writeU8 (digestType);
    out.writeByteArray (fingerprint);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Credibility.java" startline="17" endline="18">
private Credibility () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSEC3Record.java" startline="29" endline="29">
private Flags () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSEC3Record.java" startline="38" endline="38">
private Digest () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSEC3Record.java" startline="58" endline="58">
NSEC3Record () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSEC3Record.java" startline="60" endline="62">
Record getObject () {
    return new NSEC3Record ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSEC3Record.java" startline="77" endline="101">
public NSEC3Record (Name name, int dclass, long ttl, int hashAlg, int flags, int iterations, byte [] salt, byte [] next, int [] types) {
    super (name, Type.NSEC3, dclass, ttl);
    this.hashAlg = checkU8 ("hashAlg", hashAlg);
    this.flags = checkU8 ("flags", flags);
    this.iterations = checkU16 ("iterations", iterations);
    if (salt != null) {
        if (salt.length > 255) throw new IllegalArgumentException ("Invalid salt");

        if (salt.length > 0) {
            this.salt = new byte [salt.length];
            System.arraycopy (salt, 0, this.salt, 0, salt.length);
        }
    }
    if (next.length > 255) {
        throw new IllegalArgumentException ("Invalid next hash");
    }
    this.next = new byte [next.length];
    System.arraycopy (next, 0, this.next, 0, next.length);
    this.types = new TypeBitmap (types);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSEC3Record.java" startline="103" endline="118">
void rrFromWire (DNSInput in) throws IOException {
    hashAlg = in.readU8 ();
    flags = in.readU8 ();
    iterations = in.readU16 ();
    int salt_length = in.readU8 ();
    if (salt_length > 0) salt = in.readByteArray (salt_length);
    else salt = null;

    int next_length = in.readU8 ();
    next = in.readByteArray (next_length);
    types = new TypeBitmap (in);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSEC3Record.java" startline="120" endline="135">
void rrToWire (DNSOutput out, Compression c, boolean canonical) {
    out.writeU8 (hashAlg);
    out.writeU8 (flags);
    out.writeU16 (iterations);
    if (salt != null) {
        out.writeU8 (salt.length);
        out.writeByteArray (salt);
    } else out.writeU8 (0);

    out.writeU8 (next.length);
    out.writeByteArray (next);
    types.toWire (out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSEC3Record.java" startline="137" endline="155">
void rdataFromString (Tokenizer st, Name origin) throws IOException {
    hashAlg = st.getUInt8 ();
    flags = st.getUInt8 ();
    iterations = st.getUInt16 ();
    String s = st.getString ();
    if (s.equals ("-")) salt = null;
    else {
        st.unget ();
        salt = st.getHexString ();
        if (salt.length > 255) throw st.exception ("salt value too long");

    }
    next = st.getBase32String (b32);
    types = new TypeBitmap (st);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSEC3Record.java" startline="158" endline="180">
String rrToString () {
    StringBuffer sb = new StringBuffer ();
    sb.append (hashAlg);
    sb.append (' ');
    sb.append (flags);
    sb.append (' ');
    sb.append (iterations);
    sb.append (' ');
    if (salt == null) sb.append ('-');
    else sb.append (base16.toString (salt));

    sb.append (' ');
    sb.append (b32.toString (next));
    if (! types.empty ()) {
        sb.append (' ');
        sb.append (types.toString ());
    }
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSEC3Record.java" startline="183" endline="186">
public int getHashAlgorithm () {
    return hashAlg;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSEC3Record.java" startline="189" endline="192">
public int getFlags () {
    return flags;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSEC3Record.java" startline="195" endline="198">
public int getIterations () {
    return iterations;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSEC3Record.java" startline="201" endline="205">
public byte [] getSalt () {
    return salt;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSEC3Record.java" startline="208" endline="211">
public byte [] getNext () {
    return next;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSEC3Record.java" startline="214" endline="217">
public int [] getTypes () {
    return types.toArray ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSEC3Record.java" startline="220" endline="224">
public boolean hasType (int type) {
    return types.contains (type);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSEC3Record.java" startline="226" endline="252">
static byte [] hashName (Name name, int hashAlg, int iterations, byte [] salt) throws NoSuchAlgorithmException {
    MessageDigest digest;
    switch (hashAlg) {
        case Digest.SHA1 :
            digest = MessageDigest.getInstance ("sha-1");
            break;
        default :
            throw new NoSuchAlgorithmException ("Unknown NSEC3 algorithm" + "identifier: " + hashAlg);
    }
    byte [] hash = null;
    for (int i = 0;
    i <= iterations; i ++) {
        digest.reset ();
        if (i == 0) digest.update (name.toWireCanonical ());
        else digest.update (hash);

        if (salt != null) digest.update (salt);

        hash = digest.digest ();
    }
    return hash;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSEC3Record.java" startline="260" endline="264">
public byte [] hashName (Name name) throws NoSuchAlgorithmException {
    return hashName (name, hashAlg, iterations, salt);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TSIGRecord.java" startline="31" endline="31">
TSIGRecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TSIGRecord.java" startline="33" endline="36">
Record getObject () {
    return new TSIGRecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TSIGRecord.java" startline="53" endline="66">
public TSIGRecord (Name name, int dclass, long ttl, Name alg, Date timeSigned, int fudge, byte [] signature, int originalID, int error, byte other []) {
    super (name, Type.TSIG, dclass, ttl);
    this.alg = checkName ("alg", alg);
    this.timeSigned = timeSigned;
    this.fudge = checkU16 ("fudge", fudge);
    this.signature = signature;
    this.originalID = checkU16 ("originalID", originalID);
    this.error = checkU16 ("error", error);
    this.other = other;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TSIGRecord.java" startline="68" endline="89">
void rrFromWire (DNSInput in) throws IOException {
    alg = new Name (in);
    long timeHigh = in.readU16 ();
    long timeLow = in.readU32 ();
    long time = (timeHigh << 32) + timeLow;
    timeSigned = new Date (time * 1000);
    fudge = in.readU16 ();
    int sigLen = in.readU16 ();
    signature = in.readByteArray (sigLen);
    originalID = in.readU16 ();
    error = in.readU16 ();
    int otherLen = in.readU16 ();
    if (otherLen > 0) other = in.readByteArray (otherLen);
    else other = null;

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TSIGRecord.java" startline="91" endline="94">
void rdataFromString (Tokenizer st, Name origin) throws IOException {
    throw st.exception ("no text format defined for TSIG");
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TSIGRecord.java" startline="97" endline="151">
String rrToString () {
    StringBuffer sb = new StringBuffer ();
    sb.append (alg);
    sb.append (" ");
    if (Options.check ("multiline")) sb.append ("(\n\t");

    sb.append (timeSigned.getTime () / 1000);
    sb.append (" ");
    sb.append (fudge);
    sb.append (" ");
    sb.append (signature.length);
    if (Options.check ("multiline")) {
        sb.append ("\n");
        sb.append (base64.formatString (signature, 64, "\t", false));
    } else {
        sb.append (" ");
        sb.append (base64.toString (signature));
    }
    sb.append (" ");
    sb.append (Rcode.TSIGstring (error));
    sb.append (" ");
    if (other == null) sb.append (0);
    else {
        sb.append (other.length);
        if (Options.check ("multiline")) sb.append ("\n\n\n\t");
        else sb.append (" ");

        if (error == Rcode.BADTIME) {
            if (other.length != 6) {
                sb.append ("<invalid BADTIME other data>");
            } else {
                long time = ((long) (other [0] & 0xFF) << 40) + ((long) (other [1] & 0xFF) << 32) + ((other [2] & 0xFF) << 24) + ((other [3] & 0xFF) << 16) + ((other [4] & 0xFF) << 8) + ((other [5] & 0xFF));
                sb.append ("<server time: ");
                sb.append (new Date (time * 1000));
                sb.append (">");
            }
        } else {
            sb.append ("<");
            sb.append (base64.toString (other));
            sb.append (">");
        }
    }
    if (Options.check ("multiline")) sb.append (" )");

    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TSIGRecord.java" startline="154" endline="157">
public Name getAlgorithm () {
    return alg;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TSIGRecord.java" startline="160" endline="163">
public Date getTimeSigned () {
    return timeSigned;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TSIGRecord.java" startline="166" endline="169">
public int getFudge () {
    return fudge;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TSIGRecord.java" startline="172" endline="175">
public byte [] getSignature () {
    return signature;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TSIGRecord.java" startline="178" endline="181">
public int getOriginalID () {
    return originalID;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TSIGRecord.java" startline="184" endline="187">
public int getError () {
    return error;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TSIGRecord.java" startline="190" endline="193">
public byte [] getOther () {
    return other;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TSIGRecord.java" startline="195" endline="218">
void rrToWire (DNSOutput out, Compression c, boolean canonical) {
    alg.toWire (out, null, canonical);
    long time = timeSigned.getTime () / 1000;
    int timeHigh = (int) (time>> 32);
    long timeLow = (time & 0xFFFFFFFFL);
    out.writeU16 (timeHigh);
    out.writeU32 (timeLow);
    out.writeU16 (fudge);
    out.writeU16 (signature.length);
    out.writeByteArray (signature);
    out.writeU16 (originalID);
    out.writeU16 (error);
    if (other != null) {
        out.writeU16 (other.length);
        out.writeByteArray (other);
    } else out.writeU16 (0);

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DSRecord.java" startline="20" endline="20">
private Digest () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DSRecord.java" startline="47" endline="47">
DSRecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DSRecord.java" startline="49" endline="52">
Record getObject () {
    return new DSRecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DSRecord.java" startline="61" endline="70">
public DSRecord (Name name, int dclass, long ttl, int footprint, int alg, int digestid, byte [] digest) {
    super (name, Type.DS, dclass, ttl);
    this.footprint = checkU16 ("footprint", footprint);
    this.alg = checkU8 ("alg", alg);
    this.digestid = checkU8 ("digestid", digestid);
    this.digest = digest;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DSRecord.java" startline="77" endline="82">
public DSRecord (Name name, int dclass, long ttl, int digestid, DNSKEYRecord key) {
    this (name, dclass, ttl, key.getFootprint (), key.getAlgorithm (), digestid, DNSSEC.generateDSDigest (key, digestid));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DSRecord.java" startline="84" endline="90">
void rrFromWire (DNSInput in) throws IOException {
    footprint = in.readU16 ();
    alg = in.readU8 ();
    digestid = in.readU8 ();
    digest = in.readByteArray ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DSRecord.java" startline="92" endline="98">
void rdataFromString (Tokenizer st, Name origin) throws IOException {
    footprint = st.getUInt16 ();
    alg = st.getUInt8 ();
    digestid = st.getUInt8 ();
    digest = st.getHex ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DSRecord.java" startline="103" endline="117">
String rrToString () {
    StringBuffer sb = new StringBuffer ();
    sb.append (footprint);
    sb.append (" ");
    sb.append (alg);
    sb.append (" ");
    sb.append (digestid);
    if (digest != null) {
        sb.append (" ");
        sb.append (base16.toString (digest));
    }
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DSRecord.java" startline="122" endline="125">
public int getAlgorithm () {
    return alg;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DSRecord.java" startline="130" endline="134">
public int getDigestID () {
    return digestid;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DSRecord.java" startline="139" endline="142">
public byte [] getDigest () {
    return digest;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DSRecord.java" startline="147" endline="150">
public int getFootprint () {
    return footprint;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DSRecord.java" startline="152" endline="159">
void rrToWire (DNSOutput out, Compression c, boolean canonical) {
    out.writeU16 (footprint);
    out.writeU8 (alg);
    out.writeU8 (digestid);
    if (digest != null) out.writeByteArray (digest);

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNAMERecord.java" startline="15" endline="15">
DNAMERecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNAMERecord.java" startline="17" endline="20">
Record getObject () {
    return new DNAMERecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNAMERecord.java" startline="26" endline="29">
public DNAMERecord (Name name, int dclass, long ttl, Name alias) {
    super (name, Type.DNAME, dclass, ttl, alias, "alias");
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNAMERecord.java" startline="34" endline="37">
public Name getTarget () {
    return getSingleName ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNAMERecord.java" startline="40" endline="43">
public Name getAlias () {
    return getSingleName ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/OPTRecord.java" startline="29" endline="29">
OPTRecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/OPTRecord.java" startline="31" endline="34">
Record getObject () {
    return new OPTRecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/OPTRecord.java" startline="50" endline="61">
public OPTRecord (int payloadSize, int xrcode, int version, int flags, List options) {
    super (Name.root, Type.OPT, payloadSize, 0);
    checkU16 ("payloadSize", payloadSize);
    checkU8 ("xrcode", xrcode);
    checkU8 ("version", version);
    checkU16 ("flags", flags);
    ttl = ((long) xrcode << 24) + ((long) version << 16) + flags;
    if (options != null) {
        this.options = new ArrayList (options);
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/OPTRecord.java" startline="75" endline="78">
public OPTRecord (int payloadSize, int xrcode, int version, int flags) {
    this (payloadSize, xrcode, version, flags, null);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/OPTRecord.java" startline="84" endline="87">
public OPTRecord (int payloadSize, int xrcode, int version) {
    this (payloadSize, xrcode, version, 0, null);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/OPTRecord.java" startline="89" endline="97">
void rrFromWire (DNSInput in) throws IOException {
    if (in.remaining () > 0) options = new ArrayList ();

    while (in.remaining () > 0) {
        EDNSOption option = EDNSOption.fromWire (in);
        options.add (option);
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/OPTRecord.java" startline="99" endline="102">
void rdataFromString (Tokenizer st, Name origin) throws IOException {
    throw st.exception ("no text format defined for OPT");
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/OPTRecord.java" startline="105" endline="121">
String rrToString () {
    StringBuffer sb = new StringBuffer ();
    if (options != null) {
        sb.append (options);
        sb.append (" ");
    }
    sb.append (" ; payload ");
    sb.append (getPayloadSize ());
    sb.append (", xrcode ");
    sb.append (getExtendedRcode ());
    sb.append (", version ");
    sb.append (getVersion ());
    sb.append (", flags ");
    sb.append (getFlags ());
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/OPTRecord.java" startline="124" endline="127">
public int getPayloadSize () {
    return dclass;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/OPTRecord.java" startline="133" endline="136">
public int getExtendedRcode () {
    return (int) (ttl>>> 24);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/OPTRecord.java" startline="139" endline="142">
public int getVersion () {
    return (int) ((ttl>>> 16) & 0xFF);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/OPTRecord.java" startline="145" endline="148">
public int getFlags () {
    return (int) (ttl & 0xFFFF);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/OPTRecord.java" startline="150" endline="159">
void rrToWire (DNSOutput out, Compression c, boolean canonical) {
    if (options == null) return;

    Iterator it = options.iterator ();
    while (it.hasNext ()) {
        EDNSOption option = (EDNSOption) it.next ();
        option.toWire (out);
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/OPTRecord.java" startline="164" endline="169">
public List getOptions () {
    if (options == null) return Collections.EMPTY_LIST;

    return Collections.unmodifiableList (options);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/OPTRecord.java" startline="175" endline="189">
public List getOptions (int code) {
    if (options == null) return Collections.EMPTY_LIST;

    List list = Collections.EMPTY_LIST;
    for (Iterator it = options.iterator ();
    it.hasNext ();) {
        EDNSOption opt = (EDNSOption) it.next ();
        if (opt.getCode () == code) {
            if (list == Collections.EMPTY_LIST) list = new ArrayList ();

            list.add (opt);
        }
    }
    return list;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/OPTRecord.java" startline="198" endline="201">
public boolean equals (final Object arg) {
    return super.equals (arg) && ttl == ((OPTRecord) arg).ttl;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/MGRecord.java" startline="15" endline="15">
MGRecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/MGRecord.java" startline="17" endline="20">
Record getObject () {
    return new MGRecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/MGRecord.java" startline="27" endline="30">
public MGRecord (Name name, int dclass, long ttl, Name mailbox) {
    super (name, Type.MG, dclass, ttl, mailbox, "mailbox");
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/MGRecord.java" startline="33" endline="36">
public Name getMailbox () {
    return getSingleName ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/AAAARecord.java" startline="20" endline="20">
AAAARecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/AAAARecord.java" startline="22" endline="25">
Record getObject () {
    return new AAAARecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/AAAARecord.java" startline="31" endline="37">
public AAAARecord (Name name, int dclass, long ttl, InetAddress address) {
    super (name, Type.AAAA, dclass, ttl);
    if (Address.familyOf (address) != Address.IPv6) throw new IllegalArgumentException ("invalid IPv6 address");

    this.address = address.getAddress ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/AAAARecord.java" startline="39" endline="42">
void rrFromWire (DNSInput in) throws IOException {
    address = in.readByteArray (16);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/AAAARecord.java" startline="44" endline="47">
void rdataFromString (Tokenizer st, Name origin) throws IOException {
    address = st.getAddressBytes (Address.IPv6);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/AAAARecord.java" startline="50" endline="69">
String rrToString () {
    InetAddress addr;
    try {
        addr = InetAddress.getByAddress (null, address);
    } catch (UnknownHostException e) {
        return null;
    }
    if (addr.getAddress ().length == 4) {
        StringBuffer sb = new StringBuffer ("0:0:0:0:0:ffff:");
        int high = ((address [12] & 0xFF) << 8) + (address [13] & 0xFF);
        int low = ((address [14] & 0xFF) << 8) + (address [15] & 0xFF);
        sb.append (Integer.toHexString (high));
        sb.append (':');
        sb.append (Integer.toHexString (low));
        return sb.toString ();
    }
    return addr.getHostAddress ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/AAAARecord.java" startline="72" endline="83">
public InetAddress getAddress () {
    try {
        if (name == null) return InetAddress.getByAddress (address);
        else return InetAddress.getByAddress (name.toString (), address);

    } catch (UnknownHostException e) {
        return null;
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/AAAARecord.java" startline="85" endline="88">
void rrToWire (DNSOutput out, Compression c, boolean canonical) {
    out.writeByteArray (address);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SRVRecord.java" startline="23" endline="23">
SRVRecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SRVRecord.java" startline="25" endline="28">
Record getObject () {
    return new SRVRecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SRVRecord.java" startline="39" endline="48">
public SRVRecord (Name name, int dclass, long ttl, int priority, int weight, int port, Name target) {
    super (name, Type.SRV, dclass, ttl);
    this.priority = checkU16 ("priority", priority);
    this.weight = checkU16 ("weight", weight);
    this.port = checkU16 ("port", port);
    this.target = checkName ("target", target);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SRVRecord.java" startline="50" endline="56">
void rrFromWire (DNSInput in) throws IOException {
    priority = in.readU16 ();
    weight = in.readU16 ();
    port = in.readU16 ();
    target = new Name (in);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SRVRecord.java" startline="58" endline="64">
void rdataFromString (Tokenizer st, Name origin) throws IOException {
    priority = st.getUInt16 ();
    weight = st.getUInt16 ();
    port = st.getUInt16 ();
    target = st.getName (origin);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SRVRecord.java" startline="67" endline="75">
String rrToString () {
    StringBuffer sb = new StringBuffer ();
    sb.append (priority + " ");
    sb.append (weight + " ");
    sb.append (port + " ");
    sb.append (target);
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SRVRecord.java" startline="78" endline="81">
public int getPriority () {
    return priority;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SRVRecord.java" startline="84" endline="87">
public int getWeight () {
    return weight;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SRVRecord.java" startline="90" endline="93">
public int getPort () {
    return port;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SRVRecord.java" startline="96" endline="99">
public Name getTarget () {
    return target;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SRVRecord.java" startline="101" endline="107">
void rrToWire (DNSOutput out, Compression c, boolean canonical) {
    out.writeU16 (priority);
    out.writeU16 (weight);
    out.writeU16 (port);
    target.toWire (out, null, canonical);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SRVRecord.java" startline="109" endline="112">
public Name getAdditionalName () {
    return target;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ExtendedResolver.java" startline="31" endline="58">
public Resolution (ExtendedResolver eres, Message query) {
    List l = eres.resolvers;
    resolvers = (Resolver []) l.toArray (new Resolver [l.size ()]);
    if (eres.loadBalance) {
        int nresolvers = resolvers.length;
        int start = eres.lbStart ++ % nresolvers;
        if (eres.lbStart > nresolvers) eres.lbStart %= nresolvers;

        if (start > 0) {
            Resolver [] shuffle = new Resolver [nresolvers];
            for (int i = 0;
            i < nresolvers; i ++) {
                int pos = (i + start) % nresolvers;
                shuffle [i] = resolvers [pos];
            }
            resolvers = shuffle;
        }
    }
    sent = new int [resolvers.length];
    inprogress = new Object [resolvers.length];
    retries = eres.retries;
    this.query = query;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ExtendedResolver.java" startline="61" endline="78">
public void send (int n) {
    sent [n] ++;
    outstanding ++;
    try {
        inprogress [n] = resolvers [n].sendAsync (query, this);
    } catch (Throwable t) {
        synchronized (this) {
            thrown = t;
            done = true;
            if (listener == null) {
                notifyAll ();
                return;
            }
        }
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ExtendedResolver.java" startline="81" endline="129">
public Message start () throws IOException {
    try {
        sent [0] ++;
        outstanding ++;
        inprogress [0] = new Object ();
        return resolvers [0].send (query);
    } catch (Exception e) {
        handleException (inprogress [0], e);
    }
    synchronized (this) {
        while (! done) {
            try {
                wait ();
            } catch (InterruptedException e) {
            }
        }
    }
    if (response != null) return response;
    else if (thrown instanceof IOException) throw (IOException) thrown;
    else if (thrown instanceof RuntimeException) throw (RuntimeException) thrown;
    else if (thrown instanceof Error) throw (Error) thrown;
    else throw new IllegalStateException ("ExtendedResolver failure");

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ExtendedResolver.java" startline="132" endline="136">
public void startAsync (ResolverListener listener) {
    this.listener = listener;
    send (0);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ExtendedResolver.java" startline="142" endline="158">
public void receiveMessage (Object id, Message m) {
    if (Options.check ("verbose")) System.err.println ("ExtendedResolver: " + "received message");

    synchronized (this) {
        if (done) return;

        response = m;
        done = true;
        if (listener == null) {
            notifyAll ();
            return;
        }
    }
    listener.receiveMessage (this, response);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ExtendedResolver.java" startline="164" endline="231">
public void handleException (Object id, Exception e) {
    if (Options.check ("verbose")) System.err.println ("ExtendedResolver: got " + e);

    synchronized (this) {
        outstanding --;
        if (done) return;

        int n;
        for (n = 0; n < inprogress.length; n ++) if (inprogress [n] == id) break;

        if (n == inprogress.length) return;

        boolean startnext = false;
        if (sent [n] == 1 && n < resolvers.length - 1) startnext = true;

        if (e instanceof InterruptedIOException) {
            if (sent [n] < retries) send (n);

            if (thrown == null) thrown = e;

        } else if (e instanceof SocketException) {
            if (thrown == null || thrown instanceof InterruptedIOException) thrown = e;

        } else {
            thrown = e;
        }

        if (done) return;

        if (startnext) send (n + 1);

        if (done) return;

        if (outstanding == 0) {
            done = true;
            if (listener == null) {
                notifyAll ();
                return;
            }
        }
        if (! done) return;

    }
    if (! (thrown instanceof Exception)) thrown = new RuntimeException (thrown.getMessage ());

    listener.handleException (this, (Exception) thrown);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ExtendedResolver.java" startline="241" endline="244">
private void init () {
    resolvers = new ArrayList ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ExtendedResolver.java" startline="254" endline="267">
public ExtendedResolver () throws UnknownHostException {
    init ();
    String [] servers = ResolverConfig.getCurrentConfig ().servers ();
    if (servers != null) {
        for (int i = 0;
        i < servers.length; i ++) {
            Resolver r = new SimpleResolver (servers [i]);
            r.setTimeout (quantum);
            resolvers.add (r);
        }
    } else resolvers.add (new SimpleResolver ());

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ExtendedResolver.java" startline="276" endline="284">
public ExtendedResolver (String [] servers) throws UnknownHostException {
    init ();
    for (int i = 0;
    i < servers.length; i ++) {
        Resolver r = new SimpleResolver (servers [i]);
        r.setTimeout (quantum);
        resolvers.add (r);
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ExtendedResolver.java" startline="292" endline="297">
public ExtendedResolver (Resolver [] res) throws UnknownHostException {
    init ();
    for (int i = 0;
    i < res.length; i ++) resolvers.add (res [i]);

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ExtendedResolver.java" startline="299" endline="303">
public void setPort (int port) {
    for (int i = 0;
    i < resolvers.size (); i ++) ((Resolver) resolvers.get (i)).setPort (port);

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ExtendedResolver.java" startline="305" endline="309">
public void setTCP (boolean flag) {
    for (int i = 0;
    i < resolvers.size (); i ++) ((Resolver) resolvers.get (i)).setTCP (flag);

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ExtendedResolver.java" startline="311" endline="315">
public void setIgnoreTruncation (boolean flag) {
    for (int i = 0;
    i < resolvers.size (); i ++) ((Resolver) resolvers.get (i)).setIgnoreTruncation (flag);

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ExtendedResolver.java" startline="317" endline="321">
public void setEDNS (int level) {
    for (int i = 0;
    i < resolvers.size (); i ++) ((Resolver) resolvers.get (i)).setEDNS (level);

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ExtendedResolver.java" startline="323" endline="328">
public void setEDNS (int level, int payloadSize, int flags, List options) {
    for (int i = 0;
    i < resolvers.size (); i ++) ((Resolver) resolvers.get (i)).setEDNS (level, payloadSize, flags, options);

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ExtendedResolver.java" startline="330" endline="334">
public void setTSIGKey (TSIG key) {
    for (int i = 0;
    i < resolvers.size (); i ++) ((Resolver) resolvers.get (i)).setTSIGKey (key);

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ExtendedResolver.java" startline="336" endline="340">
public void setTimeout (int secs, int msecs) {
    for (int i = 0;
    i < resolvers.size (); i ++) ((Resolver) resolvers.get (i)).setTimeout (secs, msecs);

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ExtendedResolver.java" startline="342" endline="345">
public void setTimeout (int secs) {
    setTimeout (secs, 0);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ExtendedResolver.java" startline="355" endline="359">
public Message send (Message query) throws IOException {
    Resolution res = new Resolution (this, query);
    return res.start ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ExtendedResolver.java" startline="371" endline="376">
public Object sendAsync (final Message query, final ResolverListener listener) {
    Resolution res = new Resolution (this, query);
    res.startAsync (listener);
    return res;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ExtendedResolver.java" startline="379" endline="384">
public Resolver getResolver (int n) {
    if (n < resolvers.size ()) return (Resolver) resolvers.get (n);

    return null;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ExtendedResolver.java" startline="387" endline="390">
public Resolver [] getResolvers () {
    return (Resolver []) resolvers.toArray (new Resolver [resolvers.size ()]);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ExtendedResolver.java" startline="393" endline="396">
public void addResolver (Resolver r) {
    resolvers.add (r);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ExtendedResolver.java" startline="399" endline="402">
public void deleteResolver (Resolver r) {
    resolvers.remove (r);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ExtendedResolver.java" startline="408" endline="411">
public void setLoadBalance (boolean flag) {
    loadBalance = flag;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ExtendedResolver.java" startline="414" endline="417">
public void setRetries (int retries) {
    this.retries = retries;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ClientSubnetOption.java" startline="41" endline="43">
ClientSubnetOption () {
    super (EDNSOption.Code.CLIENT_SUBNET);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ClientSubnetOption.java" startline="45" endline="53">
private static int checkMaskLength (String field, int family, int val) {
    int max = Address.addressLength (family) * 8;
    if (val < 0 || val > max) throw new IllegalArgumentException ("\"" + field + "\" " + val + " must be in the range " + "[0.." + max + "]");

    return val;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ClientSubnetOption.java" startline="66" endline="80">
public ClientSubnetOption (int sourceNetmask, int scopeNetmask, InetAddress address) {
    super (EDNSOption.Code.CLIENT_SUBNET);
    this.family = Address.familyOf (address);
    this.sourceNetmask = checkMaskLength ("source netmask", this.family, sourceNetmask);
    this.scopeNetmask = checkMaskLength ("scope netmask", this.family, scopeNetmask);
    this.address = Address.truncate (address, sourceNetmask);
    if (! address.equals (this.address)) throw new IllegalArgumentException ("source netmask is not " + "valid for address");

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ClientSubnetOption.java" startline="89" endline="92">
public ClientSubnetOption (int sourceNetmask, InetAddress address) {
    this (sourceNetmask, 0, address);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ClientSubnetOption.java" startline="98" endline="101">
public int getFamily () {
    return family;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ClientSubnetOption.java" startline="104" endline="107">
public int getSourceNetmask () {
    return sourceNetmask;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ClientSubnetOption.java" startline="110" endline="113">
public int getScopeNetmask () {
    return scopeNetmask;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ClientSubnetOption.java" startline="116" endline="119">
public InetAddress getAddress () {
    return address;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ClientSubnetOption.java" startline="121" endline="151">
void optionFromWire (DNSInput in) throws WireParseException {
    family = in.readU16 ();
    if (family != Address.IPv4 && family != Address.IPv6) throw new WireParseException ("unknown address family");

    sourceNetmask = in.readU8 ();
    if (sourceNetmask > Address.addressLength (family) * 8) throw new WireParseException ("invalid source netmask");

    scopeNetmask = in.readU8 ();
    if (scopeNetmask > Address.addressLength (family) * 8) throw new WireParseException ("invalid scope netmask");

    byte [] addr = in.readByteArray ();
    if (addr.length != (sourceNetmask + 7) / 8) throw new WireParseException ("invalid address");

    byte [] fulladdr = new byte [Address.addressLength (family)];
    System.arraycopy (addr, 0, fulladdr, 0, addr.length);
    try {
        address = InetAddress.getByAddress (fulladdr);
    } catch (UnknownHostException e) {
        throw new WireParseException ("invalid address", e);
    }
    InetAddress tmp = Address.truncate (address, sourceNetmask);
    if (! tmp.equals (address)) throw new WireParseException ("invalid padding");

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ClientSubnetOption.java" startline="153" endline="159">
void optionToWire (DNSOutput out) {
    out.writeU16 (family);
    out.writeU8 (sourceNetmask);
    out.writeU8 (scopeNetmask);
    out.writeByteArray (address.getAddress (), 0, (sourceNetmask + 7) / 8);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ClientSubnetOption.java" startline="161" endline="170">
String optionToString () {
    StringBuffer sb = new StringBuffer ();
    sb.append (address.getHostAddress ());
    sb.append ("/");
    sb.append (sourceNetmask);
    sb.append (", scope netmask ");
    sb.append (scopeNetmask);
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSAP_PTRRecord.java" startline="16" endline="16">
NSAP_PTRRecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSAP_PTRRecord.java" startline="18" endline="21">
Record getObject () {
    return new NSAP_PTRRecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSAP_PTRRecord.java" startline="27" endline="30">
public NSAP_PTRRecord (Name name, int dclass, long ttl, Name target) {
    super (name, Type.NSAP_PTR, dclass, ttl, target, "target");
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSAP_PTRRecord.java" startline="33" endline="36">
public Name getTarget () {
    return getSingleName ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSAPRecord.java" startline="20" endline="20">
NSAPRecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSAPRecord.java" startline="22" endline="25">
Record getObject () {
    return new NSAPRecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSAPRecord.java" startline="27" endline="58">
private static final byte [] checkAndConvertAddress (String address) {
    if (! address.substring (0, 2).equalsIgnoreCase ("0x")) {
        return null;
    }
    ByteArrayOutputStream bytes = new ByteArrayOutputStream ();
    boolean partial = false;
    int current = 0;
    for (int i = 2;
    i < address.length (); i ++) {
        char c = address.charAt (i);
        if (c == '.') {
            continue;
        }
        int value = Character.digit (c, 16);
        if (value == - 1) {
            return null;
        }
        if (partial) {
            current += value;
            bytes.write (current);
            partial = false;
        } else {
            current = value << 4;
            partial = true;
        }
    }
    if (partial) {
        return null;
    }
    return bytes.toByteArray ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSAPRecord.java" startline="65" endline="73">
public NSAPRecord (Name name, int dclass, long ttl, String address) {
    super (name, Type.NSAP, dclass, ttl);
    this.address = checkAndConvertAddress (address);
    if (this.address == null) {
        throw new IllegalArgumentException ("invalid NSAP address " + address);
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSAPRecord.java" startline="75" endline="78">
void rrFromWire (DNSInput in) throws IOException {
    address = in.readByteArray ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSAPRecord.java" startline="80" endline="86">
void rdataFromString (Tokenizer st, Name origin) throws IOException {
    String addr = st.getString ();
    this.address = checkAndConvertAddress (addr);
    if (this.address == null) throw st.exception ("invalid NSAP address " + addr);

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSAPRecord.java" startline="91" endline="94">
public String getAddress () {
    return byteArrayToString (address, false);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSAPRecord.java" startline="96" endline="99">
void rrToWire (DNSOutput out, Compression c, boolean canonical) {
    out.writeByteArray (address);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSAPRecord.java" startline="101" endline="104">
String rrToString () {
    return "0x" + base16.toString (address);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/UDPClient.java" startline="37" endline="40">
public void run () {
    int n = prng.nextInt ();
    prng_initializing = false;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/UDPClient.java" startline="45" endline="48">
public UDPClient (long endTime) throws IOException {
    super (DatagramChannel.open (), endTime);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/UDPClient.java" startline="50" endline="82">
private void bind_random (InetSocketAddress addr) throws IOException {
    if (prng_initializing) {
        try {
            Thread.sleep (2);
        } catch (InterruptedException e) {
        }
        if (prng_initializing) return;

    }
    DatagramChannel channel = (DatagramChannel) key.channel ();
    InetSocketAddress temp;
    for (int i = 0;
    i < 1024; i ++) {
        try {
            int port = prng.nextInt (EPHEMERAL_RANGE) + EPHEMERAL_START;
            if (addr != null) temp = new InetSocketAddress (addr.getAddress (), port);
            else temp = new InetSocketAddress (port);

            channel.socket ().bind (temp);
            bound = true;
            return;
        } catch (SocketException e) {
        }
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/UDPClient.java" startline="84" endline="100">
void bind (SocketAddress addr) throws IOException {
    if (addr == null || (addr instanceof InetSocketAddress && ((InetSocketAddress) addr).getPort () == 0)) {
        bind_random ((InetSocketAddress) addr);
        if (bound) return;

    }
    if (addr != null) {
        DatagramChannel channel = (DatagramChannel) key.channel ();
        channel.socket ().bind (addr);
        bound = true;
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/UDPClient.java" startline="102" endline="108">
void connect (SocketAddress addr) throws IOException {
    if (! bound) bind (null);

    DatagramChannel channel = (DatagramChannel) key.channel ();
    channel.connect (addr);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/UDPClient.java" startline="110" endline="116">
void send (byte [] data) throws IOException {
    DatagramChannel channel = (DatagramChannel) key.channel ();
    verboseLog ("UDP write", channel.socket ().getLocalSocketAddress (), channel.socket ().getRemoteSocketAddress (), data);
    channel.write (ByteBuffer.wrap (data));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/UDPClient.java" startline="118" endline="140">
byte [] recv (int max) throws IOException {
    DatagramChannel channel = (DatagramChannel) key.channel ();
    byte [] temp = new byte [max];
    key.interestOps (SelectionKey.OP_READ);
    try {
        while (! key.isReadable ()) blockUntil (key, endTime);

    } finally {
        if (key.isValid ()) key.interestOps (0);

    }
    long ret = channel.read (ByteBuffer.wrap (temp));
    if (ret <= 0) throw new EOFException ();

    int len = (int) ret;
    byte [] data = new byte [len];
    System.arraycopy (temp, 0, data, 0, len);
    verboseLog ("UDP read", channel.socket ().getLocalSocketAddress (), channel.socket ().getRemoteSocketAddress (), data);
    return data;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/UDPClient.java" startline="142" endline="157">
static byte [] sendrecv (SocketAddress local, SocketAddress remote, byte [] data, int max, long endTime) throws IOException {
    UDPClient client = new UDPClient (endTime);
    try {
        client.bind (local);
        client.connect (remote);
        client.send (data);
        return client.recv (max);
    } finally {
        client.cleanup ();
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/UDPClient.java" startline="159" endline="164">
static byte [] sendrecv (SocketAddress addr, byte [] data, int max, long endTime) throws IOException {
    return sendrecv (null, addr, data, max, endTime);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/LOCRecord.java" startline="31" endline="31">
LOCRecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/LOCRecord.java" startline="33" endline="36">
Record getObject () {
    return new LOCRecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/LOCRecord.java" startline="47" endline="58">
public LOCRecord (Name name, int dclass, long ttl, double latitude, double longitude, double altitude, double size, double hPrecision, double vPrecision) {
    super (name, Type.LOC, dclass, ttl);
    this.latitude = (long) (latitude * 3600 * 1000 + (1L << 31));
    this.longitude = (long) (longitude * 3600 * 1000 + (1L << 31));
    this.altitude = (long) ((altitude + 100000) * 100);
    this.size = (long) (size * 100);
    this.hPrecision = (long) (hPrecision * 100);
    this.vPrecision = (long) (vPrecision * 100);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/LOCRecord.java" startline="60" endline="74">
void rrFromWire (DNSInput in) throws IOException {
    int version;
    version = in.readU8 ();
    if (version != 0) throw new WireParseException ("Invalid LOC version");

    size = parseLOCformat (in.readU8 ());
    hPrecision = parseLOCformat (in.readU8 ());
    vPrecision = parseLOCformat (in.readU8 ());
    latitude = in.readU32 ();
    longitude = in.readU32 ();
    altitude = in.readU32 ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/LOCRecord.java" startline="76" endline="91">
private double parseFixedPoint (String s) {
    if (s.matches ("^-?\\d+$")) return Integer.parseInt (s);
    else if (s.matches ("^-?\\d+\\.\\d*$")) {
        String [] parts = s.split ("\\.");
        double value = Integer.parseInt (parts [0]);
        double fraction = Integer.parseInt (parts [1]);
        if (value < 0) fraction *= - 1;

        int digits = parts [1].length ();
        return value + (fraction / Math.pow (10, digits));
    } else throw new NumberFormatException ();

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/LOCRecord.java" startline="93" endline="132">
private long parsePosition (Tokenizer st, String type) throws IOException {
    boolean isLatitude = type.equals ("latitude");
    int deg = 0, min = 0;
    double sec = 0;
    long value;
    String s;
    deg = st.getUInt16 ();
    if (deg > 180 || (deg > 90 && isLatitude)) throw st.exception ("Invalid LOC " + type + " degrees");

    s = st.getString ();
    try {
        min = Integer.parseInt (s);
        if (min < 0 || min > 59) throw st.exception ("Invalid LOC " + type + " minutes");

        s = st.getString ();
        sec = parseFixedPoint (s);
        if (sec < 0 || sec >= 60) throw st.exception ("Invalid LOC " + type + " seconds");

        s = st.getString ();
    } catch (NumberFormatException e) {
    }
    if (s.length () != 1) throw st.exception ("Invalid LOC " + type);

    value = (long) (1000 * (sec + 60L * (min + 60L * deg)));
    char c = Character.toUpperCase (s.charAt (0));
    if ((isLatitude && c == 'S') || (! isLatitude && c == 'W')) value = - value;
    else if ((isLatitude && c != 'N') || (! isLatitude && c != 'E')) throw st.exception ("Invalid LOC " + type);

    value += (1L << 31);
    return value;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/LOCRecord.java" startline="134" endline="158">
private long parseDouble (Tokenizer st, String type, boolean required, long min, long max, long defaultValue) throws IOException {
    Tokenizer.Token token = st.get ();
    if (token.isEOL ()) {
        if (required) throw st.exception ("Invalid LOC " + type);

        st.unget ();
        return defaultValue;
    }
    String s = token.value;
    if (s.length () > 1 && s.charAt (s.length () - 1) == 'm') s = s.substring (0, s.length () - 1);

    try {
        long value = (long) (100 * parseFixedPoint (s));
        if (value < min || value > max) throw st.exception ("Invalid LOC " + type);

        return value;
    } catch (NumberFormatException e) {
        throw st.exception ("Invalid LOC " + type);
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/LOCRecord.java" startline="160" endline="171">
void rdataFromString (Tokenizer st, Name origin) throws IOException {
    latitude = parsePosition (st, "latitude");
    longitude = parsePosition (st, "longitude");
    altitude = parseDouble (st, "altitude", true, - 10000000, 4284967295L, 0) + 10000000;
    size = parseDouble (st, "size", false, 0, 9000000000L, 100);
    hPrecision = parseDouble (st, "horizontal precision", false, 0, 9000000000L, 1000000);
    vPrecision = parseDouble (st, "vertical precision", false, 0, 9000000000L, 1000);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/LOCRecord.java" startline="173" endline="183">
private void renderFixedPoint (StringBuffer sb, NumberFormat formatter, long value, long divisor) {
    sb.append (value / divisor);
    value %= divisor;
    if (value != 0) {
        sb.append (".");
        sb.append (formatter.format (value));
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/LOCRecord.java" startline="185" endline="211">
private String positionToString (long value, char pos, char neg) {
    StringBuffer sb = new StringBuffer ();
    char direction;
    long temp = value - (1L << 31);
    if (temp < 0) {
        temp = - temp;
        direction = neg;
    } else direction = pos;

    sb.append (temp / (3600 * 1000));
    temp = temp % (3600 * 1000);
    sb.append (" ");
    sb.append (temp / (60 * 1000));
    temp = temp % (60 * 1000);
    sb.append (" ");
    renderFixedPoint (sb, w3, temp, 1000);
    sb.append (" ");
    sb.append (direction);
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/LOCRecord.java" startline="215" endline="244">
String rrToString () {
    StringBuffer sb = new StringBuffer ();
    sb.append (positionToString (latitude, 'N', 'S'));
    sb.append (" ");
    sb.append (positionToString (longitude, 'E', 'W'));
    sb.append (" ");
    renderFixedPoint (sb, w2, altitude - 10000000, 100);
    sb.append ("m ");
    renderFixedPoint (sb, w2, size, 100);
    sb.append ("m ");
    renderFixedPoint (sb, w2, hPrecision, 100);
    sb.append ("m ");
    renderFixedPoint (sb, w2, vPrecision, 100);
    sb.append ("m");
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/LOCRecord.java" startline="247" endline="250">
public double getLatitude () {
    return ((double) (latitude - (1L << 31))) / (3600 * 1000);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/LOCRecord.java" startline="253" endline="256">
public double getLongitude () {
    return ((double) (longitude - (1L << 31))) / (3600 * 1000);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/LOCRecord.java" startline="259" endline="262">
public double getAltitude () {
    return ((double) (altitude - 10000000)) / 100;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/LOCRecord.java" startline="265" endline="268">
public double getSize () {
    return ((double) size) / 100;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/LOCRecord.java" startline="271" endline="274">
public double getHPrecision () {
    return ((double) hPrecision) / 100;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/LOCRecord.java" startline="277" endline="280">
public double getVPrecision () {
    return ((double) vPrecision) / 100;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/LOCRecord.java" startline="282" endline="291">
void rrToWire (DNSOutput out, Compression c, boolean canonical) {
    out.writeU8 (0);
    out.writeU8 (toLOCformat (size));
    out.writeU8 (toLOCformat (hPrecision));
    out.writeU8 (toLOCformat (vPrecision));
    out.writeU32 (latitude);
    out.writeU32 (longitude);
    out.writeU32 (altitude);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/LOCRecord.java" startline="293" endline="302">
private static long parseLOCformat (int b) throws WireParseException {
    long out = b>> 4;
    int exp = b & 0xF;
    if (out > 9 || exp > 9) throw new WireParseException ("Invalid LOC Encoding");

    while (exp -- > 0) out *= 10;

    return (out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/LOCRecord.java" startline="304" endline="312">
private int toLOCformat (long l) {
    byte exp = 0;
    while (l > 9) {
        exp ++;
        l /= 10;
    }
    return (int) ((l << 4) + exp);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/A6Record.java" startline="22" endline="22">
A6Record () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/A6Record.java" startline="24" endline="27">
Record getObject () {
    return new A6Record ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/A6Record.java" startline="35" endline="46">
public A6Record (Name name, int dclass, long ttl, int prefixBits, InetAddress suffix, Name prefix) {
    super (name, Type.A6, dclass, ttl);
    this.prefixBits = checkU8 ("prefixBits", prefixBits);
    if (suffix != null && Address.familyOf (suffix) != Address.IPv6) throw new IllegalArgumentException ("invalid IPv6 address");

    this.suffix = suffix;
    if (prefix != null) this.prefix = checkName ("prefix", prefix);

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/A6Record.java" startline="48" endline="60">
void rrFromWire (DNSInput in) throws IOException {
    prefixBits = in.readU8 ();
    int suffixbits = 128 - prefixBits;
    int suffixbytes = (suffixbits + 7) / 8;
    if (prefixBits < 128) {
        byte [] bytes = new byte [16];
        in.readByteArray (bytes, 16 - suffixbytes, suffixbytes);
        suffix = InetAddress.getByAddress (bytes);
    }
    if (prefixBits > 0) prefix = new Name (in);

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/A6Record.java" startline="62" endline="78">
void rdataFromString (Tokenizer st, Name origin) throws IOException {
    prefixBits = st.getUInt8 ();
    if (prefixBits > 128) {
        throw st.exception ("prefix bits must be [0..128]");
    } else if (prefixBits < 128) {
        String s = st.getString ();
        try {
            suffix = Address.getByAddress (s, Address.IPv6);
        } catch (UnknownHostException e) {
            throw st.exception ("invalid IPv6 address: " + s);
        }
    }

    if (prefixBits > 0) prefix = st.getName (origin);

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/A6Record.java" startline="81" endline="94">
String rrToString () {
    StringBuffer sb = new StringBuffer ();
    sb.append (prefixBits);
    if (suffix != null) {
        sb.append (" ");
        sb.append (suffix.getHostAddress ());
    }
    if (prefix != null) {
        sb.append (" ");
        sb.append (prefix);
    }
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/A6Record.java" startline="97" endline="100">
public int getPrefixBits () {
    return prefixBits;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/A6Record.java" startline="103" endline="106">
public InetAddress getSuffix () {
    return suffix;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/A6Record.java" startline="109" endline="112">
public Name getPrefix () {
    return prefix;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/A6Record.java" startline="114" endline="125">
void rrToWire (DNSOutput out, Compression c, boolean canonical) {
    out.writeU8 (prefixBits);
    if (suffix != null) {
        int suffixbits = 128 - prefixBits;
        int suffixbytes = (suffixbits + 7) / 8;
        byte [] data = suffix.getAddress ();
        out.writeByteArray (data, 16 - suffixbytes, suffixbytes);
    }
    if (prefix != null) prefix.toWire (out, null, canonical);

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TTL.java" startline="17" endline="18">
private TTL () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TTL.java" startline="20" endline="24">
static void check (long i) {
    if (i < 0 || i > MAX_VALUE) throw new InvalidTTLException (i);

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TTL.java" startline="36" endline="72">
public static long parse (String s, boolean clamp) {
    if (s == null || s.length () == 0 || ! Character.isDigit (s.charAt (0))) throw new NumberFormatException ();

    long value = 0;
    long ttl = 0;
    for (int i = 0;
    i < s.length (); i ++) {
        char c = s.charAt (i);
        long oldvalue = value;
        if (Character.isDigit (c)) {
            value = (value * 10) + Character.getNumericValue (c);
            if (value < oldvalue) throw new NumberFormatException ();

        } else {
            switch (Character.toUpperCase (c)) {
                case 'W' :
                    value *= 7;
                case 'D' :
                    value *= 24;
                case 'H' :
                    value *= 60;
                case 'M' :
                    value *= 60;
                case 'S' :
                    break;
                default :
                    throw new NumberFormatException ();
            }
            ttl += value;
            value = 0;
            if (ttl > 0xFFFFFFFFL) throw new NumberFormatException ();

        }
    }
    if (ttl == 0) ttl = value;

    if (ttl > 0xFFFFFFFFL) throw new NumberFormatException ();
    else if (ttl > MAX_VALUE && clamp) ttl = MAX_VALUE;

    return ttl;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TTL.java" startline="81" endline="84">
public static long parseTTL (String s) {
    return parse (s, true);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TTL.java" startline="86" endline="111">
public static String format (long ttl) {
    TTL.check (ttl);
    StringBuffer sb = new StringBuffer ();
    long secs, mins, hours, days, weeks;
    secs = ttl % 60;
    ttl /= 60;
    mins = ttl % 60;
    ttl /= 60;
    hours = ttl % 24;
    ttl /= 24;
    days = ttl % 7;
    ttl /= 7;
    weeks = ttl;
    if (weeks > 0) sb.append (weeks + "W");

    if (days > 0) sb.append (days + "D");

    if (hours > 0) sb.append (hours + "H");

    if (mins > 0) sb.append (mins + "M");

    if (secs > 0 || (weeks == 0 && days == 0 && hours == 0 && mins == 0)) sb.append (secs + "S");

    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/KEYRecord.java" startline="26" endline="26">
private Protocol () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/KEYRecord.java" startline="64" endline="67">
public static String string (int type) {
    return protocols.getText (type);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/KEYRecord.java" startline="75" endline="78">
public static int value (String s) {
    return protocols.getValue (s);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/KEYRecord.java" startline="86" endline="86">
private Flags () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/KEYRecord.java" startline="233" endline="254">
public static int value (String s) {
    int value;
    try {
        value = Integer.parseInt (s);
        if (value >= 0 && value <= 0xFFFF) {
            return value;
        }
        return - 1;
    } catch (NumberFormatException e) {
    }
    StringTokenizer st = new StringTokenizer (s, "|");
    value = 0;
    while (st.hasMoreTokens ()) {
        int val = flags.getValue (st.nextToken ());
        if (val < 0) {
            return - 1;
        }
        value |= val;
    }
    return value;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/KEYRecord.java" startline="292" endline="292">
KEYRecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/KEYRecord.java" startline="294" endline="297">
Record getObject () {
    return new KEYRecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/KEYRecord.java" startline="306" endline="311">
public KEYRecord (Name name, int dclass, long ttl, int flags, int proto, int alg, byte [] key) {
    super (name, Type.KEY, dclass, ttl, flags, proto, alg, key);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/KEYRecord.java" startline="322" endline="329">
public KEYRecord (Name name, int dclass, long ttl, int flags, int proto, int alg, PublicKey key) throws DNSSEC.DNSSECException {
    super (name, Type.KEY, dclass, ttl, flags, proto, alg, DNSSEC.fromPublicKey (key, alg));
    publicKey = key;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/KEYRecord.java" startline="331" endline="350">
void rdataFromString (Tokenizer st, Name origin) throws IOException {
    String flagString = st.getIdentifier ();
    flags = Flags.value (flagString);
    if (flags < 0) throw st.exception ("Invalid flags: " + flagString);

    String protoString = st.getIdentifier ();
    proto = Protocol.value (protoString);
    if (proto < 0) throw st.exception ("Invalid protocol: " + protoString);

    String algString = st.getIdentifier ();
    alg = DNSSEC.Algorithm.value (algString);
    if (alg < 0) throw st.exception ("Invalid algorithm: " + algString);

    if ((flags & Flags.USE_MASK) == Flags.NOKEY) key = null;
    else key = st.getBase64 ();

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Opcode.java" startline="45" endline="46">
private Opcode () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Opcode.java" startline="49" endline="52">
public static String string (int i) {
    return opcodes.getText (i);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Opcode.java" startline="55" endline="58">
public static int value (String s) {
    return opcodes.getValue (s);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DClass.java" startline="36" endline="40">
public DClassMnemonic () {
    super ("DClass", CASE_UPPER);
    setPrefix ("CLASS");
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DClass.java" startline="42" endline="45">
public void check (int val) {
    DClass.check (val);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DClass.java" startline="60" endline="61">
private DClass () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DClass.java" startline="67" endline="71">
public static void check (int i) {
    if (i < 0 || i > 0xFFFF) throw new InvalidDClassException (i);

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DClass.java" startline="78" endline="81">
public static String string (int i) {
    return classes.getText (i);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DClass.java" startline="87" endline="90">
public static int value (String s) {
    return classes.getValue (s);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/RTRecord.java" startline="15" endline="15">
RTRecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/RTRecord.java" startline="17" endline="20">
Record getObject () {
    return new RTRecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/RTRecord.java" startline="28" endline="34">
public RTRecord (Name name, int dclass, long ttl, int preference, Name intermediateHost) {
    super (name, Type.RT, dclass, ttl, preference, "preference", intermediateHost, "intermediateHost");
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/RTRecord.java" startline="37" endline="40">
public int getPreference () {
    return getU16Field ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/RTRecord.java" startline="43" endline="46">
public Name getIntermediateHost () {
    return getNameField ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DLVRecord.java" startline="30" endline="30">
DLVRecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DLVRecord.java" startline="32" endline="35">
Record getObject () {
    return new DLVRecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DLVRecord.java" startline="44" endline="53">
public DLVRecord (Name name, int dclass, long ttl, int footprint, int alg, int digestid, byte [] digest) {
    super (name, Type.DLV, dclass, ttl);
    this.footprint = checkU16 ("footprint", footprint);
    this.alg = checkU8 ("alg", alg);
    this.digestid = checkU8 ("digestid", digestid);
    this.digest = digest;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DLVRecord.java" startline="55" endline="61">
void rrFromWire (DNSInput in) throws IOException {
    footprint = in.readU16 ();
    alg = in.readU8 ();
    digestid = in.readU8 ();
    digest = in.readByteArray ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DLVRecord.java" startline="63" endline="69">
void rdataFromString (Tokenizer st, Name origin) throws IOException {
    footprint = st.getUInt16 ();
    alg = st.getUInt8 ();
    digestid = st.getUInt8 ();
    digest = st.getHex ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DLVRecord.java" startline="74" endline="88">
String rrToString () {
    StringBuffer sb = new StringBuffer ();
    sb.append (footprint);
    sb.append (" ");
    sb.append (alg);
    sb.append (" ");
    sb.append (digestid);
    if (digest != null) {
        sb.append (" ");
        sb.append (base16.toString (digest));
    }
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DLVRecord.java" startline="93" endline="96">
public int getAlgorithm () {
    return alg;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DLVRecord.java" startline="101" endline="105">
public int getDigestID () {
    return digestid;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DLVRecord.java" startline="110" endline="113">
public byte [] getDigest () {
    return digest;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DLVRecord.java" startline="118" endline="121">
public int getFootprint () {
    return footprint;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DLVRecord.java" startline="123" endline="130">
void rrToWire (DNSOutput out, Compression c, boolean canonical) {
    out.writeU16 (footprint);
    out.writeU8 (alg);
    out.writeU8 (digestid);
    if (digest != null) out.writeByteArray (digest);

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSRecord.java" startline="15" endline="15">
NSRecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSRecord.java" startline="17" endline="20">
Record getObject () {
    return new NSRecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSRecord.java" startline="26" endline="29">
public NSRecord (Name name, int dclass, long ttl, Name target) {
    super (name, Type.NS, dclass, ttl, target, "target");
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSRecord.java" startline="32" endline="35">
public Name getTarget () {
    return getSingleName ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSRecord.java" startline="37" endline="40">
public Name getAdditionalName () {
    return getSingleName ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Type.java" startline="213" endline="218">
public TypeMnemonic () {
    super ("Type", CASE_UPPER);
    setPrefix ("TYPE");
    objects = new HashMap ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Type.java" startline="220" endline="224">
public void add (int val, String str, Record proto) {
    super.add (val, str);
    objects.put (Mnemonic.toInteger (val), proto);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Type.java" startline="226" endline="229">
public void check (int val) {
    Type.check (val);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Type.java" startline="231" endline="235">
public Record getProto (int val) {
    check (val);
    return (Record) objects.get (toInteger (val));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Type.java" startline="307" endline="309">
private Type () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Type.java" startline="315" endline="319">
public static void check (int val) {
    if (val < 0 || val > 0xFFFF) throw new InvalidTypeException (val);

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Type.java" startline="327" endline="330">
public static String string (int val) {
    return types.getText (val);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Type.java" startline="338" endline="345">
public static int value (String s, boolean numberok) {
    int val = types.getValue (s);
    if (val == - 1 && numberok) {
        val = types.getValue ("TYPE" + s);
    }
    return val;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Type.java" startline="351" endline="354">
public static int value (String s) {
    return value (s, false);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Type.java" startline="356" endline="359">
static Record getProto (int val) {
    return types.getProto (val);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Type.java" startline="362" endline="377">
public static boolean isRR (int type) {
    switch (type) {
        case OPT :
        case TKEY :
        case TSIG :
        case IXFR :
        case AXFR :
        case MAILB :
        case MAILA :
        case ANY :
            return false;
        default :
            return true;
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSIDOption.java" startline="16" endline="18">
NSIDOption () {
    super (EDNSOption.Code.NSID);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSIDOption.java" startline="24" endline="27">
public NSIDOption (byte [] data) {
    super (EDNSOption.Code.NSID, data);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/APLRecord.java" startline="29" endline="40">
private Element (int family, boolean negative, Object address, int prefixLength) {
    this.family = family;
    this.negative = negative;
    this.address = address;
    this.prefixLength = prefixLength;
    if (! validatePrefixLength (family, prefixLength)) {
        throw new IllegalArgumentException ("invalid prefix " + "length");
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/APLRecord.java" startline="49" endline="53">
public Element (boolean negative, InetAddress address, int prefixLength) {
    this (Address.familyOf (address), negative, address, prefixLength);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/APLRecord.java" startline="55" endline="69">
public String toString () {
    StringBuffer sb = new StringBuffer ();
    if (negative) sb.append ("!");

    sb.append (family);
    sb.append (":");
    if (family == Address.IPv4 || family == Address.IPv6) sb.append (((InetAddress) address).getHostAddress ());
    else sb.append (base16.toString ((byte []) address));

    sb.append ("/");
    sb.append (prefixLength);
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/APLRecord.java" startline="71" endline="80">
public boolean equals (Object arg) {
    if (arg == null || ! (arg instanceof Element)) return false;

    Element elt = (Element) arg;
    return (family == elt.family && negative == elt.negative && prefixLength == elt.prefixLength && address.equals (elt.address));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/APLRecord.java" startline="82" endline="85">
public int hashCode () {
    return address.hashCode () + prefixLength + (negative ? 1 : 0);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/APLRecord.java" startline="92" endline="92">
APLRecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/APLRecord.java" startline="94" endline="97">
Record getObject () {
    return new APLRecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/APLRecord.java" startline="99" endline="107">
private static boolean validatePrefixLength (int family, int prefixLength) {
    if (prefixLength < 0 || prefixLength >= 256) return false;

    if ((family == Address.IPv4 && prefixLength > 32) || (family == Address.IPv6 && prefixLength > 128)) return false;

    return true;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/APLRecord.java" startline="113" endline="131">
public APLRecord (Name name, int dclass, long ttl, List elements) {
    super (name, Type.APL, dclass, ttl);
    this.elements = new ArrayList (elements.size ());
    for (Iterator it = elements.iterator ();
    it.hasNext ();) {
        Object o = it.next ();
        if (! (o instanceof Element)) {
            throw new IllegalArgumentException ("illegal element");
        }
        Element element = (Element) o;
        if (element.family != Address.IPv4 && element.family != Address.IPv6) {
            throw new IllegalArgumentException ("unknown family");
        }
        this.elements.add (element);
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/APLRecord.java" startline="133" endline="142">
private static byte [] parseAddress (byte [] in, int length) throws WireParseException {
    if (in.length > length) throw new WireParseException ("invalid address length");

    if (in.length == length) return in;

    byte [] out = new byte [length];
    System.arraycopy (in, 0, out, 0, in.length);
    return out;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/APLRecord.java" startline="144" endline="171">
void rrFromWire (DNSInput in) throws IOException {
    elements = new ArrayList (1);
    while (in.remaining () != 0) {
        int family = in.readU16 ();
        int prefix = in.readU8 ();
        int length = in.readU8 ();
        boolean negative = (length & 0x80) != 0;
        length &= ~ 0x80;
        byte [] data = in.readByteArray (length);
        Element element;
        if (! validatePrefixLength (family, prefix)) {
            throw new WireParseException ("invalid prefix length");
        }
        if (family == Address.IPv4 || family == Address.IPv6) {
            data = parseAddress (data, Address.addressLength (family));
            InetAddress addr = InetAddress.getByAddress (data);
            element = new Element (negative, addr, prefix);
        } else {
            element = new Element (family, negative, data, prefix);
        }
        elements.add (element);
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/APLRecord.java" startline="173" endline="231">
void rdataFromString (Tokenizer st, Name origin) throws IOException {
    elements = new ArrayList (1);
    while (true) {
        Tokenizer.Token t = st.get ();
        if (! t.isString ()) break;

        boolean negative = false;
        int family = 0;
        int prefix = 0;
        String s = t.value;
        int start = 0;
        if (s.startsWith ("!")) {
            negative = true;
            start = 1;
        }
        int colon = s.indexOf (':', start);
        if (colon < 0) throw st.exception ("invalid address prefix element");

        int slash = s.indexOf ('/', colon);
        if (slash < 0) throw st.exception ("invalid address prefix element");

        String familyString = s.substring (start, colon);
        String addressString = s.substring (colon + 1, slash);
        String prefixString = s.substring (slash + 1);
        try {
            family = Integer.parseInt (familyString);
        } catch (NumberFormatException e) {
            throw st.exception ("invalid family");
        }
        if (family != Address.IPv4 && family != Address.IPv6) throw st.exception ("unknown family");

        try {
            prefix = Integer.parseInt (prefixString);
        } catch (NumberFormatException e) {
            throw st.exception ("invalid prefix length");
        }
        if (! validatePrefixLength (family, prefix)) {
            throw st.exception ("invalid prefix length");
        }
        byte [] bytes = Address.toByteArray (addressString, family);
        if (bytes == null) throw st.exception ("invalid IP address " + addressString);

        InetAddress address = InetAddress.getByAddress (bytes);
        elements.add (new Element (negative, address, prefix));
    }
    st.unget ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/APLRecord.java" startline="233" endline="243">
String rrToString () {
    StringBuffer sb = new StringBuffer ();
    for (Iterator it = elements.iterator ();
    it.hasNext ();) {
        Element element = (Element) it.next ();
        sb.append (element);
        if (it.hasNext ()) sb.append (" ");

    }
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/APLRecord.java" startline="246" endline="249">
public List getElements () {
    return elements;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/APLRecord.java" startline="251" endline="258">
private static int addressLength (byte [] addr) {
    for (int i = addr.length - 1;
    i >= 0; i --) {
        if (addr [i] != 0) return i + 1;

    }
    return 0;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/APLRecord.java" startline="260" endline="285">
void rrToWire (DNSOutput out, Compression c, boolean canonical) {
    for (Iterator it = elements.iterator ();
    it.hasNext ();) {
        Element element = (Element) it.next ();
        int length = 0;
        byte [] data;
        if (element.family == Address.IPv4 || element.family == Address.IPv6) {
            InetAddress addr = (InetAddress) element.address;
            data = addr.getAddress ();
            length = addressLength (data);
        } else {
            data = (byte []) element.address;
            length = data.length;
        }
        int wlength = length;
        if (element.negative) {
            wlength |= 0x80;
        }
        out.writeU16 (element.family);
        out.writeU8 (element.prefixLength);
        out.writeU8 (wlength);
        out.writeByteArray (data, 0, length);
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/OPENPGPKEYRecord.java" startline="21" endline="21">
OPENPGPKEYRecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/OPENPGPKEYRecord.java" startline="23" endline="26">
Record getObject () {
    return new OPENPGPKEYRecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/OPENPGPKEYRecord.java" startline="33" endline="38">
public OPENPGPKEYRecord (Name name, int dclass, long ttl, byte [] cert) {
    super (name, Type.OPENPGPKEY, dclass, ttl);
    this.cert = cert;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/OPENPGPKEYRecord.java" startline="40" endline="43">
void rrFromWire (DNSInput in) throws IOException {
    cert = in.readByteArray ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/OPENPGPKEYRecord.java" startline="45" endline="48">
void rdataFromString (Tokenizer st, Name origin) throws IOException {
    cert = st.getBase64 ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/OPENPGPKEYRecord.java" startline="53" endline="65">
String rrToString () {
    StringBuffer sb = new StringBuffer ();
    if (cert != null) {
        if (Options.check ("multiline")) {
            sb.append ("(\n");
            sb.append (base64.formatString (cert, 64, "\t", true));
        } else {
            sb.append (base64.toString (cert));
        }
    }
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/OPENPGPKEYRecord.java" startline="70" endline="74">
public byte [] getCert () {
    return cert;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/OPENPGPKEYRecord.java" startline="76" endline="79">
void rrToWire (DNSOutput out, Compression c, boolean canonical) {
    out.writeByteArray (cert);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/RelativeNameException.java" startline="14" endline="17">
public RelativeNameException (Name name) {
    super ("'" + name + "' is not an absolute name");
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/RelativeNameException.java" startline="19" endline="22">
public RelativeNameException (String s) {
    super (s);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SIG0.java" startline="23" endline="24">
private SIG0 () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SIG0.java" startline="34" endline="51">
public static void signMessage (Message message, KEYRecord key, PrivateKey privkey, SIGRecord previous) throws DNSSEC.DNSSECException {
    int validity = Options.intValue ("sig0validity");
    if (validity < 0) validity = VALIDITY;

    long now = System.currentTimeMillis ();
    Date timeSigned = new Date (now);
    Date timeExpires = new Date (now + validity * 1000);
    SIGRecord sig = DNSSEC.signMessage (message, previous, key, privkey, timeSigned, timeExpires);
    message.addRecord (sig, Section.ADDITIONAL);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SIG0.java" startline="62" endline="77">
public static void verifyMessage (Message message, byte [] b, KEYRecord key, SIGRecord previous) throws DNSSEC.DNSSECException {
    SIGRecord sig = null;
    Record [] additional = message.getSectionArray (Section.ADDITIONAL);
    for (int i = 0;
    i < additional.length; i ++) {
        if (additional [i].getType () != Type.SIG) continue;

        if (((SIGRecord) additional [i]).getTypeCovered () != 0) continue;

        sig = (SIGRecord) additional [i];
        break;
    }
    DNSSEC.verifyMessage (message, b, sig, previous, key);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Rcode.java" startline="102" endline="103">
private Rcode () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Rcode.java" startline="106" endline="109">
public static String string (int i) {
    return rcodes.getText (i);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Rcode.java" startline="112" endline="115">
public static String TSIGstring (int i) {
    return tsigrcodes.getText (i);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Rcode.java" startline="118" endline="121">
public static int value (String s) {
    return rcodes.getValue (s);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/MRRecord.java" startline="15" endline="15">
MRRecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/MRRecord.java" startline="17" endline="20">
Record getObject () {
    return new MRRecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/MRRecord.java" startline="27" endline="30">
public MRRecord (Name name, int dclass, long ttl, Name newName) {
    super (name, Type.MR, dclass, ttl, newName, "new name");
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/MRRecord.java" startline="33" endline="36">
public Name getNewName () {
    return getSingleName ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/FormattedTime.java" startline="27" endline="28">
private FormattedTime () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/FormattedTime.java" startline="35" endline="48">
public static String format (Date date) {
    Calendar c = new GregorianCalendar (TimeZone.getTimeZone ("UTC"));
    StringBuffer sb = new StringBuffer ();
    c.setTime (date);
    sb.append (w4.format (c.get (Calendar.YEAR)));
    sb.append (w2.format (c.get (Calendar.MONTH) + 1));
    sb.append (w2.format (c.get (Calendar.DAY_OF_MONTH)));
    sb.append (w2.format (c.get (Calendar.HOUR_OF_DAY)));
    sb.append (w2.format (c.get (Calendar.MINUTE)));
    sb.append (w2.format (c.get (Calendar.SECOND)));
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/FormattedTime.java" startline="56" endline="77">
public static Date parse (String s) throws TextParseException {
    if (s.length () != 14) {
        throw new TextParseException ("Invalid time encoding: " + s);
    }
    Calendar c = new GregorianCalendar (TimeZone.getTimeZone ("UTC"));
    c.clear ();
    try {
        int year = Integer.parseInt (s.substring (0, 4));
        int month = Integer.parseInt (s.substring (4, 6)) - 1;
        int date = Integer.parseInt (s.substring (6, 8));
        int hour = Integer.parseInt (s.substring (8, 10));
        int minute = Integer.parseInt (s.substring (10, 12));
        int second = Integer.parseInt (s.substring (12, 14));
        c.set (year, month, date, hour, minute, second);
    } catch (NumberFormatException e) {
        throw new TextParseException ("Invalid time encoding: " + s);
    }
    return c.getTime ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/InvalidDClassException.java" startline="13" endline="16">
public InvalidDClassException (int dclass) {
    super ("Invalid DNS class: " + dclass);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Section.java" startline="60" endline="61">
private Section () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Section.java" startline="64" endline="67">
public static String string (int i) {
    return sections.getText (i);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Section.java" startline="70" endline="74">
public static String longString (int i) {
    sections.check (i);
    return longSections [i];
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Section.java" startline="80" endline="84">
public static String updString (int i) {
    sections.check (i);
    return updateSections [i];
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Section.java" startline="87" endline="90">
public static int value (String s) {
    return sections.getValue (s);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Lookup.java" startline="82" endline="94">
public static synchronized void refreshDefault () {
    try {
        defaultResolver = new ExtendedResolver ();
    } catch (UnknownHostException e) {
        throw new RuntimeException ("Failed to initialize resolver");
    }
    defaultSearchPath = ResolverConfig.getCurrentConfig ().searchPath ();
    defaultCaches = new HashMap ();
    defaultNdots = ResolverConfig.getCurrentConfig ().ndots ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Lookup.java" startline="104" endline="107">
public static synchronized Resolver getDefaultResolver () {
    return defaultResolver;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Lookup.java" startline="113" endline="116">
public static synchronized void setDefaultResolver (Resolver resolver) {
    defaultResolver = resolver;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Lookup.java" startline="124" endline="133">
public static synchronized Cache getDefaultCache (int dclass) {
    DClass.check (dclass);
    Cache c = (Cache) defaultCaches.get (Mnemonic.toInteger (dclass));
    if (c == null) {
        c = new Cache (dclass);
        defaultCaches.put (Mnemonic.toInteger (dclass), c);
    }
    return c;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Lookup.java" startline="141" endline="145">
public static synchronized void setDefaultCache (Cache cache, int dclass) {
    DClass.check (dclass);
    defaultCaches.put (Mnemonic.toInteger (dclass), cache);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Lookup.java" startline="151" endline="154">
public static synchronized Name [] getDefaultSearchPath () {
    return defaultSearchPath;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Lookup.java" startline="160" endline="163">
public static synchronized void setDefaultSearchPath (Name [] domains) {
    defaultSearchPath = domains;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Lookup.java" startline="170" endline="180">
public static synchronized void setDefaultSearchPath (String [] domains) throws TextParseException {
    if (domains == null) {
        defaultSearchPath = null;
        return;
    }
    Name [] newdomains = new Name [domains.length];
    for (int i = 0;
    i < domains.length; i ++) newdomains [i] = Name.fromString (domains [i], Name.root);

    defaultSearchPath = newdomains;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Lookup.java" startline="186" endline="190">
public static synchronized void setPacketLogger (PacketLogger logger) {
    Client.setPacketLogger (logger);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Lookup.java" startline="192" endline="211">
private final void reset () {
    iterations = 0;
    foundAlias = false;
    done = false;
    doneCurrent = false;
    aliases = null;
    answers = null;
    result = - 1;
    error = null;
    nxdomain = false;
    badresponse = false;
    badresponse_error = null;
    networkerror = false;
    timedout = false;
    nametoolong = false;
    referral = false;
    if (temporary_cache) cache.clearCache ();

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Lookup.java" startline="228" endline="246">
public Lookup (Name name, int type, int dclass) {
    Type.check (type);
    DClass.check (dclass);
    if (! Type.isRR (type) && type != Type.ANY) throw new IllegalArgumentException ("Cannot query for " + "meta-types other than ANY");

    this.name = name;
    this.type = type;
    this.dclass = dclass;
    synchronized (Lookup.class) {
        this.resolver = getDefaultResolver ();
        this.searchPath = getDefaultSearchPath ();
        this.cache = getDefaultCache (dclass);
    }
    this.credibility = Credibility.NORMAL;
    this.verbose = Options.check ("verbose");
    this.result = - 1;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Lookup.java" startline="256" endline="259">
public Lookup (Name name, int type) {
    this (name, type, DClass.IN);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Lookup.java" startline="267" endline="270">
public Lookup (Name name) {
    this (name, Type.A, DClass.IN);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Lookup.java" startline="282" endline="285">
public Lookup (String name, int type, int dclass) throws TextParseException {
    this (Name.fromString (name), type, dclass);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Lookup.java" startline="296" endline="299">
public Lookup (String name, int type) throws TextParseException {
    this (Name.fromString (name), type, DClass.IN);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Lookup.java" startline="308" endline="311">
public Lookup (String name) throws TextParseException {
    this (Name.fromString (name), Type.A, DClass.IN);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Lookup.java" startline="318" endline="321">
public void setResolver (Resolver resolver) {
    this.resolver = resolver;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Lookup.java" startline="328" endline="331">
public void setSearchPath (Name [] domains) {
    this.searchPath = domains;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Lookup.java" startline="339" endline="349">
public void setSearchPath (String [] domains) throws TextParseException {
    if (domains == null) {
        this.searchPath = null;
        return;
    }
    Name [] newdomains = new Name [domains.length];
    for (int i = 0;
    i < domains.length; i ++) newdomains [i] = Name.fromString (domains [i], Name.root);

    this.searchPath = newdomains;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Lookup.java" startline="357" endline="366">
public void setCache (Cache cache) {
    if (cache == null) {
        this.cache = new Cache (dclass);
        this.temporary_cache = true;
    } else {
        this.cache = cache;
        this.temporary_cache = false;
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Lookup.java" startline="376" endline="382">
public void setNdots (int ndots) {
    if (ndots < 0) throw new IllegalArgumentException ("Illegal ndots value: " + ndots);

    defaultNdots = ndots;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Lookup.java" startline="389" endline="392">
public void setCredibility (int credibility) {
    this.credibility = credibility;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Lookup.java" startline="394" endline="413">
private void follow (Name name, Name oldname) {
    foundAlias = true;
    badresponse = false;
    networkerror = false;
    timedout = false;
    nxdomain = false;
    referral = false;
    iterations ++;
    if (iterations >= 10 || name.equals (oldname)) {
        result = UNRECOVERABLE;
        error = "CNAME loop";
        done = true;
        return;
    }
    if (aliases == null) aliases = new ArrayList ();

    aliases.add (oldname);
    lookup (name);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Lookup.java" startline="415" endline="459">
private void processResponse (Name name, SetResponse response) {
    if (response.isSuccessful ()) {
        RRset [] rrsets = response.answers ();
        List l = new ArrayList ();
        Iterator it;
        int i;
        for (i = 0; i < rrsets.length; i ++) {
            it = rrsets [i].rrs ();
            while (it.hasNext ()) l.add (it.next ());

        }
        result = SUCCESSFUL;
        answers = (Record []) l.toArray (new Record [l.size ()]);
        done = true;
    } else if (response.isNXDOMAIN ()) {
        nxdomain = true;
        doneCurrent = true;
        if (iterations > 0) {
            result = HOST_NOT_FOUND;
            done = true;
        }
    } else if (response.isNXRRSET ()) {
        result = TYPE_NOT_FOUND;
        answers = null;
        done = true;
    } else if (response.isCNAME ()) {
        CNAMERecord cname = response.getCNAME ();
        follow (cname.getTarget (), name);
    } else if (response.isDNAME ()) {
        DNAMERecord dname = response.getDNAME ();
        try {
            follow (name.fromDNAME (dname), name);
        } catch (NameTooLongException e) {
            result = UNRECOVERABLE;
            error = "Invalid DNAME target";
            done = true;
        }
    } else if (response.isDelegation ()) {
        referral = true;
    }

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Lookup.java" startline="461" endline="512">
private void lookup (Name current) {
    SetResponse sr = cache.lookupRecords (current, type, credibility);
    if (verbose) {
        System.err.println ("lookup " + current + " " + Type.string (type));
        System.err.println (sr);
    }
    processResponse (current, sr);
    if (done || doneCurrent) return;

    Record question = Record.newRecord (current, type, dclass);
    Message query = Message.newQuery (question);
    Message response = null;
    try {
        response = resolver.send (query);
    } catch (IOException e) {
        if (e instanceof InterruptedIOException) timedout = true;
        else networkerror = true;

        return;
    }
    int rcode = response.getHeader ().getRcode ();
    if (rcode != Rcode.NOERROR && rcode != Rcode.NXDOMAIN) {
        badresponse = true;
        badresponse_error = Rcode.string (rcode);
        return;
    }
    if (! query.getQuestion ().equals (response.getQuestion ())) {
        badresponse = true;
        badresponse_error = "response does not match query";
        return;
    }
    sr = cache.addMessage (response);
    if (sr == null) sr = cache.lookupRecords (current, type, credibility);

    if (verbose) {
        System.err.println ("queried " + current + " " + Type.string (type));
        System.err.println (sr);
    }
    processResponse (current, sr);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Lookup.java" startline="514" endline="530">
private void resolve (Name current, Name suffix) {
    doneCurrent = false;
    Name tname = null;
    if (suffix == null) tname = current;
    else {
        try {
            tname = Name.concatenate (current, suffix);
        } catch (NameTooLongException e) {
            nametoolong = true;
            return;
        }
    }
    lookup (tname);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Lookup.java" startline="536" endline="585">
public Record [] run () {
    if (done) reset ();

    if (name.isAbsolute ()) resolve (name, null);
    else if (searchPath == null) resolve (name, Name.root);
    else {
        if (name.labels () > defaultNdots) resolve (name, Name.root);

        if (done) return answers;

        for (int i = 0;
        i < searchPath.length; i ++) {
            resolve (name, searchPath [i]);
            if (done) return answers;
            else if (foundAlias) break;

        }
    }

    if (! done) {
        if (badresponse) {
            result = TRY_AGAIN;
            error = badresponse_error;
            done = true;
        } else if (timedout) {
            result = TRY_AGAIN;
            error = "timed out";
            done = true;
        } else if (networkerror) {
            result = TRY_AGAIN;
            error = "network error";
            done = true;
        } else if (nxdomain) {
            result = HOST_NOT_FOUND;
            done = true;
        } else if (referral) {
            result = UNRECOVERABLE;
            error = "referral";
            done = true;
        } else if (nametoolong) {
            result = UNRECOVERABLE;
            error = "name too long";
            done = true;
        }

    }
    return answers;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Lookup.java" startline="587" endline="596">
private void checkDone () {
    if (done && result != - 1) return;

    StringBuffer sb = new StringBuffer ("Lookup of " + name + " ");
    if (dclass != DClass.IN) sb.append (DClass.string (dclass) + " ");

    sb.append (Type.string (type) + " isn't done");
    throw new IllegalStateException (sb.toString ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Lookup.java" startline="603" endline="607">
public Record [] getAnswers () {
    checkDone ();
    return answers;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Lookup.java" startline="616" endline="622">
public Name [] getAliases () {
    checkDone ();
    if (aliases == null) return noAliases;

    return (Name []) aliases.toArray (new Name [aliases.size ()]);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Lookup.java" startline="630" endline="634">
public int getResult () {
    checkDone ();
    return result;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Lookup.java" startline="642" endline="655">
public String getErrorString () {
    checkDone ();
    if (error != null) return error;

    switch (result) {
        case SUCCESSFUL :
            return "successful";
        case UNRECOVERABLE :
            return "unrecoverable error";
        case TRY_AGAIN :
            return "try again";
        case HOST_NOT_FOUND :
            return "host not found";
        case TYPE_NOT_FOUND :
            return "type not found";
    }
    throw new IllegalStateException ("unknown result");
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SingleNameBase.java" startline="20" endline="21">
protected SingleNameBase () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SingleNameBase.java" startline="23" endline="26">
protected SingleNameBase (Name name, int type, int dclass, long ttl) {
    super (name, type, dclass, ttl);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SingleNameBase.java" startline="28" endline="34">
protected SingleNameBase (Name name, int type, int dclass, long ttl, Name singleName, String description) {
    super (name, type, dclass, ttl);
    this.singleName = checkName (description, singleName);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SingleNameBase.java" startline="36" endline="39">
void rrFromWire (DNSInput in) throws IOException {
    singleName = new Name (in);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SingleNameBase.java" startline="41" endline="44">
void rdataFromString (Tokenizer st, Name origin) throws IOException {
    singleName = st.getName (origin);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SingleNameBase.java" startline="46" endline="49">
String rrToString () {
    return singleName.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SingleNameBase.java" startline="51" endline="54">
protected Name getSingleName () {
    return singleName;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SingleNameBase.java" startline="56" endline="59">
void rrToWire (DNSOutput out, Compression c, boolean canonical) {
    singleName.toWire (out, null, canonical);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSOutput.java" startline="22" endline="27">
public DNSOutput (int size) {
    array = new byte [size];
    pos = 0;
    saved_pos = - 1;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSOutput.java" startline="32" endline="35">
public DNSOutput () {
    this (32);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSOutput.java" startline="40" endline="43">
public int current () {
    return pos;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSOutput.java" startline="45" endline="53">
private void check (long val, int bits) {
    long max = 1;
    max <<= bits;
    if (val < 0 || val > max) {
        throw new IllegalArgumentException (val + " out of range for " + bits + " bit value");
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSOutput.java" startline="55" endline="67">
private void need (int n) {
    if (array.length - pos >= n) {
        return;
    }
    int newsize = array.length * 2;
    if (newsize < pos + n) {
        newsize = pos + n;
    }
    byte [] newarray = new byte [newsize];
    System.arraycopy (array, 0, newarray, 0, pos);
    array = newarray;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSOutput.java" startline="74" endline="81">
public void jump (int index) {
    if (index > pos) {
        throw new IllegalArgumentException ("cannot jump past " + "end of data");
    }
    pos = index;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSOutput.java" startline="87" endline="90">
public void save () {
    saved_pos = pos;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSOutput.java" startline="95" endline="102">
public void restore () {
    if (saved_pos < 0) {
        throw new IllegalStateException ("no previous state");
    }
    pos = saved_pos;
    saved_pos = - 1;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSOutput.java" startline="108" endline="113">
public void writeU8 (int val) {
    check (val, 8);
    need (1);
    array [pos ++] = (byte) (val & 0xFF);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSOutput.java" startline="119" endline="125">
public void writeU16 (int val) {
    check (val, 16);
    need (2);
    array [pos ++] = (byte) ((val>>> 8) & 0xFF);
    array [pos ++] = (byte) (val & 0xFF);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSOutput.java" startline="132" endline="140">
public void writeU16At (int val, int where) {
    check (val, 16);
    if (where > pos - 2) throw new IllegalArgumentException ("cannot write past " + "end of data");

    array [where ++] = (byte) ((val>>> 8) & 0xFF);
    array [where ++] = (byte) (val & 0xFF);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSOutput.java" startline="146" endline="154">
public void writeU32 (long val) {
    check (val, 32);
    need (4);
    array [pos ++] = (byte) ((val>>> 24) & 0xFF);
    array [pos ++] = (byte) ((val>>> 16) & 0xFF);
    array [pos ++] = (byte) ((val>>> 8) & 0xFF);
    array [pos ++] = (byte) (val & 0xFF);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSOutput.java" startline="162" endline="167">
public void writeByteArray (byte [] b, int off, int len) {
    need (len);
    System.arraycopy (b, off, array, pos, len);
    pos += len;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSOutput.java" startline="173" endline="176">
public void writeByteArray (byte [] b) {
    writeByteArray (b, 0, b.length);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSOutput.java" startline="183" endline="191">
public void writeCountedString (byte [] s) {
    if (s.length > 0xFF) {
        throw new IllegalArgumentException ("Invalid counted string");
    }
    need (1 + s.length);
    array [pos ++] = (byte) (s.length & 0xFF);
    writeByteArray (s, 0, s.length);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSOutput.java" startline="196" endline="201">
public byte [] toByteArray () {
    byte [] out = new byte [pos];
    System.arraycopy (array, 0, out, 0, pos);
    return out;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/IPSECKEYRecord.java" startline="20" endline="20">
private Algorithm () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/IPSECKEYRecord.java" startline="27" endline="27">
private Gateway () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/IPSECKEYRecord.java" startline="41" endline="41">
IPSECKEYRecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/IPSECKEYRecord.java" startline="43" endline="46">
Record getObject () {
    return new IPSECKEYRecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/IPSECKEYRecord.java" startline="56" endline="96">
public IPSECKEYRecord (Name name, int dclass, long ttl, int precedence, int gatewayType, int algorithmType, Object gateway, byte [] key) {
    super (name, Type.IPSECKEY, dclass, ttl);
    this.precedence = checkU8 ("precedence", precedence);
    this.gatewayType = checkU8 ("gatewayType", gatewayType);
    this.algorithmType = checkU8 ("algorithmType", algorithmType);
    switch (gatewayType) {
        case Gateway.None :
            this.gateway = null;
            break;
        case Gateway.IPv4 :
            if (! (gateway instanceof InetAddress)) throw new IllegalArgumentException ("\"gateway\" " + "must be an IPv4 " + "address");

            this.gateway = gateway;
            break;
        case Gateway.IPv6 :
            if (! (gateway instanceof Inet6Address)) throw new IllegalArgumentException ("\"gateway\" " + "must be an IPv6 " + "address");

            this.gateway = gateway;
            break;
        case Gateway.Name :
            if (! (gateway instanceof Name)) throw new IllegalArgumentException ("\"gateway\" " + "must be a DNS " + "name");

            this.gateway = checkName ("gateway", (Name) gateway);
            break;
        default :
            throw new IllegalArgumentException ("\"gatewayType\" " + "must be between 0 and 3");
    }
    this.key = key;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/IPSECKEYRecord.java" startline="98" endline="121">
void rrFromWire (DNSInput in) throws IOException {
    precedence = in.readU8 ();
    gatewayType = in.readU8 ();
    algorithmType = in.readU8 ();
    switch (gatewayType) {
        case Gateway.None :
            gateway = null;
            break;
        case Gateway.IPv4 :
            gateway = InetAddress.getByAddress (in.readByteArray (4));
            break;
        case Gateway.IPv6 :
            gateway = InetAddress.getByAddress (in.readByteArray (16));
            break;
        case Gateway.Name :
            gateway = new Name (in);
            break;
        default :
            throw new WireParseException ("invalid gateway type");
    }
    if (in.remaining () > 0) key = in.readByteArray ();

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/IPSECKEYRecord.java" startline="123" endline="148">
void rdataFromString (Tokenizer st, Name origin) throws IOException {
    precedence = st.getUInt8 ();
    gatewayType = st.getUInt8 ();
    algorithmType = st.getUInt8 ();
    switch (gatewayType) {
        case Gateway.None :
            String s = st.getString ();
            if (! s.equals (".")) throw new TextParseException ("invalid gateway format");

            gateway = null;
            break;
        case Gateway.IPv4 :
            gateway = st.getAddress (Address.IPv4);
            break;
        case Gateway.IPv6 :
            gateway = st.getAddress (Address.IPv6);
            break;
        case Gateway.Name :
            gateway = st.getName (origin);
            break;
        default :
            throw new WireParseException ("invalid gateway type");
    }
    key = st.getBase64 (false);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/IPSECKEYRecord.java" startline="150" endline="177">
String rrToString () {
    StringBuffer sb = new StringBuffer ();
    sb.append (precedence);
    sb.append (" ");
    sb.append (gatewayType);
    sb.append (" ");
    sb.append (algorithmType);
    sb.append (" ");
    switch (gatewayType) {
        case Gateway.None :
            sb.append (".");
            break;
        case Gateway.IPv4 :
        case Gateway.IPv6 :
            InetAddress gatewayAddr = (InetAddress) gateway;
            sb.append (gatewayAddr.getHostAddress ());
            break;
        case Gateway.Name :
            sb.append (gateway);
            break;
    }
    if (key != null) {
        sb.append (" ");
        sb.append (base64.toString (key));
    }
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/IPSECKEYRecord.java" startline="180" endline="183">
public int getPrecedence () {
    return precedence;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/IPSECKEYRecord.java" startline="186" endline="189">
public int getGatewayType () {
    return gatewayType;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/IPSECKEYRecord.java" startline="192" endline="195">
public int getAlgorithmType () {
    return algorithmType;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/IPSECKEYRecord.java" startline="198" endline="201">
public Object getGateway () {
    return gateway;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/IPSECKEYRecord.java" startline="204" endline="207">
public byte [] getKey () {
    return key;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/IPSECKEYRecord.java" startline="209" endline="229">
void rrToWire (DNSOutput out, Compression c, boolean canonical) {
    out.writeU8 (precedence);
    out.writeU8 (gatewayType);
    out.writeU8 (algorithmType);
    switch (gatewayType) {
        case Gateway.None :
            break;
        case Gateway.IPv4 :
        case Gateway.IPv6 :
            InetAddress gatewayAddr = (InetAddress) gateway;
            out.writeByteArray (gatewayAddr.getAddress ());
            break;
        case Gateway.Name :
            Name gatewayName = (Name) gateway;
            gatewayName.toWire (out, null, canonical);
            break;
    }
    if (key != null) out.writeByteArray (key);

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Master.java" startline="33" endline="41">
Master (File file, Name origin, long initialTTL) throws IOException {
    if (origin != null && ! origin.isAbsolute ()) {
        throw new RelativeNameException (origin);
    }
    this.file = file;
    st = new Tokenizer (file);
    this.origin = origin;
    defaultTTL = initialTTL;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Master.java" startline="50" endline="53">
public Master (String filename, Name origin, long ttl) throws IOException {
    this (new File (filename), origin, ttl);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Master.java" startline="61" endline="64">
public Master (String filename, Name origin) throws IOException {
    this (new File (filename), origin, - 1);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Master.java" startline="71" endline="74">
public Master (String filename) throws IOException {
    this (new File (filename), null, - 1);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Master.java" startline="82" endline="90">
public Master (InputStream in, Name origin, long ttl) {
    if (origin != null && ! origin.isAbsolute ()) {
        throw new RelativeNameException (origin);
    }
    st = new Tokenizer (in);
    this.origin = origin;
    defaultTTL = ttl;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Master.java" startline="97" endline="100">
public Master (InputStream in, Name origin) {
    this (in, origin, - 1);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Master.java" startline="106" endline="109">
public Master (InputStream in) {
    this (in, null, - 1);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Master.java" startline="111" endline="119">
private Name parseName (String s, Name origin) throws TextParseException {
    try {
        return Name.fromString (s, origin);
    } catch (TextParseException e) {
        throw st.exception (e.getMessage ());
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Master.java" startline="121" endline="172">
private void parseTTLClassAndType () throws IOException {
    String s;
    boolean seen_class = false;
    seen_class = false;
    s = st.getString ();
    if ((currentDClass = DClass.value (s)) >= 0) {
        s = st.getString ();
        seen_class = true;
    }
    currentTTL = - 1;
    try {
        currentTTL = TTL.parseTTL (s);
        s = st.getString ();
    } catch (NumberFormatException e) {
        if (defaultTTL >= 0) currentTTL = defaultTTL;
        else if (last != null) currentTTL = last.getTTL ();

    }
    if (! seen_class) {
        if ((currentDClass = DClass.value (s)) >= 0) {
            s = st.getString ();
        } else {
            currentDClass = DClass.IN;
        }
    }
    if ((currentType = Type.value (s)) < 0) throw st.exception ("Invalid type '" + s + "'");

    if (currentTTL < 0) {
        if (currentType != Type.SOA) throw st.exception ("missing TTL");

        needSOATTL = true;
        currentTTL = 0;
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Master.java" startline="174" endline="187">
private long parseUInt32 (String s) {
    if (! Character.isDigit (s.charAt (0))) return - 1;

    try {
        long l = Long.parseLong (s);
        if (l < 0 || l > 0xFFFFFFFFL) return - 1;

        return l;
    } catch (NumberFormatException e) {
        return - 1;
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Master.java" startline="189" endline="242">
private void startGenerate () throws IOException {
    String s;
    int n;
    s = st.getIdentifier ();
    n = s.indexOf ("-");
    if (n < 0) throw st.exception ("Invalid $GENERATE range specifier: " + s);

    String startstr = s.substring (0, n);
    String endstr = s.substring (n + 1);
    String stepstr = null;
    n = endstr.indexOf ("/");
    if (n >= 0) {
        stepstr = endstr.substring (n + 1);
        endstr = endstr.substring (0, n);
    }
    long start = parseUInt32 (startstr);
    long end = parseUInt32 (endstr);
    long step;
    if (stepstr != null) step = parseUInt32 (stepstr);
    else step = 1;

    if (start < 0 || end < 0 || start > end || step <= 0) throw st.exception ("Invalid $GENERATE range specifier: " + s);

    String nameSpec = st.getIdentifier ();
    parseTTLClassAndType ();
    if (! Generator.supportedType (currentType)) throw st.exception ("$GENERATE does not support " + Type.string (currentType) + " records");

    String rdataSpec = st.getIdentifier ();
    st.getEOL ();
    st.unget ();
    generator = new Generator (start, end, step, nameSpec, currentType, currentDClass, currentTTL, rdataSpec, origin);
    if (generators == null) generators = new ArrayList (1);

    generators.add (generator);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Master.java" startline="244" endline="250">
private void endGenerate () throws IOException {
    st.getEOL ();
    generator = null;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Master.java" startline="252" endline="263">
private Record nextGenerated () throws IOException {
    try {
        return generator.nextRecord ();
    } catch (Tokenizer.TokenizerException e) {
        throw st.exception ("Parsing $GENERATE: " + e.getBaseMessage ());
    } catch (TextParseException e) {
        throw st.exception ("Parsing $GENERATE: " + e.getMessage ());
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Master.java" startline="272" endline="375">
public Record _nextRecord () throws IOException {
    Tokenizer.Token token;
    String s;
    if (included != null) {
        Record rec = included.nextRecord ();
        if (rec != null) return rec;

        included = null;
    }
    if (generator != null) {
        Record rec = nextGenerated ();
        if (rec != null) return rec;

        endGenerate ();
    }
    while (true) {
        Name name;
        token = st.get (true, false);
        if (token.type == Tokenizer.WHITESPACE) {
            Tokenizer.Token next = st.get ();
            if (next.type == Tokenizer.EOL) continue;
            else if (next.type == Tokenizer.EOF) return null;
            else st.unget ();

            if (last == null) throw st.exception ("no owner");

            name = last.getName ();
        } else if (token.type == Tokenizer.EOL) continue;
        else if (token.type == Tokenizer.EOF) return null;
        else if (((String) token.value).charAt (0) == '$') {
            s = token.value;
            if (s.equalsIgnoreCase ("$ORIGIN")) {
                origin = st.getName (Name.root);
                st.getEOL ();
                continue;
            } else if (s.equalsIgnoreCase ("$TTL")) {
                defaultTTL = st.getTTL ();
                st.getEOL ();
                continue;
            } else if (s.equalsIgnoreCase ("$INCLUDE")) {
                String filename = st.getString ();
                File newfile;
                if (file != null) {
                    String parent = file.getParent ();
                    newfile = new File (parent, filename);
                } else {
                    newfile = new File (filename);
                }
                Name incorigin = origin;
                token = st.get ();
                if (token.isString ()) {
                    incorigin = parseName (token.value, Name.root);
                    st.getEOL ();
                }
                included = new Master (newfile, incorigin, defaultTTL);
                return nextRecord ();
            } else if (s.equalsIgnoreCase ("$GENERATE")) {
                if (generator != null) throw new IllegalStateException ("cannot nest $GENERATE");

                startGenerate ();
                if (noExpandGenerate) {
                    endGenerate ();
                    continue;
                }
                return nextGenerated ();
            } else {
                throw st.exception ("Invalid directive: " + s);
            }

        } else {
            s = token.value;
            name = parseName (s, origin);
            if (last != null && name.equals (last.getName ())) {
                name = last.getName ();
            }
        }

        parseTTLClassAndType ();
        last = Record.fromString (name, currentType, currentDClass, currentTTL, st, origin);
        if (needSOATTL) {
            long ttl = ((SOARecord) last).getMinimum ();
            last.setTTL (ttl);
            defaultTTL = ttl;
            needSOATTL = false;
        }
        return last;
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Master.java" startline="384" endline="396">
public Record nextRecord () throws IOException {
    Record rec = null;
    try {
        rec = _nextRecord ();
    } finally {
        if (rec == null) {
            st.close ();
        }
    }
    return rec;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Master.java" startline="404" endline="407">
public void expandGenerate (boolean wantExpand) {
    noExpandGenerate = ! wantExpand;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Master.java" startline="414" endline="420">
public Iterator generators () {
    if (generators != null) return Collections.unmodifiableList (generators).iterator ();
    else return Collections.EMPTY_LIST.iterator ();

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Master.java" startline="422" endline="426">
protected void finalize () {
    if (st != null) st.close ();

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSKEYRecord.java" startline="20" endline="20">
private Protocol () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSKEYRecord.java" startline="27" endline="27">
private Flags () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSKEYRecord.java" startline="41" endline="41">
DNSKEYRecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSKEYRecord.java" startline="43" endline="46">
Record getObject () {
    return new DNSKEYRecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSKEYRecord.java" startline="55" endline="60">
public DNSKEYRecord (Name name, int dclass, long ttl, int flags, int proto, int alg, byte [] key) {
    super (name, Type.DNSKEY, dclass, ttl, flags, proto, alg, key);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSKEYRecord.java" startline="71" endline="78">
public DNSKEYRecord (Name name, int dclass, long ttl, int flags, int proto, int alg, PublicKey key) throws DNSSEC.DNSSECException {
    super (name, Type.DNSKEY, dclass, ttl, flags, proto, alg, DNSSEC.fromPublicKey (key, alg));
    publicKey = key;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/DNSKEYRecord.java" startline="80" endline="89">
void rdataFromString (Tokenizer st, Name origin) throws IOException {
    flags = st.getUInt16 ();
    proto = st.getUInt8 ();
    String algString = st.getString ();
    alg = DNSSEC.Algorithm.value (algString);
    if (alg < 0) throw st.exception ("Invalid algorithm: " + algString);

    key = st.getBase64 ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/AFSDBRecord.java" startline="17" endline="17">
AFSDBRecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/AFSDBRecord.java" startline="19" endline="22">
Record getObject () {
    return new AFSDBRecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/AFSDBRecord.java" startline="29" endline="32">
public AFSDBRecord (Name name, int dclass, long ttl, int subtype, Name host) {
    super (name, Type.AFSDB, dclass, ttl, subtype, "subtype", host, "host");
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/AFSDBRecord.java" startline="35" endline="38">
public int getSubtype () {
    return getU16Field ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/AFSDBRecord.java" startline="41" endline="44">
public Name getHost () {
    return getNameField ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Message.java" startline="57" endline="61">
private Message (Header header) {
    sections = new List [4];
    this.header = header;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Message.java" startline="64" endline="67">
public Message (int id) {
    this (new Header (id));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Message.java" startline="70" endline="73">
public Message () {
    this (new Header ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Message.java" startline="80" endline="87">
public static Message newQuery (Record r) {
    Message m = new Message ();
    m.header.setOpcode (Opcode.QUERY);
    m.header.setFlag (Flags.RD);
    m.addRecord (r, Section.QUESTION);
    return m;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Message.java" startline="94" endline="97">
public static Message newUpdate (Name zone) {
    return new Update (zone);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Message.java" startline="99" endline="128">
Message (DNSInput in) throws IOException {
    this (new Header (in));
    boolean isUpdate = (header.getOpcode () == Opcode.UPDATE);
    boolean truncated = header.getFlag (Flags.TC);
    try {
        for (int i = 0;
        i < 4; i ++) {
            int count = header.getCount (i);
            if (count > 0) sections [i] = new ArrayList (count);

            for (int j = 0;
            j < count; j ++) {
                int pos = in.current ();
                Record rec = Record.fromWire (in, i, isUpdate);
                sections [i].add (rec);
                if (i == Section.ADDITIONAL) {
                    if (rec.getType () == Type.TSIG) tsigstart = pos;

                    if (rec.getType () == Type.SIG) {
                        SIGRecord sig = (SIGRecord) rec;
                        if (sig.getTypeCovered () == 0) sig0start = pos;

                    }
                }
            }
        }
    } catch (WireParseException e) {
        if (! truncated) throw e;

    }
    size = in.current ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Message.java" startline="134" endline="137">
public Message (byte [] b) throws IOException {
    this (new DNSInput (b));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Message.java" startline="143" endline="146">
public Message (ByteBuffer byteBuffer) throws IOException {
    this (new DNSInput (byteBuffer));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Message.java" startline="152" endline="155">
public void setHeader (Header h) {
    header = h;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Message.java" startline="161" endline="164">
public Header getHeader () {
    return header;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Message.java" startline="171" endline="177">
public void addRecord (Record r, int section) {
    if (sections [section] == null) sections [section] = new LinkedList ();

    header.incCount (section);
    sections [section].add (r);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Message.java" startline="184" endline="192">
public boolean removeRecord (Record r, int section) {
    if (sections [section] != null && sections [section].remove (r)) {
        header.decCount (section);
        return true;
    } else return false;

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Message.java" startline="199" endline="203">
public void removeAllRecords (int section) {
    sections [section] = null;
    header.setCount (section, 0);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Message.java" startline="210" endline="213">
public boolean findRecord (Record r, int section) {
    return (sections [section] != null && sections [section].contains (r));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Message.java" startline="220" endline="226">
public boolean findRecord (Record r) {
    for (int i = Section.ANSWER;
    i <= Section.ADDITIONAL; i ++) if (sections [i] != null && sections [i].contains (r)) return true;

    return false;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Message.java" startline="234" endline="244">
public boolean findRRset (Name name, int type, int section) {
    if (sections [section] == null) return false;

    for (int i = 0;
    i < sections [section].size (); i ++) {
        Record r = (Record) sections [section].get (i);
        if (r.getType () == type && name.equals (r.getName ())) return true;

    }
    return false;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Message.java" startline="252" endline="257">
public boolean findRRset (Name name, int type) {
    return (findRRset (name, type, Section.ANSWER) || findRRset (name, type, Section.AUTHORITY) || findRRset (name, type, Section.ADDITIONAL));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Message.java" startline="264" endline="270">
public Record getQuestion () {
    List l = sections [Section.QUESTION];
    if (l == null || l.size () == 0) return null;

    return (Record) l.get (0);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Message.java" startline="278" endline="288">
public TSIGRecord getTSIG () {
    int count = header.getCount (Section.ADDITIONAL);
    if (count == 0) return null;

    List l = sections [Section.ADDITIONAL];
    Record rec = (Record) l.get (count - 1);
    if (rec.type != Type.TSIG) return null;

    return (TSIGRecord) rec;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Message.java" startline="294" endline="299">
public boolean isSigned () {
    return (tsigState == TSIG_SIGNED || tsigState == TSIG_VERIFIED || tsigState == TSIG_FAILED);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Message.java" startline="305" endline="308">
public boolean isVerified () {
    return (tsigState == TSIG_VERIFIED);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Message.java" startline="315" endline="322">
public OPTRecord getOPT () {
    Record [] additional = getSectionArray (Section.ADDITIONAL);
    for (int i = 0;
    i < additional.length; i ++) if (additional [i] instanceof OPTRecord) return (OPTRecord) additional [i];

    return null;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Message.java" startline="328" endline="335">
public int getRcode () {
    int rcode = header.getRcode ();
    OPTRecord opt = getOPT ();
    if (opt != null) rcode += (opt.getExtendedRcode () << 4);

    return rcode;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Message.java" startline="343" endline="349">
public Record [] getSectionArray (int section) {
    if (sections [section] == null) return emptyRecordArray;

    List l = sections [section];
    return (Record []) l.toArray (new Record [l.size ()]);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Message.java" startline="351" endline="356">
private static boolean sameSet (Record r1, Record r2) {
    return (r1.getRRsetType () == r2.getRRsetType () && r1.getDClass () == r2.getDClass () && r1.getName ().equals (r2.getName ()));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Message.java" startline="364" endline="394">
public RRset [] getSectionRRsets (int section) {
    if (sections [section] == null) return emptyRRsetArray;

    List sets = new LinkedList ();
    Record [] recs = getSectionArray (section);
    Set hash = new HashSet ();
    for (int i = 0;
    i < recs.length; i ++) {
        Name name = recs [i].getName ();
        boolean newset = true;
        if (hash.contains (name)) {
            for (int j = sets.size () - 1;
            j >= 0; j --) {
                RRset set = (RRset) sets.get (j);
                if (set.getType () == recs [i].getRRsetType () && set.getDClass () == recs [i].getDClass () && set.getName ().equals (name)) {
                    set.addRR (recs [i]);
                    newset = false;
                    break;
                }
            }
        }
        if (newset) {
            RRset set = new RRset (recs [i]);
            sets.add (set);
            hash.add (name);
        }
    }
    return (RRset []) sets.toArray (new RRset [sets.size ()]);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Message.java" startline="396" endline="408">
void toWire (DNSOutput out) {
    header.toWire (out);
    Compression c = new Compression ();
    for (int i = 0;
    i < 4; i ++) {
        if (sections [i] == null) continue;

        for (int j = 0;
        j < sections [i].size (); j ++) {
            Record rec = (Record) sections [i].get (j);
            rec.toWire (out, i, c);
        }
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Message.java" startline="411" endline="440">
private int sectionToWire (DNSOutput out, int section, Compression c, int maxLength) {
    int n = sections [section].size ();
    int pos = out.current ();
    int rendered = 0;
    int skipped = 0;
    Record lastrec = null;
    for (int i = 0;
    i < n; i ++) {
        Record rec = (Record) sections [section].get (i);
        if (section == Section.ADDITIONAL && rec instanceof OPTRecord) {
            skipped ++;
            continue;
        }
        if (lastrec != null && ! sameSet (rec, lastrec)) {
            pos = out.current ();
            rendered = i;
        }
        lastrec = rec;
        rec.toWire (out, section, c);
        if (out.current () > maxLength) {
            out.jump (pos);
            return n - rendered + skipped;
        }
    }
    return skipped;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Message.java" startline="443" endline="503">
private boolean toWire (DNSOutput out, int maxLength) {
    if (maxLength < Header.LENGTH) return false;

    Header newheader = null;
    int tempMaxLength = maxLength;
    if (tsigkey != null) tempMaxLength -= tsigkey.recordLength ();

    OPTRecord opt = getOPT ();
    byte [] optBytes = null;
    if (opt != null) {
        optBytes = opt.toWire (Section.ADDITIONAL);
        tempMaxLength -= optBytes.length;
    }
    int startpos = out.current ();
    header.toWire (out);
    Compression c = new Compression ();
    int flags = header.getFlagsByte ();
    int additionalCount = 0;
    for (int i = 0;
    i < 4; i ++) {
        int skipped;
        if (sections [i] == null) continue;

        skipped = sectionToWire (out, i, c, tempMaxLength);
        if (skipped != 0 && i != Section.ADDITIONAL) {
            flags = Header.setFlag (flags, Flags.TC, true);
            out.writeU16At (header.getCount (i) - skipped, startpos + 4 + 2 * i);
            for (int j = i + 1;
            j < Section.ADDITIONAL; j ++) out.writeU16At (0, startpos + 4 + 2 * j);

            break;
        }
        if (i == Section.ADDITIONAL) additionalCount = header.getCount (i) - skipped;

    }
    if (optBytes != null) {
        out.writeByteArray (optBytes);
        additionalCount ++;
    }
    if (flags != header.getFlagsByte ()) out.writeU16At (flags, startpos + 2);

    if (additionalCount != header.getCount (Section.ADDITIONAL)) out.writeU16At (additionalCount, startpos + 10);

    if (tsigkey != null) {
        TSIGRecord tsigrec = tsigkey.generate (this, out.toByteArray (), tsigerror, querytsig);
        tsigrec.toWire (out, Section.ADDITIONAL, c);
        out.writeU16At (additionalCount + 1, startpos + 10);
    }
    return true;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Message.java" startline="508" endline="514">
public byte [] toWire () {
    DNSOutput out = new DNSOutput ();
    toWire (out);
    size = out.current ();
    return out.toByteArray ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Message.java" startline="529" endline="535">
public byte [] toWire (int maxLength) {
    DNSOutput out = new DNSOutput ();
    toWire (out, maxLength);
    size = out.current ();
    return out.toByteArray ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Message.java" startline="543" endline="548">
public void setTSIG (TSIG key, int error, TSIGRecord querytsig) {
    this.tsigkey = key;
    this.tsigerror = error;
    this.querytsig = querytsig;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Message.java" startline="554" endline="557">
public int numBytes () {
    return size;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Message.java" startline="563" endline="583">
public String sectionToString (int i) {
    if (i > 3) return null;

    StringBuffer sb = new StringBuffer ();
    Record [] records = getSectionArray (i);
    for (int j = 0;
    j < records.length; j ++) {
        Record rec = records [j];
        if (i == Section.QUESTION) {
            sb.append (";;\t" + rec.name);
            sb.append (", type = " + Type.string (rec.type));
            sb.append (", class = " + DClass.string (rec.dclass));
        } else sb.append (rec);

        sb.append ("\n");
    }
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Message.java" startline="588" endline="613">
public String toString () {
    StringBuffer sb = new StringBuffer ();
    OPTRecord opt = getOPT ();
    if (opt != null) sb.append (header.toStringWithRcode (getRcode ()) + "\n");
    else sb.append (header + "\n");

    if (isSigned ()) {
        sb.append (";; TSIG ");
        if (isVerified ()) sb.append ("ok");
        else sb.append ("invalid");

        sb.append ('\n');
    }
    for (int i = 0;
    i < 4; i ++) {
        if (header.getOpcode () != Opcode.UPDATE) sb.append (";; " + Section.longString (i) + ":\n");
        else sb.append (";; " + Section.updString (i) + ":\n");

        sb.append (sectionToString (i) + "\n");
    }
    sb.append (";; Message size: " + numBytes () + " bytes");
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Message.java" startline="622" endline="632">
public Object clone () {
    Message m = new Message ();
    for (int i = 0;
    i < sections.length; i ++) {
        if (sections [i] != null) m.sections [i] = new LinkedList (sections [i]);

    }
    m.header = (Header) header.clone ();
    m.size = size;
    return m;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/KEYBase.java" startline="25" endline="26">
protected KEYBase () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/KEYBase.java" startline="28" endline="37">
public KEYBase (Name name, int type, int dclass, long ttl, int flags, int proto, int alg, byte [] key) {
    super (name, type, dclass, ttl);
    this.flags = checkU16 ("flags", flags);
    this.proto = checkU8 ("proto", proto);
    this.alg = checkU8 ("alg", alg);
    this.key = key;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/KEYBase.java" startline="39" endline="46">
void rrFromWire (DNSInput in) throws IOException {
    flags = in.readU16 ();
    proto = in.readU8 ();
    alg = in.readU8 ();
    if (in.remaining () > 0) key = in.readByteArray ();

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/KEYBase.java" startline="49" endline="69">
String rrToString () {
    StringBuffer sb = new StringBuffer ();
    sb.append (flags);
    sb.append (" ");
    sb.append (proto);
    sb.append (" ");
    sb.append (alg);
    if (key != null) {
        if (Options.check ("multiline")) {
            sb.append (" (\n");
            sb.append (base64.formatString (key, 64, "\t", true));
            sb.append (" ; key_tag = ");
            sb.append (getFootprint ());
        } else {
            sb.append (" ");
            sb.append (base64.toString (key));
        }
    }
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/KEYBase.java" startline="74" endline="77">
public int getFlags () {
    return flags;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/KEYBase.java" startline="82" endline="85">
public int getProtocol () {
    return proto;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/KEYBase.java" startline="90" endline="93">
public int getAlgorithm () {
    return alg;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/KEYBase.java" startline="98" endline="101">
public byte [] getKey () {
    return key;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/KEYBase.java" startline="106" endline="137">
public int getFootprint () {
    if (footprint >= 0) return footprint;

    int foot = 0;
    DNSOutput out = new DNSOutput ();
    rrToWire (out, null, false);
    byte [] rdata = out.toByteArray ();
    if (alg == DNSSEC.Algorithm.RSAMD5) {
        int d1 = rdata [rdata.length - 3] & 0xFF;
        int d2 = rdata [rdata.length - 2] & 0xFF;
        foot = (d1 << 8) + d2;
    } else {
        int i;
        for (i = 0; i < rdata.length - 1; i += 2) {
            int d1 = rdata [i] & 0xFF;
            int d2 = rdata [i + 1] & 0xFF;
            foot += ((d1 << 8) + d2);
        }
        if (i < rdata.length) {
            int d1 = rdata [i] & 0xFF;
            foot += (d1 << 8);
        }
        foot += ((foot>> 16) & 0xFFFF);
    }
    footprint = (foot & 0xFFFF);
    return footprint;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/KEYBase.java" startline="143" endline="150">
public PublicKey getPublicKey () throws DNSSEC.DNSSECException {
    if (publicKey != null) return publicKey;

    publicKey = DNSSEC.toPublicKey (this);
    return publicKey;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/KEYBase.java" startline="152" endline="159">
void rrToWire (DNSOutput out, Compression c, boolean canonical) {
    out.writeU16 (flags);
    out.writeU8 (proto);
    out.writeU8 (alg);
    if (key != null) out.writeByteArray (key);

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TKEYRecord.java" startline="43" endline="43">
TKEYRecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TKEYRecord.java" startline="45" endline="48">
Record getObject () {
    return new TKEYRecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TKEYRecord.java" startline="63" endline="76">
public TKEYRecord (Name name, int dclass, long ttl, Name alg, Date timeInception, Date timeExpire, int mode, int error, byte [] key, byte other []) {
    super (name, Type.TKEY, dclass, ttl);
    this.alg = checkName ("alg", alg);
    this.timeInception = timeInception;
    this.timeExpire = timeExpire;
    this.mode = checkU16 ("mode", mode);
    this.error = checkU16 ("error", error);
    this.key = key;
    this.other = other;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TKEYRecord.java" startline="78" endline="97">
void rrFromWire (DNSInput in) throws IOException {
    alg = new Name (in);
    timeInception = new Date (1000 * in.readU32 ());
    timeExpire = new Date (1000 * in.readU32 ());
    mode = in.readU16 ();
    error = in.readU16 ();
    int keylen = in.readU16 ();
    if (keylen > 0) key = in.readByteArray (keylen);
    else key = null;

    int otherlen = in.readU16 ();
    if (otherlen > 0) other = in.readByteArray (otherlen);
    else other = null;

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TKEYRecord.java" startline="99" endline="102">
void rdataFromString (Tokenizer st, Name origin) throws IOException {
    throw st.exception ("no text format defined for TKEY");
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TKEYRecord.java" startline="104" endline="114">
protected String modeString () {
    switch (mode) {
        case SERVERASSIGNED :
            return "SERVERASSIGNED";
        case DIFFIEHELLMAN :
            return "DIFFIEHELLMAN";
        case GSSAPI :
            return "GSSAPI";
        case RESOLVERASSIGNED :
            return "RESOLVERASSIGNED";
        case DELETE :
            return "DELETE";
        default :
            return Integer.toString (mode);
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TKEYRecord.java" startline="117" endline="150">
String rrToString () {
    StringBuffer sb = new StringBuffer ();
    sb.append (alg);
    sb.append (" ");
    if (Options.check ("multiline")) sb.append ("(\n\t");

    sb.append (FormattedTime.format (timeInception));
    sb.append (" ");
    sb.append (FormattedTime.format (timeExpire));
    sb.append (" ");
    sb.append (modeString ());
    sb.append (" ");
    sb.append (Rcode.TSIGstring (error));
    if (Options.check ("multiline")) {
        sb.append ("\n");
        if (key != null) {
            sb.append (base64.formatString (key, 64, "\t", false));
            sb.append ("\n");
        }
        if (other != null) sb.append (base64.formatString (other, 64, "\t", false));

        sb.append (" )");
    } else {
        sb.append (" ");
        if (key != null) {
            sb.append (base64.toString (key));
            sb.append (" ");
        }
        if (other != null) sb.append (base64.toString (other));

    }
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TKEYRecord.java" startline="153" endline="156">
public Name getAlgorithm () {
    return alg;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TKEYRecord.java" startline="162" endline="165">
public Date getTimeInception () {
    return timeInception;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TKEYRecord.java" startline="171" endline="174">
public Date getTimeExpire () {
    return timeExpire;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TKEYRecord.java" startline="177" endline="180">
public int getMode () {
    return mode;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TKEYRecord.java" startline="183" endline="186">
public int getError () {
    return error;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TKEYRecord.java" startline="189" endline="192">
public byte [] getKey () {
    return key;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TKEYRecord.java" startline="195" endline="198">
public byte [] getOther () {
    return other;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TKEYRecord.java" startline="200" endline="223">
void rrToWire (DNSOutput out, Compression c, boolean canonical) {
    alg.toWire (out, null, canonical);
    out.writeU32 (timeInception.getTime () / 1000);
    out.writeU32 (timeExpire.getTime () / 1000);
    out.writeU16 (mode);
    out.writeU16 (error);
    if (key != null) {
        out.writeU16 (key.length);
        out.writeByteArray (key);
    } else out.writeU16 (0);

    if (other != null) {
        out.writeU16 (other.length);
        out.writeByteArray (other);
    } else out.writeU16 (0);

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/CERTRecord.java" startline="21" endline="21">
private CertificateType () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/CERTRecord.java" startline="75" endline="78">
public static String string (int type) {
    return types.getText (type);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/CERTRecord.java" startline="86" endline="89">
public static int value (String s) {
    return types.getValue (s);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/CERTRecord.java" startline="113" endline="113">
CERTRecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/CERTRecord.java" startline="115" endline="118">
Record getObject () {
    return new CERTRecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/CERTRecord.java" startline="127" endline="136">
public CERTRecord (Name name, int dclass, long ttl, int certType, int keyTag, int alg, byte [] cert) {
    super (name, Type.CERT, dclass, ttl);
    this.certType = checkU16 ("certType", certType);
    this.keyTag = checkU16 ("keyTag", keyTag);
    this.alg = checkU8 ("alg", alg);
    this.cert = cert;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/CERTRecord.java" startline="138" endline="144">
void rrFromWire (DNSInput in) throws IOException {
    certType = in.readU16 ();
    keyTag = in.readU16 ();
    alg = in.readU8 ();
    cert = in.readByteArray ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/CERTRecord.java" startline="146" endline="159">
void rdataFromString (Tokenizer st, Name origin) throws IOException {
    String certTypeString = st.getString ();
    certType = CertificateType.value (certTypeString);
    if (certType < 0) throw st.exception ("Invalid certificate type: " + certTypeString);

    keyTag = st.getUInt16 ();
    String algString = st.getString ();
    alg = DNSSEC.Algorithm.value (algString);
    if (alg < 0) throw st.exception ("Invalid algorithm: " + algString);

    cert = st.getBase64 ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/CERTRecord.java" startline="164" endline="182">
String rrToString () {
    StringBuffer sb = new StringBuffer ();
    sb.append (certType);
    sb.append (" ");
    sb.append (keyTag);
    sb.append (" ");
    sb.append (alg);
    if (cert != null) {
        if (Options.check ("multiline")) {
            sb.append (" (\n");
            sb.append (base64.formatString (cert, 64, "\t", true));
        } else {
            sb.append (" ");
            sb.append (base64.toString (cert));
        }
    }
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/CERTRecord.java" startline="187" endline="190">
public int getCertType () {
    return certType;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/CERTRecord.java" startline="195" endline="198">
public int getKeyTag () {
    return keyTag;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/CERTRecord.java" startline="203" endline="206">
public int getAlgorithm () {
    return alg;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/CERTRecord.java" startline="211" endline="214">
public byte [] getCert () {
    return cert;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/CERTRecord.java" startline="216" endline="222">
void rrToWire (DNSOutput out, Compression c, boolean canonical) {
    out.writeU16 (certType);
    out.writeU16 (keyTag);
    out.writeU8 (alg);
    out.writeByteArray (cert);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NameTooLongException.java" startline="14" endline="17">
public NameTooLongException () {
    super ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NameTooLongException.java" startline="19" endline="22">
public NameTooLongException (String s) {
    super (s);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TXTRecord.java" startline="17" endline="17">
TXTRecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TXTRecord.java" startline="19" endline="22">
Record getObject () {
    return new TXTRecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TXTRecord.java" startline="29" endline="32">
public TXTRecord (Name name, int dclass, long ttl, List strings) {
    super (name, Type.TXT, dclass, ttl, strings);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TXTRecord.java" startline="39" endline="42">
public TXTRecord (Name name, int dclass, long ttl, String string) {
    super (name, Type.TXT, dclass, ttl, string);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ReverseMap.java" startline="21" endline="22">
private ReverseMap () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ReverseMap.java" startline="30" endline="65">
public static Name fromAddress (byte [] addr) {
    if (addr.length != 4 && addr.length != 16) throw new IllegalArgumentException ("array must contain " + "4 or 16 elements");

    StringBuffer sb = new StringBuffer ();
    if (addr.length == 4) {
        for (int i = addr.length - 1;
        i >= 0; i --) {
            sb.append (addr [i] & 0xFF);
            if (i > 0) sb.append (".");

        }
    } else {
        int [] nibbles = new int [2];
        for (int i = addr.length - 1;
        i >= 0; i --) {
            nibbles [0] = (addr [i] & 0xFF)>> 4;
            nibbles [1] = (addr [i] & 0xFF) & 0xF;
            for (int j = nibbles.length - 1;
            j >= 0; j --) {
                sb.append (Integer.toHexString (nibbles [j]));
                if (i > 0 || j > 0) sb.append (".");

            }
        }
    }
    try {
        if (addr.length == 4) return Name.fromString (sb.toString (), inaddr4);
        else return Name.fromString (sb.toString (), inaddr6);

    } catch (TextParseException e) {
        throw new IllegalStateException ("name cannot be invalid");
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ReverseMap.java" startline="74" endline="85">
public static Name fromAddress (int [] addr) {
    byte [] bytes = new byte [addr.length];
    for (int i = 0;
    i < addr.length; i ++) {
        if (addr [i] < 0 || addr [i] > 0xFF) throw new IllegalArgumentException ("array must " + "contain values " + "between 0 and 255");

        bytes [i] = (byte) addr [i];
    }
    return fromAddress (bytes);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ReverseMap.java" startline="93" endline="96">
public static Name fromAddress (InetAddress addr) {
    return fromAddress (addr.getAddress ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ReverseMap.java" startline="105" endline="111">
public static Name fromAddress (String addr, int family) throws UnknownHostException {
    byte [] array = Address.toByteArray (addr, family);
    if (array == null) throw new UnknownHostException ("Invalid IP address");

    return fromAddress (array);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ReverseMap.java" startline="120" endline="128">
public static Name fromAddress (String addr) throws UnknownHostException {
    byte [] array = Address.toByteArray (addr, Address.IPv4);
    if (array == null) array = Address.toByteArray (addr, Address.IPv6);

    if (array == null) throw new UnknownHostException ("Invalid IP address");

    return fromAddress (array);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SIGBase.java" startline="27" endline="28">
protected SIGBase () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SIGBase.java" startline="30" endline="49">
public SIGBase (Name name, int type, int dclass, long ttl, int covered, int alg, long origttl, Date expire, Date timeSigned, int footprint, Name signer, byte [] signature) {
    super (name, type, dclass, ttl);
    Type.check (covered);
    TTL.check (origttl);
    this.covered = covered;
    this.alg = checkU8 ("alg", alg);
    this.labels = name.labels () - 1;
    if (name.isWild ()) this.labels --;

    this.origttl = origttl;
    this.expire = expire;
    this.timeSigned = timeSigned;
    this.footprint = checkU16 ("footprint", footprint);
    this.signer = checkName ("signer", signer);
    this.signature = signature;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SIGBase.java" startline="51" endline="62">
void rrFromWire (DNSInput in) throws IOException {
    covered = in.readU16 ();
    alg = in.readU8 ();
    labels = in.readU8 ();
    origttl = in.readU32 ();
    expire = new Date (1000 * in.readU32 ());
    timeSigned = new Date (1000 * in.readU32 ());
    footprint = in.readU16 ();
    signer = new Name (in);
    signature = in.readByteArray ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SIGBase.java" startline="64" endline="81">
void rdataFromString (Tokenizer st, Name origin) throws IOException {
    String typeString = st.getString ();
    covered = Type.value (typeString);
    if (covered < 0) throw st.exception ("Invalid type: " + typeString);

    String algString = st.getString ();
    alg = DNSSEC.Algorithm.value (algString);
    if (alg < 0) throw st.exception ("Invalid algorithm: " + algString);

    labels = st.getUInt8 ();
    origttl = st.getTTL ();
    expire = FormattedTime.parse (st.getString ());
    timeSigned = FormattedTime.parse (st.getString ());
    footprint = st.getUInt16 ();
    signer = st.getName (origin);
    signature = st.getBase64 ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SIGBase.java" startline="84" endline="113">
String rrToString () {
    StringBuffer sb = new StringBuffer ();
    sb.append (Type.string (covered));
    sb.append (" ");
    sb.append (alg);
    sb.append (" ");
    sb.append (labels);
    sb.append (" ");
    sb.append (origttl);
    sb.append (" ");
    if (Options.check ("multiline")) sb.append ("(\n\t");

    sb.append (FormattedTime.format (expire));
    sb.append (" ");
    sb.append (FormattedTime.format (timeSigned));
    sb.append (" ");
    sb.append (footprint);
    sb.append (" ");
    sb.append (signer);
    if (Options.check ("multiline")) {
        sb.append ("\n");
        sb.append (base64.formatString (signature, 64, "\t", true));
    } else {
        sb.append (" ");
        sb.append (base64.toString (signature));
    }
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SIGBase.java" startline="116" endline="119">
public int getTypeCovered () {
    return covered;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SIGBase.java" startline="124" endline="127">
public int getAlgorithm () {
    return alg;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SIGBase.java" startline="134" endline="137">
public int getLabels () {
    return labels;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SIGBase.java" startline="140" endline="143">
public long getOrigTTL () {
    return origttl;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SIGBase.java" startline="146" endline="149">
public Date getExpire () {
    return expire;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SIGBase.java" startline="152" endline="155">
public Date getTimeSigned () {
    return timeSigned;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SIGBase.java" startline="158" endline="161">
public int getFootprint () {
    return footprint;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SIGBase.java" startline="164" endline="167">
public Name getSigner () {
    return signer;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SIGBase.java" startline="170" endline="173">
public byte [] getSignature () {
    return signature;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SIGBase.java" startline="175" endline="178">
void setSignature (byte [] signature) {
    this.signature = signature;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SIGBase.java" startline="180" endline="191">
void rrToWire (DNSOutput out, Compression c, boolean canonical) {
    out.writeU16 (covered);
    out.writeU8 (alg);
    out.writeU8 (labels);
    out.writeU32 (origttl);
    out.writeU32 (expire.getTime () / 1000);
    out.writeU32 (timeSigned.getTime () / 1000);
    out.writeU16 (footprint);
    signer.toWire (out, null, canonical);
    out.writeByteArray (signature);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TCPClient.java" startline="12" endline="15">
public TCPClient (long endTime) throws IOException {
    super (SocketChannel.open (), endTime);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TCPClient.java" startline="17" endline="21">
void bind (SocketAddress addr) throws IOException {
    SocketChannel channel = (SocketChannel) key.channel ();
    channel.socket ().bind (addr);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TCPClient.java" startline="23" endline="39">
void connect (SocketAddress addr) throws IOException {
    SocketChannel channel = (SocketChannel) key.channel ();
    if (channel.connect (addr)) return;

    key.interestOps (SelectionKey.OP_CONNECT);
    try {
        while (! channel.finishConnect ()) {
            if (! key.isConnectable ()) blockUntil (key, endTime);

        }
    } finally {
        if (key.isValid ()) key.interestOps (0);

    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TCPClient.java" startline="41" endline="72">
void send (byte [] data) throws IOException {
    SocketChannel channel = (SocketChannel) key.channel ();
    verboseLog ("TCP write", channel.socket ().getLocalSocketAddress (), channel.socket ().getRemoteSocketAddress (), data);
    byte [] lengthArray = new byte [2];
    lengthArray [0] = (byte) (data.length>>> 8);
    lengthArray [1] = (byte) (data.length & 0xFF);
    ByteBuffer [] buffers = new ByteBuffer [2];
    buffers [0] = ByteBuffer.wrap (lengthArray);
    buffers [1] = ByteBuffer.wrap (data);
    int nsent = 0;
    key.interestOps (SelectionKey.OP_WRITE);
    try {
        while (nsent < data.length + 2) {
            if (key.isWritable ()) {
                long n = channel.write (buffers);
                if (n < 0) throw new EOFException ();

                nsent += (int) n;
                if (nsent < data.length + 2 && System.currentTimeMillis () > endTime) throw new SocketTimeoutException ();

            } else blockUntil (key, endTime);

        }
    } finally {
        if (key.isValid ()) key.interestOps (0);

    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TCPClient.java" startline="74" endline="100">
private byte [] _recv (int length) throws IOException {
    SocketChannel channel = (SocketChannel) key.channel ();
    int nrecvd = 0;
    byte [] data = new byte [length];
    ByteBuffer buffer = ByteBuffer.wrap (data);
    key.interestOps (SelectionKey.OP_READ);
    try {
        while (nrecvd < length) {
            if (key.isReadable ()) {
                long n = channel.read (buffer);
                if (n < 0) throw new EOFException ();

                nrecvd += (int) n;
                if (nrecvd < length && System.currentTimeMillis () > endTime) throw new SocketTimeoutException ();

            } else blockUntil (key, endTime);

        }
    } finally {
        if (key.isValid ()) key.interestOps (0);

    }
    return data;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TCPClient.java" startline="102" endline="111">
byte [] recv () throws IOException {
    byte [] buf = _recv (2);
    int length = ((buf [0] & 0xFF) << 8) + (buf [1] & 0xFF);
    byte [] data = _recv (length);
    SocketChannel channel = (SocketChannel) key.channel ();
    verboseLog ("TCP read", channel.socket ().getLocalSocketAddress (), channel.socket ().getRemoteSocketAddress (), data);
    return data;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TCPClient.java" startline="113" endline="128">
static byte [] sendrecv (SocketAddress local, SocketAddress remote, byte [] data, long endTime) throws IOException {
    TCPClient client = new TCPClient (endTime);
    try {
        if (local != null) client.bind (local);

        client.connect (remote);
        client.send (data);
        return client.recv ();
    } finally {
        client.cleanup ();
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TCPClient.java" startline="130" endline="133">
static byte [] sendrecv (SocketAddress addr, byte [] data, long endTime) throws IOException {
    return sendrecv (null, addr, data, endTime);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/RRset.java" startline="30" endline="35">
public RRset () {
    rrs = new ArrayList (1);
    nsigs = 0;
    position = 0;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/RRset.java" startline="38" endline="42">
public RRset (Record record) {
    this ();
    safeAddRR (record);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/RRset.java" startline="45" endline="52">
public RRset (RRset rrset) {
    synchronized (rrset) {
        rrs = (List) ((ArrayList) rrset.rrs).clone ();
        nsigs = rrset.nsigs;
        position = rrset.position;
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/RRset.java" startline="54" endline="65">
private void safeAddRR (Record r) {
    if (! (r instanceof RRSIGRecord)) {
        if (nsigs == 0) rrs.add (r);
        else rrs.add (rrs.size () - nsigs, r);

    } else {
        rrs.add (r);
        nsigs ++;
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/RRset.java" startline="68" endline="95">
public synchronized void addRR (Record r) {
    if (rrs.size () == 0) {
        safeAddRR (r);
        return;
    }
    Record first = first ();
    if (! r.sameRRset (first)) throw new IllegalArgumentException ("record does not match " + "rrset");

    if (r.getTTL () != first.getTTL ()) {
        if (r.getTTL () > first.getTTL ()) {
            r = r.cloneRecord ();
            r.setTTL (first.getTTL ());
        } else {
            for (int i = 0;
            i < rrs.size (); i ++) {
                Record tmp = (Record) rrs.get (i);
                tmp = tmp.cloneRecord ();
                tmp.setTTL (r.getTTL ());
                rrs.set (i, tmp);
            }
        }
    }
    if (! rrs.contains (r)) safeAddRR (r);

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/RRset.java" startline="98" endline="102">
public synchronized void deleteRR (Record r) {
    if (rrs.remove (r) && (r instanceof RRSIGRecord)) nsigs --;

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/RRset.java" startline="105" endline="110">
public synchronized void clear () {
    rrs.clear ();
    position = 0;
    nsigs = 0;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/RRset.java" startline="112" endline="147">
private synchronized Iterator iterator (boolean data, boolean cycle) {
    int size, start, total;
    total = rrs.size ();
    if (data) size = total - nsigs;
    else size = nsigs;

    if (size == 0) return Collections.EMPTY_LIST.iterator ();

    if (data) {
        if (! cycle) start = 0;
        else {
            if (position >= size) position = 0;

            start = position ++;
        }
    } else {
        start = total - nsigs;
    }
    List list = new ArrayList (size);
    if (data) {
        list.addAll (rrs.subList (start, size));
        if (start != 0) list.addAll (rrs.subList (0, start));

    } else {
        list.addAll (rrs.subList (start, total));
    }
    return list.iterator ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/RRset.java" startline="154" endline="157">
public synchronized Iterator rrs (boolean cycle) {
    return iterator (true, cycle);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/RRset.java" startline="163" endline="166">
public synchronized Iterator rrs () {
    return iterator (true, true);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/RRset.java" startline="169" endline="172">
public synchronized Iterator sigs () {
    return iterator (false, false);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/RRset.java" startline="175" endline="178">
public synchronized int size () {
    return rrs.size () - nsigs;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/RRset.java" startline="184" endline="187">
public Name getName () {
    return first ().getName ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/RRset.java" startline="193" endline="196">
public int getType () {
    return first ().getRRsetType ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/RRset.java" startline="202" endline="205">
public int getDClass () {
    return first ().getDClass ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/RRset.java" startline="208" endline="211">
public synchronized long getTTL () {
    return first ().getTTL ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/RRset.java" startline="217" endline="222">
public synchronized Record first () {
    if (rrs.size () == 0) throw new IllegalStateException ("rrset is empty");

    return (Record) rrs.get (0);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/RRset.java" startline="224" endline="236">
private String iteratorToString (Iterator it) {
    StringBuffer sb = new StringBuffer ();
    while (it.hasNext ()) {
        Record rr = (Record) it.next ();
        sb.append ("[");
        sb.append (rr.rdataToString ());
        sb.append ("]");
        if (it.hasNext ()) sb.append (" ");

    }
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/RRset.java" startline="239" endline="256">
public String toString () {
    if (rrs.size () == 0) return ("{empty}");

    StringBuffer sb = new StringBuffer ();
    sb.append ("{ ");
    sb.append (getName () + " ");
    sb.append (getTTL () + " ");
    sb.append (DClass.string (getDClass ()) + " ");
    sb.append (Type.string (getType ()) + " ");
    sb.append (iteratorToString (iterator (true, false)));
    if (nsigs > 0) {
        sb.append (" sigs: ");
        sb.append (iteratorToString (iterator (false, false)));
    }
    sb.append (" }");
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Generator.java" startline="49" endline="54">
public static boolean supportedType (int type) {
    Type.check (type);
    return (type == Type.PTR || type == Type.CNAME || type == Type.DNAME || type == Type.A || type == Type.AAAA || type == Type.NS);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Generator.java" startline="73" endline="94">
public Generator (long start, long end, long step, String namePattern, int type, int dclass, long ttl, String rdataPattern, Name origin) {
    if (start < 0 || end < 0 || start > end || step <= 0) throw new IllegalArgumentException ("invalid range specification");

    if (! supportedType (type)) throw new IllegalArgumentException ("unsupported type");

    DClass.check (dclass);
    this.start = start;
    this.end = end;
    this.step = step;
    this.namePattern = namePattern;
    this.type = type;
    this.dclass = dclass;
    this.ttl = ttl;
    this.rdataPattern = rdataPattern;
    this.origin = origin;
    this.current = start;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Generator.java" startline="96" endline="207">
private String substitute (String spec, long n) throws IOException {
    boolean escaped = false;
    byte [] str = spec.getBytes ();
    StringBuffer sb = new StringBuffer ();
    for (int i = 0;
    i < str.length; i ++) {
        char c = (char) (str [i] & 0xFF);
        if (escaped) {
            sb.append (c);
            escaped = false;
        } else if (c == '\\') {
            if (i + 1 == str.length) throw new TextParseException ("invalid escape character");

            escaped = true;
        } else if (c == '$') {
            boolean negative = false;
            long offset = 0;
            long width = 0;
            long base = 10;
            boolean wantUpperCase = false;
            if (i + 1 < str.length && str [i + 1] == '$') {
                c = (char) (str [++ i] & 0xFF);
                sb.append (c);
                continue;
            } else if (i + 1 < str.length && str [i + 1] == '{') {
                i ++;
                if (i + 1 < str.length && str [i + 1] == '-') {
                    negative = true;
                    i ++;
                }
                while (i + 1 < str.length) {
                    c = (char) (str [++ i] & 0xFF);
                    if (c == ',' || c == '}') break;

                    if (c < '0' || c > '9') throw new TextParseException ("invalid offset");

                    c -= '0';
                    offset *= 10;
                    offset += c;
                }
                if (negative) offset = - offset;

                if (c == ',') {
                    while (i + 1 < str.length) {
                        c = (char) (str [++ i] & 0xFF);
                        if (c == ',' || c == '}') break;

                        if (c < '0' || c > '9') throw new TextParseException ("invalid width");

                        c -= '0';
                        width *= 10;
                        width += c;
                    }
                }
                if (c == ',') {
                    if (i + 1 == str.length) throw new TextParseException ("invalid base");

                    c = (char) (str [++ i] & 0xFF);
                    if (c == 'o') base = 8;
                    else if (c == 'x') base = 16;
                    else if (c == 'X') {
                        base = 16;
                        wantUpperCase = true;
                    } else if (c != 'd') throw new TextParseException ("invalid base");

                }
                if (i + 1 == str.length || str [i + 1] != '}') throw new TextParseException ("invalid modifiers");

                i ++;
            }

            long v = n + offset;
            if (v < 0) throw new TextParseException ("invalid offset expansion");

            String number;
            if (base == 8) number = Long.toOctalString (v);
            else if (base == 16) number = Long.toHexString (v);
            else number = Long.toString (v);

            if (wantUpperCase) number = number.toUpperCase ();

            if (width != 0 && width > number.length ()) {
                int zeros = (int) width - number.length ();
                while (zeros -- > 0) sb.append ('0');

            }
            sb.append (number);
        } else {
            sb.append (c);
        }

    }
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Generator.java" startline="214" endline="223">
public Record nextRecord () throws IOException {
    if (current > end) return null;

    String namestr = substitute (namePattern, current);
    Name name = Name.fromString (namestr, origin);
    String rdata = substitute (rdataPattern, current);
    current += step;
    return Record.fromString (name, type, dclass, ttl, rdata, origin);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Generator.java" startline="230" endline="241">
public Record [] expand () throws IOException {
    List list = new ArrayList ();
    for (long i = start;
    i < end; i += step) {
        String namestr = substitute (namePattern, current);
        Name name = Name.fromString (namestr, origin);
        String rdata = substitute (rdataPattern, current);
        list.add (Record.fromString (name, type, dclass, ttl, rdata, origin));
    }
    return (Record []) list.toArray (new Record [list.size ()]);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Generator.java" startline="247" endline="262">
public String toString () {
    StringBuffer sb = new StringBuffer ();
    sb.append ("$GENERATE ");
    sb.append (start + "-" + end);
    if (step > 1) sb.append ("/" + step);

    sb.append (" ");
    sb.append (namePattern + " ");
    sb.append (ttl + " ");
    if (dclass != DClass.IN || ! Options.check ("noPrintIN")) sb.append (DClass.string (dclass) + " ");

    sb.append (Type.string (type) + " ");
    sb.append (rdataPattern + " ");
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSEC3PARAMRecord.java" startline="30" endline="30">
NSEC3PARAMRecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSEC3PARAMRecord.java" startline="32" endline="34">
Record getObject () {
    return new NSEC3PARAMRecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSEC3PARAMRecord.java" startline="47" endline="64">
public NSEC3PARAMRecord (Name name, int dclass, long ttl, int hashAlg, int flags, int iterations, byte [] salt) {
    super (name, Type.NSEC3PARAM, dclass, ttl);
    this.hashAlg = checkU8 ("hashAlg", hashAlg);
    this.flags = checkU8 ("flags", flags);
    this.iterations = checkU16 ("iterations", iterations);
    if (salt != null) {
        if (salt.length > 255) throw new IllegalArgumentException ("Invalid salt " + "length");

        if (salt.length > 0) {
            this.salt = new byte [salt.length];
            System.arraycopy (salt, 0, this.salt, 0, salt.length);
        }
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSEC3PARAMRecord.java" startline="66" endline="77">
void rrFromWire (DNSInput in) throws IOException {
    hashAlg = in.readU8 ();
    flags = in.readU8 ();
    iterations = in.readU16 ();
    int salt_length = in.readU8 ();
    if (salt_length > 0) salt = in.readByteArray (salt_length);
    else salt = null;

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSEC3PARAMRecord.java" startline="79" endline="90">
void rrToWire (DNSOutput out, Compression c, boolean canonical) {
    out.writeU8 (hashAlg);
    out.writeU8 (flags);
    out.writeU16 (iterations);
    if (salt != null) {
        out.writeU8 (salt.length);
        out.writeByteArray (salt);
    } else out.writeU8 (0);

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSEC3PARAMRecord.java" startline="92" endline="108">
void rdataFromString (Tokenizer st, Name origin) throws IOException {
    hashAlg = st.getUInt8 ();
    flags = st.getUInt8 ();
    iterations = st.getUInt16 ();
    String s = st.getString ();
    if (s.equals ("-")) salt = null;
    else {
        st.unget ();
        salt = st.getHexString ();
        if (salt.length > 255) throw st.exception ("salt value too long");

    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSEC3PARAMRecord.java" startline="111" endline="126">
String rrToString () {
    StringBuffer sb = new StringBuffer ();
    sb.append (hashAlg);
    sb.append (' ');
    sb.append (flags);
    sb.append (' ');
    sb.append (iterations);
    sb.append (' ');
    if (salt == null) sb.append ('-');
    else sb.append (base16.toString (salt));

    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSEC3PARAMRecord.java" startline="129" endline="132">
public int getHashAlgorithm () {
    return hashAlg;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSEC3PARAMRecord.java" startline="135" endline="138">
public int getFlags () {
    return flags;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSEC3PARAMRecord.java" startline="141" endline="144">
public int getIterations () {
    return iterations;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSEC3PARAMRecord.java" startline="147" endline="151">
public byte [] getSalt () {
    return salt;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NSEC3PARAMRecord.java" startline="159" endline="163">
public byte [] hashName (Name name) throws NoSuchAlgorithmException {
    return NSEC3Record.hashName (name, hashAlg, iterations, salt);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Flags.java" startline="54" endline="55">
private Flags () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Flags.java" startline="58" endline="61">
public static String string (int i) {
    return flags.getText (i);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Flags.java" startline="64" endline="67">
public static int value (String s) {
    return flags.getValue (s);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Flags.java" startline="73" endline="79">
public static boolean isFlag (int index) {
    flags.check (index);
    if ((index >= 1 && index <= 4) || (index >= 12)) return false;

    return true;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Update.java" startline="24" endline="35">
public Update (Name zone, int dclass) {
    super ();
    if (! zone.isAbsolute ()) throw new RelativeNameException (zone);

    DClass.check (dclass);
    getHeader ().setOpcode (Opcode.UPDATE);
    Record soa = Record.newRecord (zone, Type.SOA, DClass.IN);
    addRecord (soa, Section.QUESTION);
    this.origin = zone;
    this.dclass = dclass;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Update.java" startline="41" endline="44">
public Update (Name zone) {
    this (zone, DClass.IN);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Update.java" startline="46" endline="49">
private void newPrereq (Record rec) {
    addRecord (rec, Section.PREREQ);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Update.java" startline="51" endline="54">
private void newUpdate (Record rec) {
    addRecord (rec, Section.UPDATE);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Update.java" startline="60" endline="63">
public void present (Name name) {
    newPrereq (Record.newRecord (name, Type.ANY, DClass.ANY, 0));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Update.java" startline="69" endline="72">
public void present (Name name, int type) {
    newPrereq (Record.newRecord (name, type, DClass.ANY, 0));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Update.java" startline="82" endline="85">
public void present (Name name, int type, String record) throws IOException {
    newPrereq (Record.fromString (name, type, dclass, 0, record, origin));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Update.java" startline="95" endline="98">
public void present (Name name, int type, Tokenizer tokenizer) throws IOException {
    newPrereq (Record.fromString (name, type, dclass, 0, tokenizer, origin));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Update.java" startline="106" endline="109">
public void present (Record record) {
    newPrereq (record);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Update.java" startline="115" endline="118">
public void absent (Name name) {
    newPrereq (Record.newRecord (name, Type.ANY, DClass.NONE, 0));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Update.java" startline="124" endline="127">
public void absent (Name name, int type) {
    newPrereq (Record.newRecord (name, type, DClass.NONE, 0));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Update.java" startline="134" endline="137">
public void add (Name name, int type, long ttl, String record) throws IOException {
    newUpdate (Record.fromString (name, type, dclass, ttl, record, origin));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Update.java" startline="144" endline="148">
public void add (Name name, int type, long ttl, Tokenizer tokenizer) throws IOException {
    newUpdate (Record.fromString (name, type, dclass, ttl, tokenizer, origin));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Update.java" startline="153" endline="156">
public void add (Record record) {
    newUpdate (record);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Update.java" startline="161" endline="165">
public void add (Record [] records) {
    for (int i = 0;
    i < records.length; i ++) add (records [i]);

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Update.java" startline="171" endline="175">
public void add (RRset rrset) {
    for (Iterator it = rrset.rrs ();
    it.hasNext ();) add ((Record) it.next ());

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Update.java" startline="181" endline="184">
public void delete (Name name) {
    newUpdate (Record.newRecord (name, Type.ANY, DClass.ANY, 0));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Update.java" startline="190" endline="193">
public void delete (Name name, int type) {
    newUpdate (Record.newRecord (name, type, DClass.ANY, 0));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Update.java" startline="200" endline="204">
public void delete (Name name, int type, String record) throws IOException {
    newUpdate (Record.fromString (name, type, DClass.NONE, 0, record, origin));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Update.java" startline="211" endline="215">
public void delete (Name name, int type, Tokenizer tokenizer) throws IOException {
    newUpdate (Record.fromString (name, type, DClass.NONE, 0, tokenizer, origin));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Update.java" startline="220" endline="223">
public void delete (Record record) {
    newUpdate (record.withDClass (DClass.NONE, 0));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Update.java" startline="228" endline="232">
public void delete (Record [] records) {
    for (int i = 0;
    i < records.length; i ++) delete (records [i]);

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Update.java" startline="238" endline="242">
public void delete (RRset rrset) {
    for (Iterator it = rrset.rrs ();
    it.hasNext ();) delete ((Record) it.next ());

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Update.java" startline="250" endline="254">
public void replace (Name name, int type, long ttl, String record) throws IOException {
    delete (name, type);
    add (name, type, ttl, record);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Update.java" startline="262" endline="267">
public void replace (Name name, int type, long ttl, Tokenizer tokenizer) throws IOException {
    delete (name, type);
    add (name, type, ttl, tokenizer);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Update.java" startline="273" endline="277">
public void replace (Record record) {
    delete (record.getName (), record.getType ());
    add (record);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Update.java" startline="283" endline="287">
public void replace (Record [] records) {
    for (int i = 0;
    i < records.length; i ++) replace (records [i]);

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Update.java" startline="293" endline="298">
public void replace (RRset rrset) {
    delete (rrset.getName (), rrset.getType ());
    for (Iterator it = rrset.rrs ();
    it.hasNext ();) add ((Record) it.next ());

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/HINFORecord.java" startline="19" endline="19">
HINFORecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/HINFORecord.java" startline="21" endline="24">
Record getObject () {
    return new HINFORecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/HINFORecord.java" startline="32" endline="42">
public HINFORecord (Name name, int dclass, long ttl, String cpu, String os) {
    super (name, Type.HINFO, dclass, ttl);
    try {
        this.cpu = byteArrayFromString (cpu);
        this.os = byteArrayFromString (os);
    } catch (TextParseException e) {
        throw new IllegalArgumentException (e.getMessage ());
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/HINFORecord.java" startline="44" endline="48">
void rrFromWire (DNSInput in) throws IOException {
    cpu = in.readCountedString ();
    os = in.readCountedString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/HINFORecord.java" startline="50" endline="59">
void rdataFromString (Tokenizer st, Name origin) throws IOException {
    try {
        cpu = byteArrayFromString (st.getString ());
        os = byteArrayFromString (st.getString ());
    } catch (TextParseException e) {
        throw st.exception (e.getMessage ());
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/HINFORecord.java" startline="64" endline="67">
public String getCPU () {
    return byteArrayToString (cpu, false);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/HINFORecord.java" startline="72" endline="75">
public String getOS () {
    return byteArrayToString (os, false);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/HINFORecord.java" startline="77" endline="81">
void rrToWire (DNSOutput out, Compression c, boolean canonical) {
    out.writeCountedString (cpu);
    out.writeCountedString (os);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/HINFORecord.java" startline="86" endline="93">
String rrToString () {
    StringBuffer sb = new StringBuffer ();
    sb.append (byteArrayToString (cpu, true));
    sb.append (" ");
    sb.append (byteArrayToString (os, true));
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/PXRecord.java" startline="21" endline="21">
PXRecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/PXRecord.java" startline="23" endline="26">
Record getObject () {
    return new PXRecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/PXRecord.java" startline="34" endline="43">
public PXRecord (Name name, int dclass, long ttl, int preference, Name map822, Name mapX400) {
    super (name, Type.PX, dclass, ttl);
    this.preference = checkU16 ("preference", preference);
    this.map822 = checkName ("map822", map822);
    this.mapX400 = checkName ("mapX400", mapX400);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/PXRecord.java" startline="45" endline="50">
void rrFromWire (DNSInput in) throws IOException {
    preference = in.readU16 ();
    map822 = new Name (in);
    mapX400 = new Name (in);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/PXRecord.java" startline="52" endline="57">
void rdataFromString (Tokenizer st, Name origin) throws IOException {
    preference = st.getUInt16 ();
    map822 = st.getName (origin);
    mapX400 = st.getName (origin);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/PXRecord.java" startline="60" endline="69">
String rrToString () {
    StringBuffer sb = new StringBuffer ();
    sb.append (preference);
    sb.append (" ");
    sb.append (map822);
    sb.append (" ");
    sb.append (mapX400);
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/PXRecord.java" startline="71" endline="76">
void rrToWire (DNSOutput out, Compression c, boolean canonical) {
    out.writeU16 (preference);
    map822.toWire (out, null, canonical);
    mapX400.toWire (out, null, canonical);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/PXRecord.java" startline="79" endline="82">
public int getPreference () {
    return preference;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/PXRecord.java" startline="85" endline="88">
public Name getMap822 () {
    return map822;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/PXRecord.java" startline="91" endline="94">
public Name getMapX400 () {
    return mapX400;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NXTRecord.java" startline="24" endline="24">
NXTRecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NXTRecord.java" startline="26" endline="29">
Record getObject () {
    return new NXTRecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NXTRecord.java" startline="36" endline="41">
public NXTRecord (Name name, int dclass, long ttl, Name next, BitSet bitmap) {
    super (name, Type.NXT, dclass, ttl);
    this.next = checkName ("next", next);
    this.bitmap = bitmap;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NXTRecord.java" startline="43" endline="54">
void rrFromWire (DNSInput in) throws IOException {
    next = new Name (in);
    bitmap = new BitSet ();
    int bitmapLength = in.remaining ();
    for (int i = 0;
    i < bitmapLength; i ++) {
        int t = in.readU8 ();
        for (int j = 0;
        j < 8; j ++) if ((t & (1 << (7 - j))) != 0) bitmap.set (i * 8 + j);

    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NXTRecord.java" startline="56" endline="70">
void rdataFromString (Tokenizer st, Name origin) throws IOException {
    next = st.getName (origin);
    bitmap = new BitSet ();
    while (true) {
        Tokenizer.Token t = st.get ();
        if (! t.isString ()) break;

        int typecode = Type.value (t.value, true);
        if (typecode <= 0 || typecode > 128) throw st.exception ("Invalid type: " + t.value);

        bitmap.set (typecode);
    }
    st.unget ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NXTRecord.java" startline="73" endline="84">
String rrToString () {
    StringBuffer sb = new StringBuffer ();
    sb.append (next);
    int length = bitmap.length ();
    for (short i = 0;
    i < length; i ++) if (bitmap.get (i)) {
        sb.append (" ");
        sb.append (Type.string (i));
    }

    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NXTRecord.java" startline="87" endline="90">
public Name getNext () {
    return next;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NXTRecord.java" startline="93" endline="96">
public BitSet getBitmap () {
    return bitmap;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NXTRecord.java" startline="98" endline="109">
void rrToWire (DNSOutput out, Compression c, boolean canonical) {
    next.toWire (out, null, canonical);
    int length = bitmap.length ();
    for (int i = 0, t = 0;
    i < length; i ++) {
        t |= (bitmap.get (i) ? (1 << (7 - i % 8)) : 0);
        if (i % 8 == 7 || i == length - 1) {
            out.writeU8 (t);
            t = 0;
        }
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Mnemonic.java" startline="48" endline="55">
public Mnemonic (String description, int wordcase) {
    this.description = description;
    this.wordcase = wordcase;
    strings = new HashMap ();
    values = new HashMap ();
    max = Integer.MAX_VALUE;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Mnemonic.java" startline="58" endline="61">
public void setMaximum (int max) {
    this.max = max;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Mnemonic.java" startline="67" endline="70">
public void setPrefix (String prefix) {
    this.prefix = sanitize (prefix);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Mnemonic.java" startline="75" endline="78">
public void setNumericAllowed (boolean numeric) {
    this.numericok = numeric;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Mnemonic.java" startline="83" endline="88">
public static Integer toInteger (int val) {
    if (val >= 0 && val < cachedInts.length) return (cachedInts [val]);

    return new Integer (val);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Mnemonic.java" startline="93" endline="99">
public void check (int val) {
    if (val < 0 || val > max) {
        throw new IllegalArgumentException (description + " " + val + "is out of range");
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Mnemonic.java" startline="102" endline="109">
private String sanitize (String str) {
    if (wordcase == CASE_UPPER) return str.toUpperCase ();
    else if (wordcase == CASE_LOWER) return str.toLowerCase ();

    return str;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Mnemonic.java" startline="111" endline="121">
private int parseNumeric (String s) {
    try {
        int val = Integer.parseInt (s);
        if (val >= 0 && val <= max) return val;

    } catch (NumberFormatException e) {
    }
    return - 1;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Mnemonic.java" startline="128" endline="135">
public void add (int val, String str) {
    check (val);
    Integer value = toInteger (val);
    str = sanitize (str);
    strings.put (str, value);
    values.put (value, str);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Mnemonic.java" startline="143" endline="149">
public void addAlias (int val, String str) {
    check (val);
    Integer value = toInteger (val);
    str = sanitize (str);
    strings.put (str, value);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Mnemonic.java" startline="158" endline="165">
public void addAll (Mnemonic source) {
    if (wordcase != source.wordcase) throw new IllegalArgumentException (source.description + ": wordcases do not match");

    strings.putAll (source.strings);
    values.putAll (source.values);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Mnemonic.java" startline="172" endline="182">
public String getText (int val) {
    check (val);
    String str = (String) values.get (toInteger (val));
    if (str != null) return str;

    str = Integer.toString (val);
    if (prefix != null) return prefix + str;

    return str;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Mnemonic.java" startline="189" endline="208">
public int getValue (String str) {
    str = sanitize (str);
    Integer value = (Integer) strings.get (str);
    if (value != null) {
        return value.intValue ();
    }
    if (prefix != null) {
        if (str.startsWith (prefix)) {
            int val = parseNumeric (str.substring (prefix.length ()));
            if (val >= 0) {
                return val;
            }
        }
    }
    if (numericok) {
        return parseNumeric (str);
    }
    return - 1;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TSIG.java" startline="61" endline="71">
public static Name algorithmToName (String alg) {
    Iterator it = algMap.entrySet ().iterator ();
    while (it.hasNext ()) {
        Map.Entry entry = (Map.Entry) it.next ();
        if (alg.equalsIgnoreCase ((String) entry.getValue ())) return (Name) entry.getKey ();

    }
    throw new IllegalArgumentException ("Unknown algorithm");
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TSIG.java" startline="72" endline="79">
public static String nameToAlgorithm (Name name) {
    String alg = (String) algMap.get (name);
    if (alg != null) return alg;

    throw new IllegalArgumentException ("Unknown algorithm");
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TSIG.java" startline="96" endline="99">
private static boolean verify (Mac mac, byte [] signature) {
    return verify (mac, signature, false);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TSIG.java" startline="109" endline="118">
private static boolean verify (Mac mac, byte [] signature, boolean truncation_ok) {
    byte [] expected = mac.doFinal ();
    if (truncation_ok && signature.length < expected.length) {
        byte [] truncated = new byte [signature.length];
        System.arraycopy (expected, 0, truncated, 0, truncated.length);
        expected = truncated;
    }
    return Arrays.equals (signature, expected);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TSIG.java" startline="120" endline="131">
private void init_hmac (String macAlgorithm, SecretKey key) {
    try {
        hmac = Mac.getInstance (macAlgorithm);
        hmac.init (key);
    } catch (GeneralSecurityException ex) {
        throw new IllegalArgumentException ("Caught security " + "exception setting up " + "HMAC.");
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TSIG.java" startline="139" endline="146">
public TSIG (Name algorithm, Name name, byte [] keyBytes) {
    this.name = name;
    this.alg = algorithm;
    String macAlgorithm = nameToAlgorithm (algorithm);
    SecretKey key = new SecretKeySpec (keyBytes, macAlgorithm);
    init_hmac (macAlgorithm, key);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TSIG.java" startline="154" endline="160">
public TSIG (Name algorithm, Name name, SecretKey key) {
    this.name = name;
    this.alg = algorithm;
    String macAlgorithm = nameToAlgorithm (algorithm);
    init_hmac (macAlgorithm, key);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TSIG.java" startline="169" endline="174">
public TSIG (Mac mac, Name name) {
    this.name = name;
    this.hmac = mac;
    this.alg = algorithmToName (mac.getAlgorithm ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TSIG.java" startline="182" endline="185">
public TSIG (Name name, byte [] key) {
    this (HMAC_MD5, name, key);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TSIG.java" startline="194" endline="208">
public TSIG (Name algorithm, String name, String key) {
    byte [] keyBytes = base64.fromString (key);
    if (keyBytes == null) throw new IllegalArgumentException ("Invalid TSIG key string");

    try {
        this.name = Name.fromString (name, Name.root);
    } catch (TextParseException e) {
        throw new IllegalArgumentException ("Invalid TSIG key name");
    }
    this.alg = algorithm;
    String macAlgorithm = nameToAlgorithm (this.alg);
    init_hmac (macAlgorithm, new SecretKeySpec (keyBytes, macAlgorithm));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TSIG.java" startline="220" endline="223">
public TSIG (String algorithm, String name, String key) {
    this (algorithmToName (algorithm), name, key);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TSIG.java" startline="233" endline="236">
public TSIG (String name, String key) {
    this (HMAC_MD5, name, key);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TSIG.java" startline="248" endline="262">
static public TSIG fromString (String str) {
    String [] parts = str.split ("[:/]", 3);
    if (parts.length < 2) throw new IllegalArgumentException ("Invalid TSIG key " + "specification");

    if (parts.length == 3) {
        try {
            return new TSIG (parts [0], parts [1], parts [2]);
        } catch (IllegalArgumentException e) {
            parts = str.split ("[:/]", 2);
        }
    }
    return new TSIG (HMAC_MD5, parts [0], parts [1]);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TSIG.java" startline="273" endline="341">
public TSIGRecord generate (Message m, byte [] b, int error, TSIGRecord old) {
    Date timeSigned;
    if (error != Rcode.BADTIME) timeSigned = new Date ();
    else timeSigned = old.getTimeSigned ();

    int fudge;
    boolean signing = false;
    if (error == Rcode.NOERROR || error == Rcode.BADTIME) {
        signing = true;
        hmac.reset ();
    }
    fudge = Options.intValue ("tsigfudge");
    if (fudge < 0 || fudge > 0x7FFF) fudge = FUDGE;

    if (old != null) {
        DNSOutput out = new DNSOutput ();
        out.writeU16 (old.getSignature ().length);
        if (signing) {
            hmac.update (out.toByteArray ());
            hmac.update (old.getSignature ());
        }
    }
    if (signing) hmac.update (b);

    DNSOutput out = new DNSOutput ();
    name.toWireCanonical (out);
    out.writeU16 (DClass.ANY);
    out.writeU32 (0);
    alg.toWireCanonical (out);
    long time = timeSigned.getTime () / 1000;
    int timeHigh = (int) (time>> 32);
    long timeLow = (time & 0xFFFFFFFFL);
    out.writeU16 (timeHigh);
    out.writeU32 (timeLow);
    out.writeU16 (fudge);
    out.writeU16 (error);
    out.writeU16 (0);
    if (signing) hmac.update (out.toByteArray ());

    byte [] signature;
    if (signing) signature = hmac.doFinal ();
    else signature = new byte [0];

    byte [] other = null;
    if (error == Rcode.BADTIME) {
        out = new DNSOutput ();
        time = new Date ().getTime () / 1000;
        timeHigh = (int) (time>> 32);
        timeLow = (time & 0xFFFFFFFFL);
        out.writeU16 (timeHigh);
        out.writeU32 (timeLow);
        other = out.toByteArray ();
    }
    return (new TSIGRecord (name, DClass.ANY, 0, alg, timeSigned, fudge, signature, m.getHeader ().getID (), error, other));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TSIG.java" startline="350" endline="355">
public void apply (Message m, int error, TSIGRecord old) {
    Record r = generate (m, m.toWire (), error, old);
    m.addRecord (r, Section.ADDITIONAL);
    m.tsigState = Message.TSIG_SIGNED;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TSIG.java" startline="362" endline="365">
public void apply (Message m, TSIGRecord old) {
    apply (m, Rcode.NOERROR, old);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TSIG.java" startline="372" endline="412">
public void applyStream (Message m, TSIGRecord old, boolean first) {
    if (first) {
        apply (m, old);
        return;
    }
    Date timeSigned = new Date ();
    int fudge;
    hmac.reset ();
    fudge = Options.intValue ("tsigfudge");
    if (fudge < 0 || fudge > 0x7FFF) fudge = FUDGE;

    DNSOutput out = new DNSOutput ();
    out.writeU16 (old.getSignature ().length);
    hmac.update (out.toByteArray ());
    hmac.update (old.getSignature ());
    hmac.update (m.toWire ());
    out = new DNSOutput ();
    long time = timeSigned.getTime () / 1000;
    int timeHigh = (int) (time>> 32);
    long timeLow = (time & 0xFFFFFFFFL);
    out.writeU16 (timeHigh);
    out.writeU32 (timeLow);
    out.writeU16 (fudge);
    hmac.update (out.toByteArray ());
    byte [] signature = hmac.doFinal ();
    byte [] other = null;
    Record r = new TSIGRecord (name, DClass.ANY, 0, alg, timeSigned, fudge, signature, m.getHeader ().getID (), Rcode.NOERROR, other);
    m.addRecord (r, Section.ADDITIONAL);
    m.tsigState = Message.TSIG_SIGNED;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TSIG.java" startline="428" endline="511">
public byte verify (Message m, byte [] b, int length, TSIGRecord old) {
    m.tsigState = Message.TSIG_FAILED;
    TSIGRecord tsig = m.getTSIG ();
    hmac.reset ();
    if (tsig == null) return Rcode.FORMERR;

    if (! tsig.getName ().equals (name) || ! tsig.getAlgorithm ().equals (alg)) {
        if (Options.check ("verbose")) System.err.println ("BADKEY failure");

        return Rcode.BADKEY;
    }
    long now = System.currentTimeMillis ();
    long then = tsig.getTimeSigned ().getTime ();
    long fudge = tsig.getFudge ();
    if (Math.abs (now - then) > fudge * 1000) {
        if (Options.check ("verbose")) System.err.println ("BADTIME failure");

        return Rcode.BADTIME;
    }
    if (old != null && tsig.getError () != Rcode.BADKEY && tsig.getError () != Rcode.BADSIG) {
        DNSOutput out = new DNSOutput ();
        out.writeU16 (old.getSignature ().length);
        hmac.update (out.toByteArray ());
        hmac.update (old.getSignature ());
    }
    m.getHeader ().decCount (Section.ADDITIONAL);
    byte [] header = m.getHeader ().toWire ();
    m.getHeader ().incCount (Section.ADDITIONAL);
    hmac.update (header);
    int len = m.tsigstart - header.length;
    hmac.update (b, header.length, len);
    DNSOutput out = new DNSOutput ();
    tsig.getName ().toWireCanonical (out);
    out.writeU16 (tsig.dclass);
    out.writeU32 (tsig.ttl);
    tsig.getAlgorithm ().toWireCanonical (out);
    long time = tsig.getTimeSigned ().getTime () / 1000;
    int timeHigh = (int) (time>> 32);
    long timeLow = (time & 0xFFFFFFFFL);
    out.writeU16 (timeHigh);
    out.writeU32 (timeLow);
    out.writeU16 (tsig.getFudge ());
    out.writeU16 (tsig.getError ());
    if (tsig.getOther () != null) {
        out.writeU16 (tsig.getOther ().length);
        out.writeByteArray (tsig.getOther ());
    } else {
        out.writeU16 (0);
    }
    hmac.update (out.toByteArray ());
    byte [] signature = tsig.getSignature ();
    int digestLength = hmac.getMacLength ();
    int minDigestLength;
    if (hmac.getAlgorithm ().toLowerCase ().contains ("md5")) minDigestLength = 10;
    else minDigestLength = digestLength / 2;

    if (signature.length > digestLength) {
        if (Options.check ("verbose")) System.err.println ("BADSIG: signature too long");

        return Rcode.BADSIG;
    } else if (signature.length < minDigestLength) {
        if (Options.check ("verbose")) System.err.println ("BADSIG: signature too short");

        return Rcode.BADSIG;
    } else if (! verify (hmac, signature, true)) {
        if (Options.check ("verbose")) System.err.println ("BADSIG: signature verification");

        return Rcode.BADSIG;
    }

    m.tsigState = Message.TSIG_VERIFIED;
    return Rcode.NOERROR;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TSIG.java" startline="526" endline="529">
public int verify (Message m, byte [] b, TSIGRecord old) {
    return verify (m, b, b.length, old);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TSIG.java" startline="535" endline="543">
public int recordLength () {
    return (name.length () + 10 + alg.length () + 8 + 18 + 4 + 8);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TSIG.java" startline="557" endline="563">
public StreamVerifier (TSIG tsig, TSIGRecord old) {
    key = tsig;
    verifier = tsig.hmac;
    nresponses = 0;
    lastTSIG = old;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/TSIG.java" startline="577" endline="658">
public int verify (Message m, byte [] b) {
    TSIGRecord tsig = m.getTSIG ();
    nresponses ++;
    if (nresponses == 1) {
        int result = key.verify (m, b, lastTSIG);
        if (result == Rcode.NOERROR) {
            byte [] signature = tsig.getSignature ();
            DNSOutput out = new DNSOutput ();
            out.writeU16 (signature.length);
            verifier.update (out.toByteArray ());
            verifier.update (signature);
        }
        lastTSIG = tsig;
        return result;
    }
    if (tsig != null) m.getHeader ().decCount (Section.ADDITIONAL);

    byte [] header = m.getHeader ().toWire ();
    if (tsig != null) m.getHeader ().incCount (Section.ADDITIONAL);

    verifier.update (header);
    int len;
    if (tsig == null) len = b.length - header.length;
    else len = m.tsigstart - header.length;

    verifier.update (b, header.length, len);
    if (tsig != null) {
        lastsigned = nresponses;
        lastTSIG = tsig;
    } else {
        boolean required = (nresponses - lastsigned >= 100);
        if (required) {
            m.tsigState = Message.TSIG_FAILED;
            return Rcode.FORMERR;
        } else {
            m.tsigState = Message.TSIG_INTERMEDIATE;
            return Rcode.NOERROR;
        }
    }
    if (! tsig.getName ().equals (key.name) || ! tsig.getAlgorithm ().equals (key.alg)) {
        if (Options.check ("verbose")) System.err.println ("BADKEY failure");

        m.tsigState = Message.TSIG_FAILED;
        return Rcode.BADKEY;
    }
    DNSOutput out = new DNSOutput ();
    long time = tsig.getTimeSigned ().getTime () / 1000;
    int timeHigh = (int) (time>> 32);
    long timeLow = (time & 0xFFFFFFFFL);
    out.writeU16 (timeHigh);
    out.writeU32 (timeLow);
    out.writeU16 (tsig.getFudge ());
    verifier.update (out.toByteArray ());
    if (TSIG.verify (verifier, tsig.getSignature ()) == false) {
        if (Options.check ("verbose")) System.err.println ("BADSIG failure");

        m.tsigState = Message.TSIG_FAILED;
        return Rcode.BADSIG;
    }
    verifier.reset ();
    out = new DNSOutput ();
    out.writeU16 (tsig.getSignature ().length);
    verifier.update (out.toByteArray ());
    verifier.update (tsig.getSignature ());
    m.tsigState = Message.TSIG_VERIFIED;
    return Rcode.NOERROR;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SPFRecord.java" startline="17" endline="17">
SPFRecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SPFRecord.java" startline="19" endline="22">
Record getObject () {
    return new SPFRecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SPFRecord.java" startline="29" endline="32">
public SPFRecord (Name name, int dclass, long ttl, List strings) {
    super (name, Type.SPF, dclass, ttl, strings);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SPFRecord.java" startline="39" endline="42">
public SPFRecord (Name name, int dclass, long ttl, String string) {
    super (name, Type.SPF, dclass, ttl, string);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SIGRecord.java" startline="22" endline="22">
SIGRecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SIGRecord.java" startline="24" endline="27">
Record getObject () {
    return new SIGRecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SIGRecord.java" startline="41" endline="48">
public SIGRecord (Name name, int dclass, long ttl, int covered, int alg, long origttl, Date expire, Date timeSigned, int footprint, Name signer, byte [] signature) {
    super (name, Type.SIG, dclass, ttl, covered, alg, origttl, expire, timeSigned, footprint, signer, signature);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SingleCompressedNameBase.java" startline="16" endline="17">
protected SingleCompressedNameBase () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SingleCompressedNameBase.java" startline="19" endline="24">
protected SingleCompressedNameBase (Name name, int type, int dclass, long ttl, Name singleName, String description) {
    super (name, type, dclass, ttl, singleName, description);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SingleCompressedNameBase.java" startline="26" endline="29">
void rrToWire (DNSOutput out, Compression c, boolean canonical) {
    singleName.toWire (out, c, canonical);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/U16NameBase.java" startline="21" endline="22">
protected U16NameBase () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/U16NameBase.java" startline="24" endline="27">
protected U16NameBase (Name name, int type, int dclass, long ttl) {
    super (name, type, dclass, ttl);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/U16NameBase.java" startline="29" endline="36">
protected U16NameBase (Name name, int type, int dclass, long ttl, int u16Field, String u16Description, Name nameField, String nameDescription) {
    super (name, type, dclass, ttl);
    this.u16Field = checkU16 (u16Description, u16Field);
    this.nameField = checkName (nameDescription, nameField);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/U16NameBase.java" startline="38" endline="42">
void rrFromWire (DNSInput in) throws IOException {
    u16Field = in.readU16 ();
    nameField = new Name (in);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/U16NameBase.java" startline="44" endline="48">
void rdataFromString (Tokenizer st, Name origin) throws IOException {
    u16Field = st.getUInt16 ();
    nameField = st.getName (origin);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/U16NameBase.java" startline="50" endline="57">
String rrToString () {
    StringBuffer sb = new StringBuffer ();
    sb.append (u16Field);
    sb.append (" ");
    sb.append (nameField);
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/U16NameBase.java" startline="59" endline="62">
protected int getU16Field () {
    return u16Field;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/U16NameBase.java" startline="64" endline="67">
protected Name getNameField () {
    return nameField;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/U16NameBase.java" startline="69" endline="73">
void rrToWire (DNSOutput out, Compression c, boolean canonical) {
    out.writeU16 (u16Field);
    nameField.toWire (out, null, canonical);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Tokenizer.java" startline="74" endline="78">
private Token () {
    type = - 1;
    value = null;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Tokenizer.java" startline="80" endline="87">
private Token set (int type, StringBuffer value) {
    if (type < 0) throw new IllegalArgumentException ();

    this.type = type;
    this.value = value == null ? null : value.toString ();
    return this;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Tokenizer.java" startline="93" endline="111">
public String toString () {
    switch (type) {
        case EOF :
            return "<eof>";
        case EOL :
            return "<eol>";
        case WHITESPACE :
            return "<whitespace>";
        case IDENTIFIER :
            return "<identifier: " + value + ">";
        case QUOTED_STRING :
            return "<quoted_string: " + value + ">";
        case COMMENT :
            return "<comment: " + value + ">";
        default :
            return "<unknown>";
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Tokenizer.java" startline="114" endline="117">
public boolean isString () {
    return (type == IDENTIFIER || type == QUOTED_STRING);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Tokenizer.java" startline="120" endline="123">
public boolean isEOL () {
    return (type == EOL || type == EOF);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Tokenizer.java" startline="129" endline="133">
public TokenizerException (String filename, int line, String message) {
    super (filename + ":" + line + ": " + message);
    this.message = message;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Tokenizer.java" startline="135" endline="138">
public String getBaseMessage () {
    return message;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Tokenizer.java" startline="145" endline="158">
public Tokenizer (InputStream is) {
    if (! (is instanceof BufferedInputStream)) is = new BufferedInputStream (is);

    this.is = new PushbackInputStream (is, 2);
    ungottenToken = false;
    multiline = 0;
    quoting = false;
    delimiters = delim;
    current = new Token ();
    sb = new StringBuffer ();
    filename = "<none>";
    line = 1;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Tokenizer.java" startline="164" endline="167">
public Tokenizer (String s) {
    this (new ByteArrayInputStream (s.getBytes ()));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Tokenizer.java" startline="173" endline="178">
public Tokenizer (File f) throws FileNotFoundException {
    this (new FileInputStream (f));
    wantClose = true;
    filename = f.getName ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Tokenizer.java" startline="180" endline="192">
private int getChar () throws IOException {
    int c = is.read ();
    if (c == '\r') {
        int next = is.read ();
        if (next != '\n') is.unread (next);

        c = '\n';
    }
    if (c == '\n') line ++;

    return c;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Tokenizer.java" startline="194" endline="201">
private void ungetChar (int c) throws IOException {
    if (c == - 1) return;

    is.unread (c);
    if (c == '\n') line --;

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Tokenizer.java" startline="203" endline="216">
private int skipWhitespace () throws IOException {
    int skipped = 0;
    while (true) {
        int c = getChar ();
        if (c != ' ' && c != '\t') {
            if (! (c == '\n' && multiline > 0)) {
                ungetChar (c);
                return skipped;
            }
        }
        skipped ++;
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Tokenizer.java" startline="218" endline="222">
private void checkUnbalancedParens () throws TextParseException {
    if (multiline > 0) throw exception ("unbalanced parentheses");

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Tokenizer.java" startline="233" endline="336">
public Token get (boolean wantWhitespace, boolean wantComment) throws IOException {
    int type;
    int c;
    if (ungottenToken) {
        ungottenToken = false;
        if (current.type == WHITESPACE) {
            if (wantWhitespace) return current;

        } else if (current.type == COMMENT) {
            if (wantComment) return current;

        } else {
            if (current.type == EOL) line ++;

            return current;
        }

    }
    int skipped = skipWhitespace ();
    if (skipped > 0 && wantWhitespace) return current.set (WHITESPACE, null);

    type = IDENTIFIER;
    sb.setLength (0);
    while (true) {
        c = getChar ();
        if (c == - 1 || delimiters.indexOf (c) != - 1) {
            if (c == - 1) {
                if (quoting) throw exception ("EOF in " + "quoted string");
                else if (sb.length () == 0) return current.set (EOF, null);
                else return current.set (type, sb);

            }
            if (sb.length () == 0 && type != QUOTED_STRING) {
                if (c == '(') {
                    multiline ++;
                    skipWhitespace ();
                    continue;
                } else if (c == ')') {
                    if (multiline <= 0) throw exception ("invalid " + "close " + "parenthesis");

                    multiline --;
                    skipWhitespace ();
                    continue;
                } else if (c == '"') {
                    if (! quoting) {
                        quoting = true;
                        delimiters = quotes;
                        type = QUOTED_STRING;
                    } else {
                        quoting = false;
                        delimiters = delim;
                        skipWhitespace ();
                    }
                    continue;
                } else if (c == '\n') {
                    return current.set (EOL, null);
                } else if (c == ';') {
                    while (true) {
                        c = getChar ();
                        if (c == '\n' || c == - 1) break;

                        sb.append ((char) c);
                    }
                    if (wantComment) {
                        ungetChar (c);
                        return current.set (COMMENT, sb);
                    } else if (c == - 1 && type != QUOTED_STRING) {
                        checkUnbalancedParens ();
                        return current.set (EOF, null);
                    } else if (multiline > 0) {
                        skipWhitespace ();
                        sb.setLength (0);
                        continue;
                    } else return current.set (EOL, null);

                } else throw new IllegalStateException ();

            } else ungetChar (c);

            break;
        } else if (c == '\\') {
            c = getChar ();
            if (c == - 1) throw exception ("unterminated escape sequence");

            sb.append ('\\');
        } else if (quoting && c == '\n') {
            throw exception ("newline in quoted string");
        }

        sb.append ((char) c);
    }
    if (sb.length () == 0 && type != QUOTED_STRING) {
        checkUnbalancedParens ();
        return current.set (EOF, null);
    }
    return current.set (type, sb);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Tokenizer.java" startline="344" endline="347">
public Token get () throws IOException {
    return get (false, false);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Tokenizer.java" startline="354" endline="362">
public void unget () {
    if (ungottenToken) throw new IllegalStateException ("Cannot unget multiple tokens");

    if (current.type == EOL) line --;

    ungottenToken = true;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Tokenizer.java" startline="370" endline="377">
public String getString () throws IOException {
    Token next = get ();
    if (! next.isString ()) {
        throw exception ("expected a string");
    }
    return next.value;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Tokenizer.java" startline="379" endline="385">
private String _getIdentifier (String expected) throws IOException {
    Token next = get ();
    if (next.type != IDENTIFIER) throw exception ("expected " + expected);

    return next.value;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Tokenizer.java" startline="394" endline="397">
public String getIdentifier () throws IOException {
    return _getIdentifier ("an identifier");
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Tokenizer.java" startline="405" endline="415">
public long getLong () throws IOException {
    String next = _getIdentifier ("an integer");
    if (! Character.isDigit (next.charAt (0))) throw exception ("expected an integer");

    try {
        return Long.parseLong (next);
    } catch (NumberFormatException e) {
        throw exception ("expected an integer");
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Tokenizer.java" startline="425" endline="431">
public long getUInt32 () throws IOException {
    long l = getLong ();
    if (l < 0 || l > 0xFFFFFFFFL) throw exception ("expected an 32 bit unsigned integer");

    return l;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Tokenizer.java" startline="441" endline="447">
public int getUInt16 () throws IOException {
    long l = getLong ();
    if (l < 0 || l > 0xFFFFL) throw exception ("expected an 16 bit unsigned integer");

    return (int) l;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Tokenizer.java" startline="457" endline="463">
public int getUInt8 () throws IOException {
    long l = getLong ();
    if (l < 0 || l > 0xFFL) throw exception ("expected an 8 bit unsigned integer");

    return (int) l;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Tokenizer.java" startline="472" endline="481">
public long getTTL () throws IOException {
    String next = _getIdentifier ("a TTL value");
    try {
        return TTL.parseTTL (next);
    } catch (NumberFormatException e) {
        throw exception ("expected a TTL value");
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Tokenizer.java" startline="490" endline="499">
public long getTTLLike () throws IOException {
    String next = _getIdentifier ("a TTL-like value");
    try {
        return TTL.parse (next, false);
    } catch (NumberFormatException e) {
        throw exception ("expected a TTL-like value");
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Tokenizer.java" startline="511" endline="523">
public Name getName (Name origin) throws IOException {
    String next = _getIdentifier ("a name");
    try {
        Name name = Name.fromString (next, origin);
        if (! name.isAbsolute ()) throw new RelativeNameException (name);

        return name;
    } catch (TextParseException e) {
        throw exception (e.getMessage ());
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Tokenizer.java" startline="535" endline="542">
public byte [] getAddressBytes (int family) throws IOException {
    String next = _getIdentifier ("an address");
    byte [] bytes = Address.toByteArray (next, family);
    if (bytes == null) throw exception ("Invalid address: " + next);

    return bytes;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Tokenizer.java" startline="552" endline="561">
public InetAddress getAddress (int family) throws IOException {
    String next = _getIdentifier ("an address");
    try {
        return Address.getByAddress (next, family);
    } catch (UnknownHostException e) {
        throw exception (e.getMessage ());
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Tokenizer.java" startline="568" endline="574">
public void getEOL () throws IOException {
    Token next = get ();
    if (next.type != EOL && next.type != EOF) {
        throw exception ("expected EOL or EOF");
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Tokenizer.java" startline="579" endline="594">
private String remainingStrings () throws IOException {
    StringBuffer buffer = null;
    while (true) {
        Tokenizer.Token t = get ();
        if (! t.isString ()) break;

        if (buffer == null) buffer = new StringBuffer ();

        buffer.append (t.value);
    }
    unget ();
    if (buffer == null) return null;

    return buffer.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Tokenizer.java" startline="606" endline="619">
public byte [] getBase64 (boolean required) throws IOException {
    String s = remainingStrings ();
    if (s == null) {
        if (required) throw exception ("expected base64 encoded string");
        else return null;

    }
    byte [] array = base64.fromString (s);
    if (array == null) throw exception ("invalid base64 encoding");

    return array;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Tokenizer.java" startline="629" endline="632">
public byte [] getBase64 () throws IOException {
    return getBase64 (false);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Tokenizer.java" startline="644" endline="657">
public byte [] getHex (boolean required) throws IOException {
    String s = remainingStrings ();
    if (s == null) {
        if (required) throw exception ("expected hex encoded string");
        else return null;

    }
    byte [] array = base16.fromString (s);
    if (array == null) throw exception ("invalid hex encoding");

    return array;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Tokenizer.java" startline="667" endline="670">
public byte [] getHex () throws IOException {
    return getHex (false);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Tokenizer.java" startline="678" endline="685">
public byte [] getHexString () throws IOException {
    String next = _getIdentifier ("a hex string");
    byte [] array = base16.fromString (next);
    if (array == null) throw exception ("invalid hex encoding");

    return array;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Tokenizer.java" startline="694" endline="701">
public byte [] getBase32String (base32 b32) throws IOException {
    String next = _getIdentifier ("a base32 string");
    byte [] array = b32.fromString (next);
    if (array == null) throw exception ("invalid base32 encoding");

    return array;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Tokenizer.java" startline="708" endline="711">
public TextParseException exception (String s) {
    return new TokenizerException (filename, line, s);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Tokenizer.java" startline="716" endline="725">
public void close () {
    if (wantClose) {
        try {
            is.close ();
        } catch (IOException e) {
        }
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Tokenizer.java" startline="727" endline="730">
protected void finalize () {
    close ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ResolverConfig.java" startline="46" endline="70">
public ResolverConfig () {
    if (findProperty ()) return;

    if (findSunJVM ()) return;

    if (servers == null || searchlist == null) {
        String OS = System.getProperty ("os.name");
        String vendor = System.getProperty ("java.vendor");
        if (OS.indexOf ("Windows") != - 1) {
            if (OS.indexOf ("95") != - 1 || OS.indexOf ("98") != - 1 || OS.indexOf ("ME") != - 1) find95 ();
            else findNT ();

        } else if (OS.indexOf ("NetWare") != - 1) {
            findNetware ();
        } else if (vendor.indexOf ("Android") != - 1) {
            findAndroid ();
        } else {
            findUnix ();
        }

    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ResolverConfig.java" startline="72" endline="79">
private void addServer (String server, List list) {
    if (list.contains (server)) return;

    if (Options.check ("verbose")) System.out.println ("adding server " + server);

    list.add (server);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ResolverConfig.java" startline="81" endline="95">
private void addSearch (String search, List list) {
    Name name;
    if (Options.check ("verbose")) System.out.println ("adding search " + search);

    try {
        name = Name.fromString (search, Name.root);
    } catch (TextParseException e) {
        return;
    }
    if (list.contains (name)) return;

    list.add (name);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ResolverConfig.java" startline="97" endline="111">
private int parseNdots (String token) {
    token = token.substring (6);
    try {
        int ndots = Integer.parseInt (token);
        if (ndots >= 0) {
            if (Options.check ("verbose")) System.out.println ("setting ndots " + token);

            return ndots;
        }
    } catch (NumberFormatException e) {
    }
    return - 1;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ResolverConfig.java" startline="113" endline="119">
private void configureFromLists (List lserver, List lsearch) {
    if (servers == null && lserver.size () > 0) servers = (String []) lserver.toArray (new String [0]);

    if (searchlist == null && lsearch.size () > 0) searchlist = (Name []) lsearch.toArray (new Name [0]);

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ResolverConfig.java" startline="121" endline="125">
private void configureNdots (int lndots) {
    if (ndots < 0 && lndots > 0) ndots = lndots;

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ResolverConfig.java" startline="132" endline="154">
private boolean findProperty () {
    String prop;
    List lserver = new ArrayList (0);
    List lsearch = new ArrayList (0);
    StringTokenizer st;
    prop = System.getProperty ("dns.server");
    if (prop != null) {
        st = new StringTokenizer (prop, ",");
        while (st.hasMoreTokens ()) addServer (st.nextToken (), lserver);

    }
    prop = System.getProperty ("dns.search");
    if (prop != null) {
        st = new StringTokenizer (prop, ",");
        while (st.hasMoreTokens ()) addSearch (st.nextToken (), lsearch);

    }
    configureFromLists (lserver, lsearch);
    return (servers != null && searchlist != null);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ResolverConfig.java" startline="160" endline="208">
private boolean findSunJVM () {
    List lserver = new ArrayList (0);
    List lserver_tmp;
    List lsearch = new ArrayList (0);
    List lsearch_tmp;
    try {
        Class [] noClasses = new Class [0];
        Object [] noObjects = new Object [0];
        String resConfName = "sun.net.dns.ResolverConfiguration";
        Class resConfClass = Class.forName (resConfName);
        Object resConf;
        Method open = resConfClass.getDeclaredMethod ("open", noClasses);
        resConf = open.invoke (null, noObjects);
        Method nameservers = resConfClass.getMethod ("nameservers", noClasses);
        lserver_tmp = (List) nameservers.invoke (resConf, noObjects);
        Method searchlist = resConfClass.getMethod ("searchlist", noClasses);
        lsearch_tmp = (List) searchlist.invoke (resConf, noObjects);
    } catch (Exception e) {
        return false;
    }
    if (lserver_tmp.size () == 0) return false;

    if (lserver_tmp.size () > 0) {
        Iterator it = lserver_tmp.iterator ();
        while (it.hasNext ()) addServer ((String) it.next (), lserver);

    }
    if (lsearch_tmp.size () > 0) {
        Iterator it = lsearch_tmp.iterator ();
        while (it.hasNext ()) addSearch ((String) it.next (), lsearch);

    }
    configureFromLists (lserver, lsearch);
    return true;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ResolverConfig.java" startline="215" endline="271">
private void findResolvConf (String file) {
    InputStream in = null;
    try {
        in = new FileInputStream (file);
    } catch (FileNotFoundException e) {
        return;
    }
    InputStreamReader isr = new InputStreamReader (in);
    BufferedReader br = new BufferedReader (isr);
    List lserver = new ArrayList (0);
    List lsearch = new ArrayList (0);
    int lndots = - 1;
    try {
        String line;
        while ((line = br.readLine ()) != null) {
            if (line.startsWith ("nameserver")) {
                StringTokenizer st = new StringTokenizer (line);
                st.nextToken ();
                addServer (st.nextToken (), lserver);
            } else if (line.startsWith ("domain")) {
                StringTokenizer st = new StringTokenizer (line);
                st.nextToken ();
                if (! st.hasMoreTokens ()) continue;

                if (lsearch.isEmpty ()) addSearch (st.nextToken (), lsearch);

            } else if (line.startsWith ("search")) {
                if (! lsearch.isEmpty ()) lsearch.clear ();

                StringTokenizer st = new StringTokenizer (line);
                st.nextToken ();
                while (st.hasMoreTokens ()) addSearch (st.nextToken (), lsearch);

            } else if (line.startsWith ("options")) {
                StringTokenizer st = new StringTokenizer (line);
                st.nextToken ();
                while (st.hasMoreTokens ()) {
                    String token = st.nextToken ();
                    if (token.startsWith ("ndots:")) {
                        lndots = parseNdots (token);
                    }
                }
            }

        }
        br.close ();
    } catch (IOException e) {
    }
    configureFromLists (lserver, lsearch);
    configureNdots (lndots);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ResolverConfig.java" startline="273" endline="276">
private void findUnix () {
    findResolvConf ("/etc/resolv.conf");
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ResolverConfig.java" startline="278" endline="281">
private void findNetware () {
    findResolvConf ("sys:/etc/resolv.cfg");
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ResolverConfig.java" startline="286" endline="367">
private void findWin (InputStream in, Locale locale) {
    String packageName = ResolverConfig.class.getPackage ().getName ();
    String resPackageName = packageName + ".windows.DNSServer";
    ResourceBundle res;
    if (locale != null) res = ResourceBundle.getBundle (resPackageName, locale);
    else res = ResourceBundle.getBundle (resPackageName);

    String host_name = res.getString ("host_name");
    String primary_dns_suffix = res.getString ("primary_dns_suffix");
    String dns_suffix = res.getString ("dns_suffix");
    String dns_servers = res.getString ("dns_servers");
    BufferedReader br = new BufferedReader (new InputStreamReader (in));
    try {
        List lserver = new ArrayList ();
        List lsearch = new ArrayList ();
        String line = null;
        boolean readingServers = false;
        boolean readingSearches = false;
        while ((line = br.readLine ()) != null) {
            StringTokenizer st = new StringTokenizer (line);
            if (! st.hasMoreTokens ()) {
                readingServers = false;
                readingSearches = false;
                continue;
            }
            String s = st.nextToken ();
            if (line.indexOf (":") != - 1) {
                readingServers = false;
                readingSearches = false;
            }
            if (line.indexOf (host_name) != - 1) {
                while (st.hasMoreTokens ()) s = st.nextToken ();

                Name name;
                try {
                    name = Name.fromString (s, null);
                } catch (TextParseException e) {
                    continue;
                }
                if (name.labels () == 1) continue;

                addSearch (s, lsearch);
            } else if (line.indexOf (primary_dns_suffix) != - 1) {
                while (st.hasMoreTokens ()) s = st.nextToken ();

                if (s.equals (":")) continue;

                addSearch (s, lsearch);
                readingSearches = true;
            } else if (readingSearches || line.indexOf (dns_suffix) != - 1) {
                while (st.hasMoreTokens ()) s = st.nextToken ();

                if (s.equals (":")) continue;

                addSearch (s, lsearch);
                readingSearches = true;
            } else if (readingServers || line.indexOf (dns_servers) != - 1) {
                while (st.hasMoreTokens ()) s = st.nextToken ();

                if (s.equals (":")) continue;

                addServer (s, lserver);
                readingServers = true;
            }

        }
        configureFromLists (lserver, lsearch);
    } catch (IOException e) {
    }
    return;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ResolverConfig.java" startline="369" endline="386">
private void findWin (InputStream in) {
    String property = "org.xbill.DNS.windows.parse.buffer";
    final int defaultBufSize = 8 * 1024;
    int bufSize = Integer.getInteger (property, defaultBufSize).intValue ();
    BufferedInputStream b = new BufferedInputStream (in, bufSize);
    b.mark (bufSize);
    findWin (b, null);
    if (servers == null) {
        try {
            b.reset ();
        } catch (IOException e) {
            return;
        }
        findWin (b, new Locale ("", ""));
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ResolverConfig.java" startline="391" endline="405">
private void find95 () {
    String s = "winipcfg.out";
    try {
        Process p;
        p = Runtime.getRuntime ().exec ("winipcfg /all /batch " + s);
        p.waitFor ();
        File f = new File (s);
        findWin (new FileInputStream (f));
        new File (s).delete ();
    } catch (Exception e) {
        return;
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ResolverConfig.java" startline="410" endline="421">
private void findNT () {
    try {
        Process p;
        p = Runtime.getRuntime ().exec ("ipconfig /all");
        findWin (p.getInputStream ());
        p.destroy ();
    } catch (Exception e) {
        return;
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ResolverConfig.java" startline="428" endline="458">
private void findAndroid () {
    final String re1 = "^\\d+(\\.\\d+){3}$";
    final String re2 = "^[0-9a-f]+(:[0-9a-f]*)+:[0-9a-f]+$";
    ArrayList lserver = new ArrayList ();
    ArrayList lsearch = new ArrayList ();
    try {
        Class SystemProperties = Class.forName ("android.os.SystemProperties");
        Method method = SystemProperties.getMethod ("get", new Class [] {String.class});
        final String [] netdns = new String [] {"net.dns1", "net.dns2", "net.dns3", "net.dns4"};
        for (int i = 0;
        i < netdns.length; i ++) {
            Object [] args = new Object [] {netdns [i]};
            String v = (String) method.invoke (null, args);
            if (v != null && (v.matches (re1) || v.matches (re2)) && ! lserver.contains (v)) lserver.add (v);

        }
    } catch (Exception e) {
    }
    configureFromLists (lserver, lsearch);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ResolverConfig.java" startline="461" endline="464">
public String [] servers () {
    return servers;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ResolverConfig.java" startline="467" endline="472">
public String server () {
    if (servers == null) return null;

    return servers [0];
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ResolverConfig.java" startline="475" endline="478">
public Name [] searchPath () {
    return searchlist;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ResolverConfig.java" startline="486" endline="491">
public int ndots () {
    if (ndots < 0) return 1;

    return ndots;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ResolverConfig.java" startline="494" endline="497">
public static synchronized ResolverConfig getCurrentConfig () {
    return currentConfig;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ResolverConfig.java" startline="500" endline="506">
public static void refresh () {
    ResolverConfig newConfig = new ResolverConfig ();
    synchronized (ResolverConfig.class) {
        currentConfig = newConfig;
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/WKSRecord.java" startline="24" endline="24">
private Protocol () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/WKSRecord.java" startline="206" endline="209">
public static String string (int type) {
    return protocols.getText (type);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/WKSRecord.java" startline="217" endline="220">
public static int value (String s) {
    return protocols.getValue (s);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/WKSRecord.java" startline="230" endline="230">
private Service () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/WKSRecord.java" startline="561" endline="564">
public static String string (int type) {
    return services.getText (type);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/WKSRecord.java" startline="572" endline="575">
public static int value (String s) {
    return services.getValue (s);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/WKSRecord.java" startline="581" endline="581">
WKSRecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/WKSRecord.java" startline="583" endline="586">
Record getObject () {
    return new WKSRecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/WKSRecord.java" startline="594" endline="609">
public WKSRecord (Name name, int dclass, long ttl, InetAddress address, int protocol, int [] services) {
    super (name, Type.WKS, dclass, ttl);
    if (Address.familyOf (address) != Address.IPv4) throw new IllegalArgumentException ("invalid IPv4 address");

    this.address = address.getAddress ();
    this.protocol = checkU8 ("protocol", protocol);
    for (int i = 0;
    i < services.length; i ++) {
        checkU16 ("service", services [i]);
    }
    this.services = new int [services.length];
    System.arraycopy (services, 0, this.services, 0, services.length);
    Arrays.sort (this.services);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/WKSRecord.java" startline="611" endline="629">
void rrFromWire (DNSInput in) throws IOException {
    address = in.readByteArray (4);
    protocol = in.readU8 ();
    byte [] array = in.readByteArray ();
    List list = new ArrayList ();
    for (int i = 0;
    i < array.length; i ++) {
        for (int j = 0;
        j < 8; j ++) {
            int octet = array [i] & 0xFF;
            if ((octet & (1 << (7 - j))) != 0) {
                list.add (new Integer (i * 8 + j));
            }
        }
    }
    services = new int [list.size ()];
    for (int i = 0;
    i < list.size (); i ++) {
        services [i] = ((Integer) list.get (i)).intValue ();
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/WKSRecord.java" startline="631" endline="661">
void rdataFromString (Tokenizer st, Name origin) throws IOException {
    String s = st.getString ();
    address = Address.toByteArray (s, Address.IPv4);
    if (address == null) throw st.exception ("invalid address");

    s = st.getString ();
    protocol = Protocol.value (s);
    if (protocol < 0) {
        throw st.exception ("Invalid IP protocol: " + s);
    }
    List list = new ArrayList ();
    while (true) {
        Tokenizer.Token t = st.get ();
        if (! t.isString ()) break;

        int service = Service.value (t.value);
        if (service < 0) {
            throw st.exception ("Invalid TCP/UDP service: " + t.value);
        }
        list.add (new Integer (service));
    }
    st.unget ();
    services = new int [list.size ()];
    for (int i = 0;
    i < list.size (); i ++) {
        services [i] = ((Integer) list.get (i)).intValue ();
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/WKSRecord.java" startline="666" endline="676">
String rrToString () {
    StringBuffer sb = new StringBuffer ();
    sb.append (Address.toDottedQuad (address));
    sb.append (" ");
    sb.append (protocol);
    for (int i = 0;
    i < services.length; i ++) {
        sb.append (" " + services [i]);
    }
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/WKSRecord.java" startline="681" endline="688">
public InetAddress getAddress () {
    try {
        return InetAddress.getByAddress (address);
    } catch (UnknownHostException e) {
        return null;
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/WKSRecord.java" startline="693" endline="696">
public int getProtocol () {
    return protocol;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/WKSRecord.java" startline="701" endline="704">
public int [] getServices () {
    return services;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/WKSRecord.java" startline="706" endline="717">
void rrToWire (DNSOutput out, Compression c, boolean canonical) {
    out.writeByteArray (address);
    out.writeU8 (protocol);
    int highestPort = services [services.length - 1];
    byte [] array = new byte [highestPort / 8 + 1];
    for (int i = 0;
    i < services.length; i ++) {
        int port = services [i];
        array [port / 8] |= (1 << (7 - port % 8));
    }
    out.writeByteArray (array);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/InvalidTypeException.java" startline="13" endline="16">
public InvalidTypeException (int type) {
    super ("Invalid DNS type: " + type);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/PTRRecord.java" startline="16" endline="16">
PTRRecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/PTRRecord.java" startline="18" endline="21">
Record getObject () {
    return new PTRRecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/PTRRecord.java" startline="27" endline="30">
public PTRRecord (Name name, int dclass, long ttl, Name target) {
    super (name, Type.PTR, dclass, ttl, target, "target");
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/PTRRecord.java" startline="33" endline="36">
public Name getTarget () {
    return getSingleName ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/CNAMERecord.java" startline="15" endline="15">
CNAMERecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/CNAMERecord.java" startline="17" endline="20">
Record getObject () {
    return new CNAMERecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/CNAMERecord.java" startline="26" endline="29">
public CNAMERecord (Name name, int dclass, long ttl, Name alias) {
    super (name, Type.CNAME, dclass, ttl, alias, "alias");
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/CNAMERecord.java" startline="34" endline="37">
public Name getTarget () {
    return getSingleName ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/CNAMERecord.java" startline="40" endline="43">
public Name getAlias () {
    return getSingleName ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/MDRecord.java" startline="16" endline="16">
MDRecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/MDRecord.java" startline="18" endline="21">
Record getObject () {
    return new MDRecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/MDRecord.java" startline="27" endline="30">
public MDRecord (Name name, int dclass, long ttl, Name mailAgent) {
    super (name, Type.MD, dclass, ttl, mailAgent, "mail agent");
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/MDRecord.java" startline="33" endline="36">
public Name getMailAgent () {
    return getSingleName ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/MDRecord.java" startline="38" endline="41">
public Name getAdditionalName () {
    return getSingleName ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Header.java" startline="26" endline="31">
private void init () {
    counts = new int [4];
    flags = 0;
    id = - 1;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Header.java" startline="37" endline="41">
public Header (int id) {
    init ();
    setID (id);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Header.java" startline="46" endline="49">
public Header () {
    init ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Header.java" startline="54" endline="59">
Header (DNSInput in) throws IOException {
    this (in.readU16 ());
    flags = in.readU16 ();
    for (int i = 0;
    i < counts.length; i ++) counts [i] = in.readU16 ();

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Header.java" startline="65" endline="68">
public Header (byte [] b) throws IOException {
    this (new DNSInput (b));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Header.java" startline="70" endline="76">
void toWire (DNSOutput out) {
    out.writeU16 (getID ());
    out.writeU16 (flags);
    for (int i = 0;
    i < counts.length; i ++) out.writeU16 (counts [i]);

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Header.java" startline="78" endline="83">
public byte [] toWire () {
    DNSOutput out = new DNSOutput ();
    toWire (out);
    return out.toByteArray ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Header.java" startline="85" endline="88">
static private boolean validFlag (int bit) {
    return (bit >= 0 && bit <= 0xF && Flags.isFlag (bit));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Header.java" startline="90" endline="94">
static private void checkFlag (int bit) {
    if (! validFlag (bit)) throw new IllegalArgumentException ("invalid flag bit " + bit);

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Header.java" startline="96" endline="105">
static int setFlag (int flags, int bit, boolean value) {
    checkFlag (bit);
    if (value) return flags |= (1 << (15 - bit));
    else return flags &= ~ (1 << (15 - bit));

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Header.java" startline="111" endline="115">
public void setFlag (int bit) {
    checkFlag (bit);
    flags = setFlag (flags, bit, true);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Header.java" startline="121" endline="125">
public void unsetFlag (int bit) {
    checkFlag (bit);
    flags = setFlag (flags, bit, false);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Header.java" startline="131" endline="136">
public boolean getFlag (int bit) {
    checkFlag (bit);
    return (flags & (1 << (15 - bit))) != 0;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Header.java" startline="138" endline="145">
boolean [] getFlags () {
    boolean [] array = new boolean [16];
    for (int i = 0;
    i < array.length; i ++) if (validFlag (i)) array [i] = getFlag (i);

    return array;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Header.java" startline="150" endline="159">
public int getID () {
    if (id >= 0) return id;

    synchronized (this) {
        if (id < 0) id = random.nextInt (0xffff);

        return id;
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Header.java" startline="164" endline="170">
public void setID (int id) {
    if (id < 0 || id > 0xffff) throw new IllegalArgumentException ("DNS message ID " + id + " is out of range");

    this.id = id;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Header.java" startline="176" endline="183">
public void setRcode (int value) {
    if (value < 0 || value > 0xF) throw new IllegalArgumentException ("DNS Rcode " + value + " is out of range");

    flags &= ~ 0xF;
    flags |= value;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Header.java" startline="189" endline="192">
public int getRcode () {
    return flags & 0xF;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Header.java" startline="198" endline="205">
public void setOpcode (int value) {
    if (value < 0 || value > 0xF) throw new IllegalArgumentException ("DNS Opcode " + value + "is out of range");

    flags &= 0x87FF;
    flags |= (value << 11);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Header.java" startline="211" endline="214">
public int getOpcode () {
    return (flags>> 11) & 0xF;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Header.java" startline="216" endline="222">
void setCount (int field, int value) {
    if (value < 0 || value > 0xFFFF) throw new IllegalArgumentException ("DNS section count " + value + " is out of range");

    counts [field] = value;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Header.java" startline="224" endline="230">
void incCount (int field) {
    if (counts [field] == 0xFFFF) throw new IllegalStateException ("DNS section count cannot " + "be incremented");

    counts [field] ++;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Header.java" startline="232" endline="238">
void decCount (int field) {
    if (counts [field] == 0) throw new IllegalStateException ("DNS section count cannot " + "be decremented");

    counts [field] --;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Header.java" startline="244" endline="247">
public int getCount (int field) {
    return counts [field];
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Header.java" startline="249" endline="252">
int getFlagsByte () {
    return flags;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Header.java" startline="255" endline="265">
public String printFlags () {
    StringBuffer sb = new StringBuffer ();
    for (int i = 0;
    i < 16; i ++) if (validFlag (i) && getFlag (i)) {
        sb.append (Flags.string (i));
        sb.append (" ");
    }

    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Header.java" startline="267" endline="282">
String toStringWithRcode (int newrcode) {
    StringBuffer sb = new StringBuffer ();
    sb.append (";; ->>HEADER<<- ");
    sb.append ("opcode: " + Opcode.string (getOpcode ()));
    sb.append (", status: " + Rcode.string (newrcode));
    sb.append (", id: " + getID ());
    sb.append ("\n");
    sb.append (";; flags: " + printFlags ());
    sb.append ("; ");
    for (int i = 0;
    i < 4; i ++) sb.append (Section.string (i) + ": " + getCount (i) + " ");

    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Header.java" startline="285" endline="288">
public String toString () {
    return toStringWithRcode (getRcode ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Header.java" startline="291" endline="298">
public Object clone () {
    Header h = new Header ();
    h.id = id;
    h.flags = flags;
    System.arraycopy (counts, 0, h.counts, 0, counts.length);
    return h;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/KXRecord.java" startline="15" endline="15">
KXRecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/KXRecord.java" startline="17" endline="20">
Record getObject () {
    return new KXRecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/KXRecord.java" startline="28" endline="32">
public KXRecord (Name name, int dclass, long ttl, int preference, Name target) {
    super (name, Type.KX, dclass, ttl, preference, "preference", target, "target");
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/KXRecord.java" startline="35" endline="38">
public Name getTarget () {
    return getNameField ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/KXRecord.java" startline="41" endline="44">
public int getPreference () {
    return getU16Field ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/KXRecord.java" startline="46" endline="49">
public Name getAdditionalName () {
    return getNameField ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/UNKRecord.java" startline="20" endline="20">
UNKRecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/UNKRecord.java" startline="22" endline="25">
Record getObject () {
    return new UNKRecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/UNKRecord.java" startline="27" endline="30">
void rrFromWire (DNSInput in) throws IOException {
    data = in.readByteArray ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/UNKRecord.java" startline="32" endline="35">
void rdataFromString (Tokenizer st, Name origin) throws IOException {
    throw st.exception ("invalid unknown RR encoding");
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/UNKRecord.java" startline="38" endline="41">
String rrToString () {
    return unknownToString (data);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/UNKRecord.java" startline="44" endline="47">
public byte [] getData () {
    return data;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/UNKRecord.java" startline="49" endline="52">
void rrToWire (DNSOutput out, Compression c, boolean canonical) {
    out.writeByteArray (data);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SetResponse.java" startline="65" endline="66">
private SetResponse () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SetResponse.java" startline="68" endline="73">
SetResponse (int type, RRset rrset) {
    if (type < 0 || type > 6) throw new IllegalArgumentException ("invalid type");

    this.type = type;
    this.data = rrset;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SetResponse.java" startline="75" endline="80">
SetResponse (int type) {
    if (type < 0 || type > 6) throw new IllegalArgumentException ("invalid type");

    this.type = type;
    this.data = null;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SetResponse.java" startline="82" endline="102">
static SetResponse ofType (int type) {
    switch (type) {
        case UNKNOWN :
            return unknown;
        case NXDOMAIN :
            return nxdomain;
        case NXRRSET :
            return nxrrset;
        case DELEGATION :
        case CNAME :
        case DNAME :
        case SUCCESSFUL :
            SetResponse sr = new SetResponse ();
            sr.type = type;
            sr.data = null;
            return sr;
        default :
            throw new IllegalArgumentException ("invalid type");
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SetResponse.java" startline="104" endline="110">
void addRRset (RRset rrset) {
    if (data == null) data = new ArrayList ();

    List l = (List) data;
    l.add (rrset);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SetResponse.java" startline="113" endline="116">
public boolean isUnknown () {
    return (type == UNKNOWN);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SetResponse.java" startline="119" endline="122">
public boolean isNXDOMAIN () {
    return (type == NXDOMAIN);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SetResponse.java" startline="125" endline="128">
public boolean isNXRRSET () {
    return (type == NXRRSET);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SetResponse.java" startline="131" endline="134">
public boolean isDelegation () {
    return (type == DELEGATION);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SetResponse.java" startline="137" endline="140">
public boolean isCNAME () {
    return (type == CNAME);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SetResponse.java" startline="143" endline="146">
public boolean isDNAME () {
    return (type == DNAME);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SetResponse.java" startline="149" endline="152">
public boolean isSuccessful () {
    return (type == SUCCESSFUL);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SetResponse.java" startline="155" endline="161">
public RRset [] answers () {
    if (type != SUCCESSFUL) return null;

    List l = (List) data;
    return (RRset []) l.toArray (new RRset [l.size ()]);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SetResponse.java" startline="166" endline="169">
public CNAMERecord getCNAME () {
    return (CNAMERecord) ((RRset) data).first ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SetResponse.java" startline="174" endline="177">
public DNAMERecord getDNAME () {
    return (DNAMERecord) ((RRset) data).first ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SetResponse.java" startline="182" endline="185">
public RRset getNS () {
    return (RRset) data;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SetResponse.java" startline="188" endline="200">
public String toString () {
    switch (type) {
        case UNKNOWN :
            return "unknown";
        case NXDOMAIN :
            return "NXDOMAIN";
        case NXRRSET :
            return "NXRRSET";
        case DELEGATION :
            return "delegation: " + data;
        case CNAME :
            return "CNAME: " + data;
        case DNAME :
            return "DNAME: " + data;
        case SUCCESSFUL :
            return "successful";
        default :
            throw new IllegalStateException ();
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/spi/DNSJavaNameServiceDescriptor.java" startline="30" endline="33">
public NameService createNameService () {
    return nameService;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/spi/DNSJavaNameServiceDescriptor.java" startline="35" endline="38">
public String getType () {
    return "dns";
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/spi/DNSJavaNameServiceDescriptor.java" startline="40" endline="43">
public String getProviderName () {
    return "dnsjava";
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/spi/DNSJavaNameService.java" startline="53" endline="87">
protected DNSJavaNameService () {
    String nameServers = System.getProperty (nsProperty);
    String domain = System.getProperty (domainProperty);
    String v6 = System.getProperty (v6Property);
    if (nameServers != null) {
        StringTokenizer st = new StringTokenizer (nameServers, ",");
        String [] servers = new String [st.countTokens ()];
        int n = 0;
        while (st.hasMoreTokens ()) servers [n ++] = st.nextToken ();

        try {
            Resolver res = new ExtendedResolver (servers);
            Lookup.setDefaultResolver (res);
        } catch (UnknownHostException e) {
            System.err.println ("DNSJavaNameService: invalid " + nsProperty);
        }
    }
    if (domain != null) {
        try {
            Lookup.setDefaultSearchPath (new String [] {domain});
        } catch (TextParseException e) {
            System.err.println ("DNSJavaNameService: invalid " + domainProperty);
        }
    }
    if (v6 != null && v6.equalsIgnoreCase ("true")) preferV6 = true;

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/spi/DNSJavaNameService.java" startline="90" endline="121">
public Object invoke (Object proxy, Method method, Object [] args) throws Throwable {
    try {
        if (method.getName ().equals ("getHostByAddr")) {
            return this.getHostByAddr ((byte []) args [0]);
        } else if (method.getName ().equals ("lookupAllHostAddr")) {
            InetAddress [] addresses;
            addresses = this.lookupAllHostAddr ((String) args [0]);
            Class returnType = method.getReturnType ();
            if (returnType.equals (InetAddress [].class)) {
                return addresses;
            } else if (returnType.equals (byte [] [].class)) {
                int naddrs = addresses.length;
                byte [] [] byteAddresses = new byte [naddrs] [];
                byte [] addr;
                for (int i = 0;
                i < naddrs; i ++) {
                    addr = addresses [i].getAddress ();
                    byteAddresses [i] = addr;
                }
                return byteAddresses;
            }

        }

    } catch (Throwable e) {
        System.err.println ("DNSJavaNameService: Unexpected error.");
        e.printStackTrace ();
        throw e;
    }
    throw new IllegalArgumentException ("Unknown function name or arguments.");
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/spi/DNSJavaNameService.java" startline="128" endline="161">
public InetAddress [] lookupAllHostAddr (String host) throws UnknownHostException {
    Name name = null;
    try {
        name = new Name (host);
    } catch (TextParseException e) {
        throw new UnknownHostException (host);
    }
    Record [] records = null;
    if (preferV6) records = new Lookup (name, Type.AAAA).run ();

    if (records == null) records = new Lookup (name, Type.A).run ();

    if (records == null && ! preferV6) records = new Lookup (name, Type.AAAA).run ();

    if (records == null) throw new UnknownHostException (host);

    InetAddress [] array = new InetAddress [records.length];
    for (int i = 0;
    i < records.length; i ++) {
        Record record = records [i];
        if (records [i] instanceof ARecord) {
            ARecord a = (ARecord) records [i];
            array [i] = a.getAddress ();
        } else {
            AAAARecord aaaa = (AAAARecord) records [i];
            array [i] = aaaa.getAddress ();
        }
    }
    return array;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/spi/DNSJavaNameService.java" startline="168" endline="175">
public String getHostByAddr (byte [] addr) throws UnknownHostException {
    Name name = ReverseMap.fromAddress (InetAddress.getByAddress (addr));
    Record [] records = new Lookup (name, Type.PTR).run ();
    if (records == null) throw new UnknownHostException ();

    return ((PTRRecord) records [0]).getTarget ().toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SMIMEARecord.java" startline="21" endline="21">
private CertificateUsage () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SMIMEARecord.java" startline="30" endline="30">
private Selector () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SMIMEARecord.java" startline="46" endline="46">
private MatchingType () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SMIMEARecord.java" startline="63" endline="63">
SMIMEARecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SMIMEARecord.java" startline="65" endline="68">
Record getObject () {
    return new SMIMEARecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SMIMEARecord.java" startline="80" endline="93">
public SMIMEARecord (Name name, int dclass, long ttl, int certificateUsage, int selector, int matchingType, byte [] certificateAssociationData) {
    super (name, Type.SMIMEA, dclass, ttl);
    this.certificateUsage = checkU8 ("certificateUsage", certificateUsage);
    this.selector = checkU8 ("selector", selector);
    this.matchingType = checkU8 ("matchingType", matchingType);
    this.certificateAssociationData = checkByteArrayLength ("certificateAssociationData", certificateAssociationData, 0xFFFF);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SMIMEARecord.java" startline="95" endline="101">
void rrFromWire (DNSInput in) throws IOException {
    certificateUsage = in.readU8 ();
    selector = in.readU8 ();
    matchingType = in.readU8 ();
    certificateAssociationData = in.readByteArray ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SMIMEARecord.java" startline="103" endline="109">
void rdataFromString (Tokenizer st, Name origin) throws IOException {
    certificateUsage = st.getUInt8 ();
    selector = st.getUInt8 ();
    matchingType = st.getUInt8 ();
    certificateAssociationData = st.getHex ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SMIMEARecord.java" startline="112" endline="124">
String rrToString () {
    StringBuffer sb = new StringBuffer ();
    sb.append (certificateUsage);
    sb.append (" ");
    sb.append (selector);
    sb.append (" ");
    sb.append (matchingType);
    sb.append (" ");
    sb.append (base16.toString (certificateAssociationData));
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SMIMEARecord.java" startline="126" endline="132">
void rrToWire (DNSOutput out, Compression c, boolean canonical) {
    out.writeU8 (certificateUsage);
    out.writeU8 (selector);
    out.writeU8 (matchingType);
    out.writeByteArray (certificateAssociationData);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SMIMEARecord.java" startline="135" endline="138">
public int getCertificateUsage () {
    return certificateUsage;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SMIMEARecord.java" startline="141" endline="144">
public int getSelector () {
    return selector;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SMIMEARecord.java" startline="147" endline="150">
public int getMatchingType () {
    return matchingType;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/SMIMEARecord.java" startline="153" endline="156">
public final byte [] getCertificateAssociationData () {
    return certificateAssociationData;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/utils/base64.java" startline="18" endline="19">
private base64 () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/utils/base64.java" startline="26" endline="59">
public static String toString (byte [] b) {
    ByteArrayOutputStream os = new ByteArrayOutputStream ();
    for (int i = 0;
    i < (b.length + 2) / 3; i ++) {
        short [] s = new short [3];
        short [] t = new short [4];
        for (int j = 0;
        j < 3; j ++) {
            if ((i * 3 + j) < b.length) s [j] = (short) (b [i * 3 + j] & 0xFF);
            else s [j] = - 1;

        }
        t [0] = (short) (s [0]>> 2);
        if (s [1] == - 1) t [1] = (short) (((s [0] & 0x3) << 4));
        else t [1] = (short) (((s [0] & 0x3) << 4) + (s [1]>> 4));

        if (s [1] == - 1) t [2] = t [3] = 64;
        else if (s [2] == - 1) {
            t [2] = (short) (((s [1] & 0xF) << 2));
            t [3] = 64;
        } else {
            t [2] = (short) (((s [1] & 0xF) << 2) + (s [2]>> 6));
            t [3] = (short) (s [2] & 0x3F);
        }

        for (int j = 0;
        j < 4; j ++) os.write (Base64.charAt (t [j]));

    }
    return new String (os.toByteArray ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/utils/base64.java" startline="69" endline="86">
public static String formatString (byte [] b, int lineLength, String prefix, boolean addClose) {
    String s = toString (b);
    StringBuffer sb = new StringBuffer ();
    for (int i = 0;
    i < s.length (); i += lineLength) {
        sb.append (prefix);
        if (i + lineLength >= s.length ()) {
            sb.append (s.substring (i));
            if (addClose) sb.append (" )");

        } else {
            sb.append (s.substring (i, i + lineLength));
            sb.append ("\n");
        }
    }
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/utils/base64.java" startline="94" endline="143">
public static byte [] fromString (String str) {
    ByteArrayOutputStream bs = new ByteArrayOutputStream ();
    byte [] raw = str.getBytes ();
    for (int i = 0;
    i < raw.length; i ++) {
        if (! Character.isWhitespace ((char) raw [i])) bs.write (raw [i]);

    }
    byte [] in = bs.toByteArray ();
    if (in.length % 4 != 0) {
        return null;
    }
    bs.reset ();
    DataOutputStream ds = new DataOutputStream (bs);
    for (int i = 0;
    i < (in.length + 3) / 4; i ++) {
        short [] s = new short [4];
        short [] t = new short [3];
        for (int j = 0;
        j < 4; j ++) s [j] = (short) Base64.indexOf (in [i * 4 + j]);

        t [0] = (short) ((s [0] << 2) + (s [1]>> 4));
        if (s [2] == 64) {
            t [1] = t [2] = (short) (- 1);
            if ((s [1] & 0xF) != 0) return null;

        } else if (s [3] == 64) {
            t [1] = (short) (((s [1] << 4) + (s [2]>> 2)) & 0xFF);
            t [2] = (short) (- 1);
            if ((s [2] & 0x3) != 0) return null;

        } else {
            t [1] = (short) (((s [1] << 4) + (s [2]>> 2)) & 0xFF);
            t [2] = (short) (((s [2] << 6) + s [3]) & 0xFF);
        }

        try {
            for (int j = 0;
            j < 3; j ++) if (t [j] >= 0) ds.writeByte (t [j]);

        } catch (IOException e) {
        }
    }
    return bs.toByteArray ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/utils/hexdump.java" startline="22" endline="49">
public static String dump (String description, byte [] b, int offset, int length) {
    StringBuffer sb = new StringBuffer ();
    sb.append (length + "b");
    if (description != null) sb.append (" (" + description + ")");

    sb.append (':');
    int prefixlen = sb.toString ().length ();
    prefixlen = (prefixlen + 8) & ~ 7;
    sb.append ('\t');
    int perline = (80 - prefixlen) / 3;
    for (int i = 0;
    i < length; i ++) {
        if (i != 0 && i % perline == 0) {
            sb.append ('\n');
            for (int j = 0;
            j < prefixlen / 8; j ++) sb.append ('\t');

        }
        int value = (int) (b [i + offset]) & 0xFF;
        sb.append (hex [(value>> 4)]);
        sb.append (hex [(value & 0xF)]);
        sb.append (' ');
    }
    sb.append ('\n');
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/utils/hexdump.java" startline="51" endline="54">
public static String dump (String s, byte [] b) {
    return dump (s, b, 0, b.length);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/utils/base16.java" startline="18" endline="19">
private base16 () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/utils/base16.java" startline="26" endline="38">
public static String toString (byte [] b) {
    ByteArrayOutputStream os = new ByteArrayOutputStream ();
    for (int i = 0;
    i < b.length; i ++) {
        short value = (short) (b [i] & 0xFF);
        byte high = (byte) (value>> 4);
        byte low = (byte) (value & 0xF);
        os.write (Base16.charAt (high));
        os.write (Base16.charAt (low));
    }
    return new String (os.toByteArray ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/utils/base16.java" startline="45" endline="71">
public static byte [] fromString (String str) {
    ByteArrayOutputStream bs = new ByteArrayOutputStream ();
    byte [] raw = str.getBytes ();
    for (int i = 0;
    i < raw.length; i ++) {
        if (! Character.isWhitespace ((char) raw [i])) bs.write (raw [i]);

    }
    byte [] in = bs.toByteArray ();
    if (in.length % 2 != 0) {
        return null;
    }
    bs.reset ();
    DataOutputStream ds = new DataOutputStream (bs);
    for (int i = 0;
    i < in.length; i += 2) {
        byte high = (byte) Base16.indexOf (Character.toUpperCase ((char) in [i]));
        byte low = (byte) Base16.indexOf (Character.toUpperCase ((char) in [i + 1]));
        try {
            ds.writeByte ((high << 4) + low);
        } catch (IOException e) {
        }
    }
    return bs.toByteArray ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/utils/base32.java" startline="18" endline="18">
private Alphabet () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/utils/base32.java" startline="36" endline="41">
public base32 (String alphabet, boolean padding, boolean lowercase) {
    this.alphabet = alphabet;
    this.padding = padding;
    this.lowercase = lowercase;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/utils/base32.java" startline="43" endline="59">
static private int blockLenToPadding (int blocklen) {
    switch (blocklen) {
        case 1 :
            return 6;
        case 2 :
            return 4;
        case 3 :
            return 3;
        case 4 :
            return 1;
        case 5 :
            return 0;
        default :
            return - 1;
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/utils/base32.java" startline="61" endline="77">
static private int paddingToBlockLen (int padlen) {
    switch (padlen) {
        case 6 :
            return 1;
        case 4 :
            return 2;
        case 3 :
            return 3;
        case 1 :
            return 4;
        case 0 :
            return 5;
        default :
            return - 1;
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/utils/base32.java" startline="85" endline="139">
public String toString (byte [] b) {
    ByteArrayOutputStream os = new ByteArrayOutputStream ();
    for (int i = 0;
    i < (b.length + 4) / 5; i ++) {
        short s [] = new short [5];
        int t [] = new int [8];
        int blocklen = 5;
        for (int j = 0;
        j < 5; j ++) {
            if ((i * 5 + j) < b.length) s [j] = (short) (b [i * 5 + j] & 0xFF);
            else {
                s [j] = 0;
                blocklen --;
            }
        }
        int padlen = blockLenToPadding (blocklen);
        t [0] = (byte) ((s [0]>> 3) & 0x1F);
        t [1] = (byte) (((s [0] & 0x07) << 2) | ((s [1]>> 6) & 0x03));
        t [2] = (byte) ((s [1]>> 1) & 0x1F);
        t [3] = (byte) (((s [1] & 0x01) << 4) | ((s [2]>> 4) & 0x0F));
        t [4] = (byte) (((s [2] & 0x0F) << 1) | ((s [3]>> 7) & 0x01));
        t [5] = (byte) ((s [3]>> 2) & 0x1F);
        t [6] = (byte) (((s [3] & 0x03) << 3) | ((s [4]>> 5) & 0x07));
        t [7] = (byte) (s [4] & 0x1F);
        for (int j = 0;
        j < t.length - padlen; j ++) {
            char c = alphabet.charAt (t [j]);
            if (lowercase) c = Character.toLowerCase (c);

            os.write (c);
        }
        if (padding) {
            for (int j = t.length - padlen;
            j < t.length; j ++) os.write ('=');

        }
    }
    return new String (os.toByteArray ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/utils/base32.java" startline="147" endline="211">
public byte [] fromString (String str) {
    ByteArrayOutputStream bs = new ByteArrayOutputStream ();
    byte [] raw = str.getBytes ();
    for (int i = 0;
    i < raw.length; i ++) {
        char c = (char) raw [i];
        if (! Character.isWhitespace (c)) {
            c = Character.toUpperCase (c);
            bs.write ((byte) c);
        }
    }
    if (padding) {
        if (bs.size () % 8 != 0) return null;

    } else {
        while (bs.size () % 8 != 0) bs.write ('=');

    }
    byte [] in = bs.toByteArray ();
    bs.reset ();
    DataOutputStream ds = new DataOutputStream (bs);
    for (int i = 0;
    i < in.length / 8; i ++) {
        short [] s = new short [8];
        int [] t = new int [5];
        int padlen = 8;
        for (int j = 0;
        j < 8; j ++) {
            char c = (char) in [i * 8 + j];
            if (c == '=') break;

            s [j] = (short) alphabet.indexOf (in [i * 8 + j]);
            if (s [j] < 0) return null;

            padlen --;
        }
        int blocklen = paddingToBlockLen (padlen);
        if (blocklen < 0) return null;

        t [0] = (s [0] << 3) | s [1]>> 2;
        t [1] = ((s [1] & 0x03) << 6) | (s [2] << 1) | (s [3]>> 4);
        t [2] = ((s [3] & 0x0F) << 4) | ((s [4]>> 1) & 0x0F);
        t [3] = (s [4] << 7) | (s [5] << 2) | (s [6]>> 3);
        t [4] = ((s [6] & 0x07) << 5) | s [7];
        try {
            for (int j = 0;
            j < blocklen; j ++) ds.writeByte ((byte) (t [j] & 0xFF));

        } catch (IOException e) {
        }
    }
    return bs.toByteArray ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/URIRecord.java" startline="22" endline="24">
URIRecord () {
    target = new byte [] {};
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/URIRecord.java" startline="26" endline="29">
Record getObject () {
    return new URIRecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/URIRecord.java" startline="39" endline="52">
public URIRecord (Name name, int dclass, long ttl, int priority, int weight, String target) {
    super (name, Type.URI, dclass, ttl);
    this.priority = checkU16 ("priority", priority);
    this.weight = checkU16 ("weight", weight);
    try {
        this.target = byteArrayFromString (target);
    } catch (TextParseException e) {
        throw new IllegalArgumentException (e.getMessage ());
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/URIRecord.java" startline="54" endline="59">
void rrFromWire (DNSInput in) throws IOException {
    priority = in.readU16 ();
    weight = in.readU16 ();
    target = in.readByteArray ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/URIRecord.java" startline="61" endline="71">
void rdataFromString (Tokenizer st, Name origin) throws IOException {
    priority = st.getUInt16 ();
    weight = st.getUInt16 ();
    try {
        target = byteArrayFromString (st.getString ());
    } catch (TextParseException e) {
        throw st.exception (e.getMessage ());
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/URIRecord.java" startline="74" endline="81">
String rrToString () {
    StringBuffer sb = new StringBuffer ();
    sb.append (priority + " ");
    sb.append (weight + " ");
    sb.append (byteArrayToString (target, true));
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/URIRecord.java" startline="84" endline="87">
public int getPriority () {
    return priority;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/URIRecord.java" startline="90" endline="93">
public int getWeight () {
    return weight;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/URIRecord.java" startline="96" endline="99">
public String getTarget () {
    return byteArrayToString (target, false);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/URIRecord.java" startline="101" endline="106">
void rrToWire (DNSOutput out, Compression c, boolean canonical) {
    out.writeU16 (priority);
    out.writeU16 (weight);
    out.writeByteArray (target);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/MINFORecord.java" startline="22" endline="22">
MINFORecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/MINFORecord.java" startline="24" endline="27">
Record getObject () {
    return new MINFORecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/MINFORecord.java" startline="36" endline="45">
public MINFORecord (Name name, int dclass, long ttl, Name responsibleAddress, Name errorAddress) {
    super (name, Type.MINFO, dclass, ttl);
    this.responsibleAddress = checkName ("responsibleAddress", responsibleAddress);
    this.errorAddress = checkName ("errorAddress", errorAddress);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/MINFORecord.java" startline="47" endline="51">
void rrFromWire (DNSInput in) throws IOException {
    responsibleAddress = new Name (in);
    errorAddress = new Name (in);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/MINFORecord.java" startline="53" endline="57">
void rdataFromString (Tokenizer st, Name origin) throws IOException {
    responsibleAddress = st.getName (origin);
    errorAddress = st.getName (origin);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/MINFORecord.java" startline="60" endline="67">
String rrToString () {
    StringBuffer sb = new StringBuffer ();
    sb.append (responsibleAddress);
    sb.append (" ");
    sb.append (errorAddress);
    return sb.toString ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/MINFORecord.java" startline="70" endline="73">
public Name getResponsibleAddress () {
    return responsibleAddress;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/MINFORecord.java" startline="79" endline="82">
public Name getErrorAddress () {
    return errorAddress;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/MINFORecord.java" startline="84" endline="88">
void rrToWire (DNSOutput out, Compression c, boolean canonical) {
    responsibleAddress.toWire (out, null, canonical);
    errorAddress.toWire (out, null, canonical);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Options.java" startline="37" endline="38">
private Options () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Options.java" startline="40" endline="57">
public static void refresh () {
    String s = System.getProperty ("dnsjava.options");
    if (s != null) {
        StringTokenizer st = new StringTokenizer (s, ",");
        while (st.hasMoreTokens ()) {
            String token = st.nextToken ();
            int index = token.indexOf ('=');
            if (index == - 1) set (token);
            else {
                String option = token.substring (0, index);
                String value = token.substring (index + 1);
                set (option, value);
            }
        }
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Options.java" startline="60" endline="63">
public static void clear () {
    table = null;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Options.java" startline="66" endline="71">
public static void set (String option) {
    if (table == null) table = new HashMap ();

    table.put (option.toLowerCase (), "true");
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Options.java" startline="74" endline="79">
public static void set (String option, String value) {
    if (table == null) table = new HashMap ();

    table.put (option.toLowerCase (), value.toLowerCase ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Options.java" startline="82" endline="87">
public static void unset (String option) {
    if (table == null) return;

    table.remove (option.toLowerCase ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Options.java" startline="90" endline="95">
public static boolean check (String option) {
    if (table == null) return false;

    return (table.get (option.toLowerCase ()) != null);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Options.java" startline="98" endline="103">
public static String value (String option) {
    if (table == null) return null;

    return ((String) table.get (option.toLowerCase ()));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/Options.java" startline="108" endline="121">
public static int intValue (String option) {
    String s = value (option);
    if (s != null) {
        try {
            int val = Integer.parseInt (s);
            if (val > 0) return (val);

        } catch (NumberFormatException e) {
        }
    }
    return (- 1);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ZoneTransferIn.java" startline="86" endline="90">
private Delta () {
    adds = new ArrayList ();
    deletes = new ArrayList ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ZoneTransferIn.java" startline="131" endline="133">
public void startAXFR () {
    axfr = new ArrayList ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ZoneTransferIn.java" startline="135" endline="137">
public void startIXFR () {
    ixfr = new ArrayList ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ZoneTransferIn.java" startline="139" endline="144">
public void startIXFRDeletes (Record soa) {
    Delta delta = new Delta ();
    delta.deletes.add (soa);
    delta.start = getSOASerial (soa);
    ixfr.add (delta);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ZoneTransferIn.java" startline="146" endline="150">
public void startIXFRAdds (Record soa) {
    Delta delta = (Delta) ixfr.get (ixfr.size () - 1);
    delta.adds.add (soa);
    delta.end = getSOASerial (soa);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ZoneTransferIn.java" startline="152" endline="163">
public void handleRecord (Record r) {
    List list;
    if (ixfr != null) {
        Delta delta = (Delta) ixfr.get (ixfr.size () - 1);
        if (delta.adds.size () > 0) list = delta.adds;
        else list = delta.deletes;

    } else list = axfr;

    list.add (r);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ZoneTransferIn.java" startline="166" endline="167">
private ZoneTransferIn () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ZoneTransferIn.java" startline="169" endline="191">
private ZoneTransferIn (Name zone, int xfrtype, long serial, boolean fallback, SocketAddress address, TSIG key) {
    this.address = address;
    this.tsig = key;
    if (zone.isAbsolute ()) zname = zone;
    else {
        try {
            zname = Name.concatenate (zone, Name.root);
        } catch (NameTooLongException e) {
            throw new IllegalArgumentException ("ZoneTransferIn: " + "name too long");
        }
    }
    qtype = xfrtype;
    dclass = DClass.IN;
    ixfr_serial = serial;
    want_fallback = fallback;
    state = INITIALSOA;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ZoneTransferIn.java" startline="200" endline="203">
public static ZoneTransferIn newAXFR (Name zone, SocketAddress address, TSIG key) {
    return new ZoneTransferIn (zone, Type.AXFR, 0, false, address, key);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ZoneTransferIn.java" startline="214" endline="221">
public static ZoneTransferIn newAXFR (Name zone, String host, int port, TSIG key) throws UnknownHostException {
    if (port == 0) port = SimpleResolver.DEFAULT_PORT;

    return newAXFR (zone, new InetSocketAddress (host, port), key);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ZoneTransferIn.java" startline="231" endline="236">
public static ZoneTransferIn newAXFR (Name zone, String host, TSIG key) throws UnknownHostException {
    return newAXFR (zone, host, 0, key);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ZoneTransferIn.java" startline="248" endline="254">
public static ZoneTransferIn newIXFR (Name zone, long serial, boolean fallback, SocketAddress address, TSIG key) {
    return new ZoneTransferIn (zone, Type.IXFR, serial, fallback, address, key);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ZoneTransferIn.java" startline="268" endline="277">
public static ZoneTransferIn newIXFR (Name zone, long serial, boolean fallback, String host, int port, TSIG key) throws UnknownHostException {
    if (port == 0) port = SimpleResolver.DEFAULT_PORT;

    return newIXFR (zone, serial, fallback, new InetSocketAddress (host, port), key);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ZoneTransferIn.java" startline="290" endline="295">
public static ZoneTransferIn newIXFR (Name zone, long serial, boolean fallback, String host, TSIG key) throws UnknownHostException {
    return newIXFR (zone, serial, fallback, host, 0, key);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ZoneTransferIn.java" startline="300" endline="303">
public Name getName () {
    return zname;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ZoneTransferIn.java" startline="308" endline="311">
public int getType () {
    return qtype;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ZoneTransferIn.java" startline="318" endline="324">
public void setTimeout (int secs) {
    if (secs < 0) throw new IllegalArgumentException ("timeout cannot be " + "negative");

    timeout = 1000L * secs;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ZoneTransferIn.java" startline="330" endline="334">
public void setDClass (int dclass) {
    DClass.check (dclass);
    this.dclass = dclass;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ZoneTransferIn.java" startline="340" endline="343">
public void setLocalAddress (SocketAddress addr) {
    this.localAddress = addr;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ZoneTransferIn.java" startline="345" endline="352">
private void openConnection () throws IOException {
    long endTime = System.currentTimeMillis () + timeout;
    client = new TCPClient (endTime);
    if (localAddress != null) client.bind (localAddress);

    client.connect (address);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ZoneTransferIn.java" startline="354" endline="373">
private void sendQuery () throws IOException {
    Record question = Record.newRecord (zname, qtype, dclass);
    Message query = new Message ();
    query.getHeader ().setOpcode (Opcode.QUERY);
    query.addRecord (question, Section.QUESTION);
    if (qtype == Type.IXFR) {
        Record soa = new SOARecord (zname, dclass, 0, Name.root, Name.root, ixfr_serial, 0, 0, 0, 0);
        query.addRecord (soa, Section.AUTHORITY);
    }
    if (tsig != null) {
        tsig.apply (query, null);
        verifier = new TSIG.StreamVerifier (tsig, query.getTSIG ());
    }
    byte [] out = query.toWire (Message.MAXLENGTH);
    client.send (out);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ZoneTransferIn.java" startline="375" endline="379">
private static long getSOASerial (Record rec) {
    SOARecord soa = (SOARecord) rec;
    return soa.getSerial ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ZoneTransferIn.java" startline="381" endline="385">
private void logxfr (String s) {
    if (Options.check ("verbose")) System.out.println (zname + ": " + s);

}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ZoneTransferIn.java" startline="387" endline="390">
private void fail (String s) throws ZoneTransferException {
    throw new ZoneTransferException (s);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ZoneTransferIn.java" startline="392" endline="400">
private void fallback () throws ZoneTransferException {
    if (! want_fallback) fail ("server doesn't support IXFR");

    logxfr ("falling back to AXFR");
    qtype = Type.AXFR;
    state = INITIALSOA;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ZoneTransferIn.java" startline="402" endline="501">
private void parseRR (Record rec) throws ZoneTransferException {
    int type = rec.getType ();
    Delta delta;
    switch (state) {
        case INITIALSOA :
            if (type != Type.SOA) fail ("missing initial SOA");

            initialsoa = rec;
            end_serial = getSOASerial (rec);
            if (qtype == Type.IXFR && Serial.compare (end_serial, ixfr_serial) <= 0) {
                logxfr ("up to date");
                state = END;
                break;
            }
            state = FIRSTDATA;
            break;
        case FIRSTDATA :
            if (qtype == Type.IXFR && type == Type.SOA && getSOASerial (rec) == ixfr_serial) {
                rtype = Type.IXFR;
                handler.startIXFR ();
                logxfr ("got incremental response");
                state = IXFR_DELSOA;
            } else {
                rtype = Type.AXFR;
                handler.startAXFR ();
                handler.handleRecord (initialsoa);
                logxfr ("got nonincremental response");
                state = AXFR;
            }
            parseRR (rec);
            return;
        case IXFR_DELSOA :
            handler.startIXFRDeletes (rec);
            state = IXFR_DEL;
            break;
        case IXFR_DEL :
            if (type == Type.SOA) {
                current_serial = getSOASerial (rec);
                state = IXFR_ADDSOA;
                parseRR (rec);
                return;
            }
            handler.handleRecord (rec);
            break;
        case IXFR_ADDSOA :
            handler.startIXFRAdds (rec);
            state = IXFR_ADD;
            break;
        case IXFR_ADD :
            if (type == Type.SOA) {
                long soa_serial = getSOASerial (rec);
                if (soa_serial == end_serial) {
                    state = END;
                    break;
                } else if (soa_serial != current_serial) {
                    fail ("IXFR out of sync: expected serial " + current_serial + " , got " + soa_serial);
                } else {
                    state = IXFR_DELSOA;
                    parseRR (rec);
                    return;
                }

            }
            handler.handleRecord (rec);
            break;
        case AXFR :
            if (type == Type.A && rec.getDClass () != dclass) break;

            handler.handleRecord (rec);
            if (type == Type.SOA) {
                state = END;
            }
            break;
        case END :
            fail ("extra data");
            break;
        default :
            fail ("invalid state");
            break;
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ZoneTransferIn.java" startline="503" endline="511">
private void closeConnection () {
    try {
        if (client != null) client.cleanup ();

    } catch (IOException e) {
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ZoneTransferIn.java" startline="513" endline="523">
private Message parseMessage (byte [] b) throws WireParseException {
    try {
        return new Message (b);
    } catch (IOException e) {
        if (e instanceof WireParseException) throw (WireParseException) e;

        throw new WireParseException ("Error parsing message");
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ZoneTransferIn.java" startline="525" endline="576">
private void doxfr () throws IOException, ZoneTransferException {
    sendQuery ();
    while (state != END) {
        byte [] in = client.recv ();
        Message response = parseMessage (in);
        if (response.getHeader ().getRcode () == Rcode.NOERROR && verifier != null) {
            TSIGRecord tsigrec = response.getTSIG ();
            int error = verifier.verify (response, in);
            if (error != Rcode.NOERROR) fail ("TSIG failure");

        }
        Record [] answers = response.getSectionArray (Section.ANSWER);
        if (state == INITIALSOA) {
            int rcode = response.getRcode ();
            if (rcode != Rcode.NOERROR) {
                if (qtype == Type.IXFR && rcode == Rcode.NOTIMP) {
                    fallback ();
                    doxfr ();
                    return;
                }
                fail (Rcode.string (rcode));
            }
            Record question = response.getQuestion ();
            if (question != null && question.getType () != qtype) {
                fail ("invalid question section");
            }
            if (answers.length == 0 && qtype == Type.IXFR) {
                fallback ();
                doxfr ();
                return;
            }
        }
        for (int i = 0;
        i < answers.length; i ++) {
            parseRR (answers [i]);
        }
        if (state == END && verifier != null && ! response.isVerified ()) fail ("last message must be signed");

    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ZoneTransferIn.java" startline="585" endline="595">
public void run (ZoneTransferHandler handler) throws IOException, ZoneTransferException {
    this.handler = handler;
    try {
        openConnection ();
        doxfr ();
    } finally {
        closeConnection ();
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ZoneTransferIn.java" startline="606" endline="613">
public List run () throws IOException, ZoneTransferException {
    BasicHandler handler = new BasicHandler ();
    run (handler);
    if (handler.axfr != null) return handler.axfr;

    return handler.ixfr;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ZoneTransferIn.java" startline="615" endline="621">
private BasicHandler getBasicHandler () throws IllegalArgumentException {
    if (handler instanceof BasicHandler) return (BasicHandler) handler;

    throw new IllegalArgumentException ("ZoneTransferIn used callback " + "interface");
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ZoneTransferIn.java" startline="629" endline="632">
public boolean isAXFR () {
    return (rtype == Type.AXFR);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ZoneTransferIn.java" startline="639" endline="643">
public List getAXFR () {
    BasicHandler handler = getBasicHandler ();
    return handler.axfr;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ZoneTransferIn.java" startline="650" endline="653">
public boolean isIXFR () {
    return (rtype == Type.IXFR);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ZoneTransferIn.java" startline="660" endline="664">
public List getIXFR () {
    BasicHandler handler = getBasicHandler ();
    return handler.ixfr;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ZoneTransferIn.java" startline="672" endline="676">
public boolean isCurrent () {
    BasicHandler handler = getBasicHandler ();
    return (handler.axfr == null && handler.ixfr == null);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NULLRecord.java" startline="20" endline="20">
NULLRecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NULLRecord.java" startline="22" endline="25">
Record getObject () {
    return new NULLRecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NULLRecord.java" startline="31" endline="39">
public NULLRecord (Name name, int dclass, long ttl, byte [] data) {
    super (name, Type.NULL, dclass, ttl);
    if (data.length > 0xFFFF) {
        throw new IllegalArgumentException ("data must be <65536 bytes");
    }
    this.data = data;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NULLRecord.java" startline="41" endline="44">
void rrFromWire (DNSInput in) throws IOException {
    data = in.readByteArray ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NULLRecord.java" startline="46" endline="49">
void rdataFromString (Tokenizer st, Name origin) throws IOException {
    throw st.exception ("no defined text format for NULL records");
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NULLRecord.java" startline="51" endline="54">
String rrToString () {
    return unknownToString (data);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NULLRecord.java" startline="57" endline="60">
public byte [] getData () {
    return data;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/NULLRecord.java" startline="62" endline="65">
void rrToWire (DNSOutput out, Compression c, boolean canonical) {
    out.writeByteArray (data);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ARecord.java" startline="20" endline="20">
ARecord () {
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ARecord.java" startline="22" endline="25">
Record getObject () {
    return new ARecord ();
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ARecord.java" startline="27" endline="33">
private static final int fromArray (byte [] array) {
    return (((array [0] & 0xFF) << 24) | ((array [1] & 0xFF) << 16) | ((array [2] & 0xFF) << 8) | (array [3] & 0xFF));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ARecord.java" startline="35" endline="43">
private static final byte [] toArray (int addr) {
    byte [] bytes = new byte [4];
    bytes [0] = (byte) ((addr>>> 24) & 0xFF);
    bytes [1] = (byte) ((addr>>> 16) & 0xFF);
    bytes [2] = (byte) ((addr>>> 8) & 0xFF);
    bytes [3] = (byte) (addr & 0xFF);
    return bytes;
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ARecord.java" startline="49" endline="55">
public ARecord (Name name, int dclass, long ttl, InetAddress address) {
    super (name, Type.A, dclass, ttl);
    if (Address.familyOf (address) != Address.IPv4) throw new IllegalArgumentException ("invalid IPv4 address");

    addr = fromArray (address.getAddress ());
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ARecord.java" startline="57" endline="60">
void rrFromWire (DNSInput in) throws IOException {
    addr = fromArray (in.readByteArray (4));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ARecord.java" startline="62" endline="65">
void rdataFromString (Tokenizer st, Name origin) throws IOException {
    addr = fromArray (st.getAddressBytes (Address.IPv4));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ARecord.java" startline="68" endline="71">
String rrToString () {
    return (Address.toDottedQuad (toArray (addr)));
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ARecord.java" startline="74" endline="85">
public InetAddress getAddress () {
    try {
        if (name == null) return InetAddress.getByAddress (toArray (addr));
        else return InetAddress.getByAddress (name.toString (), toArray (addr));

    } catch (UnknownHostException e) {
        return null;
    }
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/org/xbill/DNS/ARecord.java" startline="87" endline="90">
void rrToWire (DNSOutput out, Compression c, boolean canonical) {
    out.writeU32 (((long) addr) & 0xFFFFFFFFL);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/dig.java" startline="14" endline="19">
static void usage () {
    System.out.println ("Usage: dig [@server] name [<type>] [<class>] " + "[options]");
    System.exit (0);
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/dig.java" startline="21" endline="26">
static void doQuery (Message response, long ms) throws IOException {
    System.out.println ("; java dig 0.0");
    System.out.println (response);
    System.out.println (";; Query time: " + ms + " ms");
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/dig.java" startline="28" endline="53">
static void doAXFR (Message response) throws IOException {
    System.out.println ("; java dig 0.0 <> " + name + " axfr");
    if (response.isSigned ()) {
        System.out.print (";; TSIG ");
        if (response.isVerified ()) System.out.println ("ok");
        else System.out.println ("failed");

    }
    if (response.getRcode () != Rcode.NOERROR) {
        System.out.println (response);
        return;
    }
    Record [] records = response.getSectionArray (Section.ANSWER);
    for (int i = 0;
    i < records.length; i ++) System.out.println (records [i]);

    System.out.print (";; done (");
    System.out.print (response.getHeader ().getCount (Section.ANSWER));
    System.out.print (" records, ");
    System.out.print (response.getHeader ().getCount (Section.ADDITIONAL));
    System.out.println (" additional)");
}
</source>
<source file="/home//jubair/SPL3/tools/NiCad-4.0/examples/dnsjava-master/dig.java" startline="55" endline="203">
public static void main (String argv []) throws IOException {
    String server = null;
    int arg;
    Message query, response;
    Record rec;
    SimpleResolver res = null;
    boolean printQuery = false;
    long startTime, endTime;
    if (argv.length < 1) {
        usage ();
    }
    try {
        arg = 0;
        if (argv [arg].startsWith ("@")) server = argv [arg ++].substring (1);

        if (server != null) res = new SimpleResolver (server);
        else res = new SimpleResolver ();

        String nameString = argv [arg ++];
        if (nameString.equals ("-x")) {
            name = ReverseMap.fromAddress (argv [arg ++]);
            type = Type.PTR;
            dclass = DClass.IN;
        } else {
            name = Name.fromString (nameString, Name.root);
            type = Type.value (argv [arg]);
            if (type < 0) type = Type.A;
            else arg ++;

            dclass = DClass.value (argv [arg]);
            if (dclass < 0) dclass = DClass.IN;
            else arg ++;

        }
        while (argv [arg].startsWith ("-") && argv [arg].length () > 1) {
            switch (argv [arg].charAt (1)) {
                case 'p' :
                    String portStr;
                    int port;
                    if (argv [arg].length () > 2) portStr = argv [arg].substring (2);
                    else portStr = argv [++ arg];

                    port = Integer.parseInt (portStr);
                    if (port < 0 || port > 65536) {
                        System.out.println ("Invalid port");
                        return;
                    }
                    res.setPort (port);
                    break;
                case 'b' :
                    String addrStr;
                    if (argv [arg].length () > 2) addrStr = argv [arg].substring (2);
                    else addrStr = argv [++ arg];

                    InetAddress addr;
                    try {
                        addr = InetAddress.getByName (addrStr);
                    } catch (Exception e) {
                        System.out.println ("Invalid address");
                        return;
                    }
                    res.setLocalAddress (addr);
                    break;
                case 'k' :
                    String key;
                    if (argv [arg].length () > 2) key = argv [arg].substring (2);
                    else key = argv [++ arg];

                    res.setTSIGKey (TSIG.fromString (key));
                    break;
                case 't' :
                    res.setTCP (true);
                    break;
                case 'i' :
                    res.setIgnoreTruncation (true);
                    break;
                case 'e' :
                    String ednsStr;
                    int edns;
                    if (argv [arg].length () > 2) ednsStr = argv [arg].substring (2);
                    else ednsStr = argv [++ arg];

                    edns = Integer.parseInt (ednsStr);
                    if (edns < 0 || edns > 1) {
                        System.out.println ("Unsupported " + "EDNS level: " + edns);
                        return;
                    }
                    res.setEDNS (edns);
                    break;
                case 'd' :
                    res.setEDNS (0, 0, ExtendedFlags.DO, null);
                    break;
                case 'q' :
                    printQuery = true;
                    break;
                default :
                    System.out.print ("Invalid option: ");
                    System.out.println (argv [arg]);
            }
            arg ++;
        }
    } catch (ArrayIndexOutOfBoundsException e) {
        if (name == null) usage ();

    }
    if (res == null) res = new SimpleResolver ();

    rec = Record.newRecord (name, type, dclass);
    query = Message.newQuery (rec);
    if (printQuery) System.out.println (query);

    startTime = System.currentTimeMillis ();
    response = res.send (query);
    endTime = System.currentTimeMillis ();
    if (type == Type.AXFR) doAXFR (response);
    else doQuery (response, endTime - startTime);

}
</source>
